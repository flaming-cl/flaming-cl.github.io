{"title":"Unraveling the Mystery Behind Closure with Stories","uid":"00e3725bba8ba6160a12eac273cbe88b","slug":"closure_stories","date":"2023-03-03T01:30:37.000Z","updated":"2023-03-03T19:13:27.591Z","comments":true,"path":"api/articles/closure_stories.json","keywords":null,"cover":[],"content":"<p>Before I explain the concept of closure, let me share a story with you.</p>\n<p>The word ‚Äúclosure‚Äù evokes a tender memory of my visit to Manchester in 2016.</p>\n<p>During my stay, I had the pleasure of living in an Airbnb home of an 80-year-old lady. The old lady was living alone, and her best friend was a cat named Mavis. In 2016, she did not have a smartphone, and her favorite form of entertainment was listening to the radio.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/222784849-cb99ee40-673d-4e0f-a5c9-35bc510b6f62.png\" alt=\"image\"></p>\n<p>Today, I can still envision her silhouette moving gracefully through the kitchen, preparing breakfast while enjoying her favorite radio program.</p>\n<p>Times have certainly changed, yet this elderly lady held onto habits from decades ago until today. </p>\n<p><strong>Now, you may wonder, what does this have to do with closure?</strong><br>Well, let‚Äôs take a look at the concept of closure:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Closure is when a function is able to remember and access its lexical scope even when that function is executing outside its lexical scope.<br>‚Äì You Don‚Äôt Know JS (1st edition)</p></blockquote>\n<p><strong>Have you noticed the similarity between an elderly lady who loves listening to the radio and a closure function remembering its original lexical scope?</strong></p>\n<p>In the story I shared earlier, the elderly lady <em>(a closure function)</em>  was born in the 1930s <em>(its lexical scope)</em> and developed the habit of getting news from the radio during the time she was born.</p>\n<p>Later, when she entered the 2010s <em>(another lexical scope)</em>, smartphones had already invaded the lives of almost everybody, but she still retained the habit that she developed in the 1930s‚Äî‚Äîlistening to the radio <em>(access its lexical scope even when that function is executing outside its lexical scope)</em>.</p>\n<p>Now, let‚Äôs go back to the concept of closure in JavaScript. A closure often has the following characteristics:</p>\n<ul>\n<li>A function was born in a lexical scope (i.e., the lexical scope where the function was defined).</li>\n<li>This function remembers and references variables from the birth scope.</li>\n<li>When this function runs in other scopes, it still uses certain variables from the birth scope.</li>\n</ul>\n<p>To illustrate this with code, it would look like this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">year1930s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> popularMedia <span class=\"token operator\">=</span> <span class=\"token string\">'Radio'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ladyS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>popularMedia<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> is my favorite way to get news.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> ladyS <span class=\"token operator\">=</span> <span class=\"token function\">year1930s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">year2010s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> popularMedia <span class=\"token operator\">=</span> <span class=\"token string\">'Smart phone'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ladyS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">year2010s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Radio is my favorite way to get news.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>To delve a bit deeper, as the closure function is still using variables from the birth scope, these variables cannot be destroyed and still occupy memory (like after the function year1930s is called, the variable popularMedia is still there).</p>\n<p>Yeah, in real life, though it‚Äôs already the 2020s, home radios haven‚Äôt completely disappeared from this world, due to some people‚Äôs love for nostalgia.</p>\n<p>Of course, there are many other examples that can illustrate how closure works. For instance, many immigrants still have a strong affinity for their hometown food, no matter how long they have lived abroad.</p>\n<p>To describe this with code, it could look like this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">lifeInHometown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> popularFood <span class=\"token operator\">=</span> <span class=\"token string\">'üå∂Ô∏è beef noodles'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">kidQ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>popularFood<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> is my favorite food.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> kidQ <span class=\"token operator\">=</span> <span class=\"token function\">lifeInHometown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">lifeInUK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> popularFood <span class=\"token operator\">=</span> <span class=\"token string\">'Fish and chips'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">kidQ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">lifeInUK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"üå∂Ô∏è beef noodles is my favorite food.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Let‚Äôs recap the concept of closure:</p>\n<ul>\n<li>If a closure is working, there must involve two different lexical scopes:<ul>\n<li>one is the birth lexical scope A, where the function was defined.</li>\n<li>the other is the lexical scope B, where the function is called later.</li>\n</ul>\n</li>\n<li>Even if the function leaves its birthplace closure A and runs in another lexical scope, it still remembers some variables defined in A.</li>\n</ul>\n<p>By now, you should have a grasp of what closure is.</p>\n<p>However, sometimes when people talk about closure, they are not referring to the precise concept of closure. For instance, you might hear people mentioning the term ‚Äòclosure,‚Äô but what they‚Äôre actually referring to is:</p>\n<p><em>They have a function that does not reference data from the lexical scope they expected.</em></p>\n<p>An example of this is Stale Closure, which often appears in React hooks and is a pain for many beginners. In the next blog post, I will discuss the Stale Closure issue in React hooks in more detail.</p>\n","feature":true,"text":"Before I explain the concept of closure, let me share a story with you. The word ‚Äúclosure‚Äù evokes a tender memory of my visit to Manchester ...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Best Practice of using ref in React hooks and Why","uid":"475ab91d3f640698afc7f2e0661d00df","slug":"best-practice-of-useRef-and-why","date":"2023-02-28T20:54:29.000Z","updated":"2023-03-01T00:02:24.319Z","comments":true,"path":"api/articles/best-practice-of-useRef-and-why.json","keywords":null,"cover":[],"text":"The idea for this blog post was sparked by a React quiz on Big Front-End titled ‚ÄúuseEffect.‚ÄùIn this article, we‚Äôll be discussing a best prac...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[],"tags":[],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}