<<<<<<< HEAD
{"title":"Data Abstraction from SICP","uid":"663764549142bb4876ce625b417bf9d8","slug":"SICP-2-data-abstraction","date":"2023-03-28T00:14:53.000Z","updated":"2023-04-04T15:21:09.733Z","comments":true,"path":"api/articles/SICP-2-data-abstraction.json","keywords":null,"cover":[],"content":"<h3 id=\"Data-Abstraction\"><a href=\"#Data-Abstraction\" class=\"headerlink\" title=\"Data Abstraction\"></a>Data Abstraction</h3><p>In functional programming, data abstraction is a technique that uses functions to hide the details of data structures, and provides a well-defined interface for accessing the data. In this way, the rest of the program does not have to deal with the details of the data structure, but only with the abstraction layer provided by the functions.</p>\n<p>By encapsulating the data structure, it also becomes easier to modify it in the future. Changes to the data structure can be made by adjusting the implementation of the functions that encapsulate it, without affecting the rest of the program.</p>\n<p>This article will show you how to use data abstraction to minimize the impact of unpredictable data changes to your program.</p>\n<h3 id=\"Example-Data-abstraction-V-S-a-plain-data-handling-method\"><a href=\"#Example-Data-abstraction-V-S-a-plain-data-handling-method\" class=\"headerlink\" title=\"Example: Data abstraction V.S. a plain data handling method\"></a>Example: Data abstraction V.S. a plain data handling method</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Write a function <code>midpoint_segment</code> to find out the middle point of a certain segment.</p></blockquote>\n<p>First, let’s take a look at how to implement <code>midpoint_segment</code> with data abstraction.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">make_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> x<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> y\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">x_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">y_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">make_segment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">start</span><span class=\"token operator\">:</span> start<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">end</span><span class=\"token operator\">:</span> end\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">start_segment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">segment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> segment<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">end_segment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">segment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> segment<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">midpoint_segment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">segment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token function\">start_segment</span><span class=\"token punctuation\">(</span>segment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> <span class=\"token function\">end_segment</span><span class=\"token punctuation\">(</span>segment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> mid_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">x_point</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">x_point</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> mid_y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">y_point</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">y_point</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">make_point</span><span class=\"token punctuation\">(</span>mid_x<span class=\"token punctuation\">,</span> mid_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">print_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">x_point</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">y_point</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> segment <span class=\"token operator\">=</span> <span class=\"token function\">make_segment</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_point</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> midpoint <span class=\"token operator\">=</span> <span class=\"token function\">midpoint_segment</span><span class=\"token punctuation\">(</span>segment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_point</span><span class=\"token punctuation\">(</span>midpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>In this case, we simply wrap the data definitions and retrieval operations with functions. By doing so, we avoid exposing the point data to the implementation logic of <code>midpoint_segment</code>. You may think this is redundant and cumbersome, but let’s not jump to conclusions yet and keep reading.</p>\n<p>Now we use a plain method to implement <code>midpoint_segment</code>.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Segment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">midpoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">segment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> segment<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> segment<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> mid_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> end<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> mid_y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> end<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>mid_x<span class=\"token punctuation\">,</span> mid_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">print_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>point<span class=\"token punctuation\">.</span>x<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>point<span class=\"token punctuation\">.</span>y<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> segment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Segment</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mid <span class=\"token operator\">=</span> <span class=\"token function\">midpoint</span><span class=\"token punctuation\">(</span>segment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_point</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>It looks like our plain method code is concise and readable.</p>\n<p><strong>However, is the plain method easier to maintain than data abstraction method?</strong></p>\n<h4 id=\"Potential-problems-with-plain-implementation\"><a href=\"#Potential-problems-with-plain-implementation\" class=\"headerlink\" title=\"Potential problems with plain implementation\"></a>Potential problems with plain implementation</h4><p>Suppose in the future, the data structure of a point becomes an array <code>[2, 4]</code>. </p>\n<p>Now, we need to make changes to the implementation of the plain method in all the code that uses <code>point.x</code> and <code>point.y</code>.</p>\n<p>However, experienced programmers know that modifying code in multiple places in a complex project is a <strong>dangerous</strong> signal. No one knows what unknown effects will happen when we let the butterfly flap its wings in a certain piece of code.</p>\n<p>A better way is to try our best to avoid make many changes to our existing code. </p>\n<h4 id=\"Why-data-abstraction-helps-you-to-build-robust-programs\"><a href=\"#Why-data-abstraction-helps-you-to-build-robust-programs\" class=\"headerlink\" title=\"Why data abstraction helps you to build robust programs\"></a>Why data abstraction helps you to build robust programs</h4><p>Now, we look at our code implemented with data abstraction.</p>\n<p>You will find you don’t have to search through the whole project to find out how many times you used <code>point.x</code> or <code>point.y</code>.<br>Although you still make a small number of changes, you at least have an overall understanding of its impact to the whole project, reducing the possibility of unknown bugs caused by code modifications.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">make_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">x_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">y_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// no changes to the rest of the code</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Now, do you prefer to individually wrap your data or leave them scattered?</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/229660566-833b648b-bed0-4ee1-ba1c-5a80913ebd74.png\" alt=\"cookies\">)</p>\n<h3 id=\"Data-abstraction-V-S-Adaptor-pattern\"><a href=\"#Data-abstraction-V-S-Adaptor-pattern\" class=\"headerlink\" title=\"Data abstraction V.S. Adaptor pattern\"></a>Data abstraction V.S. Adaptor pattern</h3><p>My Tip: I still don’t think one should stubbornly adhere to a certain method.</p>\n<p>When we find certain data is used scatteredly in a project, especially the project may develop into a large-scale project, we can consider using data abstraction.</p>\n<p>In addition, when facing data changes, another approach is to use the adaptor pattern. Below is a simple comparison between the adaptor pattern and data abstraction:</p>\n<h4 id=\"Adaptors\"><a href=\"#Adaptors\" class=\"headerlink\" title=\"Adaptors\"></a>Adaptors</h4><p><strong>Pros</strong></p>\n<ul>\n<li>Allows easier integration of existing code with new interfaces or data structures.</li>\n<li>Enables reuse of existing code with minimal modifications.</li>\n<li>Can provide a temporary solution for integrating incompatible systems while working on a more permanent solution.</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>Adds an extra layer of complexity, making code harder to understand and maintain.</li>\n<li>May not provide a long-term solution, requiring more refactoring in the future.</li>\n<li>Potentially loses some benefits of data abstraction by not fully encapsulating the implementation details.</li>\n</ul>\n<h4 id=\"Data-Abstraction-1\"><a href=\"#Data-Abstraction-1\" class=\"headerlink\" title=\"Data Abstraction\"></a>Data Abstraction</h4><p><strong>Pros</strong></p>\n<ul>\n<li>Encapsulates implementation details, allowing for cleaner and more maintainable code.</li>\n<li>Simplifies code changes by limiting the impact of modifications to the constructor and selector functions.</li>\n<li>Promotes better separation of concerns and modularity in the application.</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>Requires initial investment in creating constructors and selectors.</li>\n</ul>\n","text":"Data AbstractionIn functional programming, data abstraction is a technique that uses functions to hide the details of data structures, and p...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"Functional-Programming","slug":"Functional-Programming","count":2,"path":"api/tags/Functional-Programming.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Data-Abstraction\"><span class=\"toc-text\">Data Abstraction</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Example-Data-abstraction-V-S-a-plain-data-handling-method\"><span class=\"toc-text\">Example: Data abstraction V.S. a plain data handling method</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Potential-problems-with-plain-implementation\"><span class=\"toc-text\">Potential problems with plain implementation</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Why-data-abstraction-helps-you-to-build-robust-programs\"><span class=\"toc-text\">Why data abstraction helps you to build robust programs</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Data-abstraction-V-S-Adaptor-pattern\"><span class=\"toc-text\">Data abstraction V.S. Adaptor pattern</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Adaptors\"><span class=\"toc-text\">Adaptors</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Data-Abstraction-1\"><span class=\"toc-text\">Data Abstraction</span></a></li></ol></li></ol>","author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CS143 Compiler - Basic concepts","uid":"209a99b3228c3d6a24c530e39b14fe15","slug":"compiler","date":"2023-05-27T20:12:38.000Z","updated":"2023-05-27T21:31:12.271Z","comments":true,"path":"api/articles/compiler.json","keywords":null,"cover":null,"text":"1. Lexical Analysis This term comes from “lexicon”. In linguistics, a lexicon refers to the vocabulary of a language, including words and ph...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"compiler","slug":"compiler","count":1,"path":"api/tags/compiler.json"}],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Recursion, Iteration and Abstraction from SICP","uid":"db38fc973daee4dda97824ebfb5c0041","slug":"recursion-iteration-and-function-abstraction-md","date":"2023-03-26T23:45:35.000Z","updated":"2023-03-29T03:38:59.508Z","comments":true,"path":"api/articles/recursion-iteration-and-function-abstraction-md.json","keywords":null,"cover":[],"text":"I’ve recently been reading SICP, a book about programming philosophy. I just finished the 1st chapter yesterday and wanted to share some of ...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"Functional-Programming","slug":"Functional-Programming","count":2,"path":"api/tags/Functional-Programming.json"}],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
=======
{"title":"Data Abstraction from SICP","uid":"663764549142bb4876ce625b417bf9d8","slug":"SICP-2-data-abstraction","date":"2023-03-28T00:14:53.000Z","updated":"2023-04-04T15:21:09.733Z","comments":true,"path":"api/articles/SICP-2-data-abstraction.json","keywords":null,"cover":[],"content":"<h3 id=\"Data-Abstraction\"><a href=\"#Data-Abstraction\" class=\"headerlink\" title=\"Data Abstraction\"></a>Data Abstraction</h3><p>In functional programming, data abstraction is a technique that uses functions to hide the details of data structures, and provides a well-defined interface for accessing the data. In this way, the rest of the program does not have to deal with the details of the data structure, but only with the abstraction layer provided by the functions.</p>\n<p>By encapsulating the data structure, it also becomes easier to modify it in the future. Changes to the data structure can be made by adjusting the implementation of the functions that encapsulate it, without affecting the rest of the program.</p>\n<p>This article will show you how to use data abstraction to minimize the impact of unpredictable data changes to your program.</p>\n<h3 id=\"Example-Data-abstraction-V-S-a-plain-data-handling-method\"><a href=\"#Example-Data-abstraction-V-S-a-plain-data-handling-method\" class=\"headerlink\" title=\"Example: Data abstraction V.S. a plain data handling method\"></a>Example: Data abstraction V.S. a plain data handling method</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Write a function <code>midpoint_segment</code> to find out the middle point of a certain segment.</p></blockquote>\n<p>First, let’s take a look at how to implement <code>midpoint_segment</code> with data abstraction.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">make_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> x<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> y\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">x_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">y_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">make_segment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">start</span><span class=\"token operator\">:</span> start<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">end</span><span class=\"token operator\">:</span> end\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">start_segment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">segment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> segment<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">end_segment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">segment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> segment<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">midpoint_segment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">segment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token function\">start_segment</span><span class=\"token punctuation\">(</span>segment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> <span class=\"token function\">end_segment</span><span class=\"token punctuation\">(</span>segment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> mid_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">x_point</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">x_point</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> mid_y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">y_point</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">y_point</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">make_point</span><span class=\"token punctuation\">(</span>mid_x<span class=\"token punctuation\">,</span> mid_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">print_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">x_point</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">y_point</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> segment <span class=\"token operator\">=</span> <span class=\"token function\">make_segment</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_point</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> midpoint <span class=\"token operator\">=</span> <span class=\"token function\">midpoint_segment</span><span class=\"token punctuation\">(</span>segment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_point</span><span class=\"token punctuation\">(</span>midpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>In this case, we simply wrap the data definitions and retrieval operations with functions. By doing so, we avoid exposing the point data to the implementation logic of <code>midpoint_segment</code>. You may think this is redundant and cumbersome, but let’s not jump to conclusions yet and keep reading.</p>\n<p>Now we use a plain method to implement <code>midpoint_segment</code>.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Segment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">midpoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">segment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> segment<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> segment<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> mid_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> end<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> mid_y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> end<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>mid_x<span class=\"token punctuation\">,</span> mid_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">print_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>point<span class=\"token punctuation\">.</span>x<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>point<span class=\"token punctuation\">.</span>y<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> segment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Segment</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mid <span class=\"token operator\">=</span> <span class=\"token function\">midpoint</span><span class=\"token punctuation\">(</span>segment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_point</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>It looks like our plain method code is concise and readable.</p>\n<p><strong>However, is the plain method easier to maintain than data abstraction method?</strong></p>\n<h4 id=\"Potential-problems-with-plain-implementation\"><a href=\"#Potential-problems-with-plain-implementation\" class=\"headerlink\" title=\"Potential problems with plain implementation\"></a>Potential problems with plain implementation</h4><p>Suppose in the future, the data structure of a point becomes an array <code>[2, 4]</code>. </p>\n<p>Now, we need to make changes to the implementation of the plain method in all the code that uses <code>point.x</code> and <code>point.y</code>.</p>\n<p>However, experienced programmers know that modifying code in multiple places in a complex project is a <strong>dangerous</strong> signal. No one knows what unknown effects will happen when we let the butterfly flap its wings in a certain piece of code.</p>\n<p>A better way is to try our best to avoid make many changes to our existing code. </p>\n<h4 id=\"Why-data-abstraction-helps-you-to-build-robust-programs\"><a href=\"#Why-data-abstraction-helps-you-to-build-robust-programs\" class=\"headerlink\" title=\"Why data abstraction helps you to build robust programs\"></a>Why data abstraction helps you to build robust programs</h4><p>Now, we look at our code implemented with data abstraction.</p>\n<p>You will find you don’t have to search through the whole project to find out how many times you used <code>point.x</code> or <code>point.y</code>.<br>Although you still make a small number of changes, you at least have an overall understanding of its impact to the whole project, reducing the possibility of unknown bugs caused by code modifications.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">make_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">x_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">y_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// no changes to the rest of the code</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Now, do you prefer to individually wrap your data or leave them scattered?</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/229660566-833b648b-bed0-4ee1-ba1c-5a80913ebd74.png\" alt=\"cookies\">)</p>\n<h3 id=\"Data-abstraction-V-S-Adaptor-pattern\"><a href=\"#Data-abstraction-V-S-Adaptor-pattern\" class=\"headerlink\" title=\"Data abstraction V.S. Adaptor pattern\"></a>Data abstraction V.S. Adaptor pattern</h3><p>My Tip: I still don’t think one should stubbornly adhere to a certain method.</p>\n<p>When we find certain data is used scatteredly in a project, especially the project may develop into a large-scale project, we can consider using data abstraction.</p>\n<p>In addition, when facing data changes, another approach is to use the adaptor pattern. Below is a simple comparison between the adaptor pattern and data abstraction:</p>\n<h4 id=\"Adaptors\"><a href=\"#Adaptors\" class=\"headerlink\" title=\"Adaptors\"></a>Adaptors</h4><p><strong>Pros</strong></p>\n<ul>\n<li>Allows easier integration of existing code with new interfaces or data structures.</li>\n<li>Enables reuse of existing code with minimal modifications.</li>\n<li>Can provide a temporary solution for integrating incompatible systems while working on a more permanent solution.</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>Adds an extra layer of complexity, making code harder to understand and maintain.</li>\n<li>May not provide a long-term solution, requiring more refactoring in the future.</li>\n<li>Potentially loses some benefits of data abstraction by not fully encapsulating the implementation details.</li>\n</ul>\n<h4 id=\"Data-Abstraction-1\"><a href=\"#Data-Abstraction-1\" class=\"headerlink\" title=\"Data Abstraction\"></a>Data Abstraction</h4><p><strong>Pros</strong></p>\n<ul>\n<li>Encapsulates implementation details, allowing for cleaner and more maintainable code.</li>\n<li>Simplifies code changes by limiting the impact of modifications to the constructor and selector functions.</li>\n<li>Promotes better separation of concerns and modularity in the application.</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>Requires initial investment in creating constructors and selectors.</li>\n</ul>\n","feature":true,"text":"Data AbstractionIn functional programming, data abstraction is a technique that uses functions to hide the details of data structures, and p...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"Functional-Programming","slug":"Functional-Programming","count":2,"path":"api/tags/Functional-Programming.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Data-Abstraction\"><span class=\"toc-text\">Data Abstraction</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Example-Data-abstraction-V-S-a-plain-data-handling-method\"><span class=\"toc-text\">Example: Data abstraction V.S. a plain data handling method</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Potential-problems-with-plain-implementation\"><span class=\"toc-text\">Potential problems with plain implementation</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Why-data-abstraction-helps-you-to-build-robust-programs\"><span class=\"toc-text\">Why data abstraction helps you to build robust programs</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Data-abstraction-V-S-Adaptor-pattern\"><span class=\"toc-text\">Data abstraction V.S. Adaptor pattern</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Adaptors\"><span class=\"toc-text\">Adaptors</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Data-Abstraction-1\"><span class=\"toc-text\">Data Abstraction</span></a></li></ol></li></ol>","author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CS143 Compiler - Basic concepts","uid":"209a99b3228c3d6a24c530e39b14fe15","slug":"compiler","date":"2023-05-27T20:12:38.000Z","updated":"2023-05-27T21:31:12.271Z","comments":true,"path":"api/articles/compiler.json","keywords":null,"cover":null,"text":"1. Lexical Analysis This term comes from “lexicon”. In linguistics, a lexicon refers to the vocabulary of a language, including words and ph...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"compiler","slug":"compiler","count":1,"path":"api/tags/compiler.json"}],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Recursion, Iteration and Abstraction from SICP","uid":"db38fc973daee4dda97824ebfb5c0041","slug":"recursion-iteration-and-function-abstraction-md","date":"2023-03-26T23:45:35.000Z","updated":"2023-03-29T03:38:59.508Z","comments":true,"path":"api/articles/recursion-iteration-and-function-abstraction-md.json","keywords":null,"cover":[],"text":"I’ve recently been reading SICP, a book about programming philosophy. I just finished the 1st chapter yesterday and wanted to share some of ...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"Functional-Programming","slug":"Functional-Programming","count":2,"path":"api/tags/Functional-Programming.json"}],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
>>>>>>> e802eaee8fb6eadef83edaa9fde7a42bebf6e41f
