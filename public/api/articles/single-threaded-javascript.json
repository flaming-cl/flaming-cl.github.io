{"title":"Single-threaded JavaScript","uid":"e3fb0e6e7c44f4a9d38a4589b5569d51","slug":"single-threaded-javascript","date":"2023-02-08T19:33:14.000Z","updated":"2023-02-09T17:19:53.747Z","comments":true,"path":"api/articles/single-threaded-javascript.json","keywords":null,"cover":[],"content":"<h3 id=\"Single-threaded-JavaScript\"><a href=\"#Single-threaded-JavaScript\" class=\"headerlink\" title=\"Single-threaded JavaScript\"></a>Single-threaded JavaScript</h3><p>The JavaScript engine is single threaded.</p>\n<p>This means it only does one thing at a time in the call stack, like the only phone booth in town that only allows one person to make phone calls.</p>\n<p>Also, function calls that are waiting to be executed are like people who are waiting outside a booth for phone calls.</p>\n<p><img src=\"https://pbs.twimg.com/media/FoeFDZfX0AA1Fqn?format=jpg&name=medium\" alt=\"image\"></p>\n<h3 id=\"Sync-and-Aysnc-Events\"><a href=\"#Sync-and-Aysnc-Events\" class=\"headerlink\" title=\"Sync and Aysnc Events\"></a>Sync and Aysnc Events</h3><p>In JavaScript, we have sync and async calls.</p>\n<p>When it comes to our phone booth story, we also have two kinds of people:</p>\n<ul>\n<li>People who can start their phone call immediately (sync)</li>\n<li>People who just stay in the booth , and wait for others to be ready and start a call (async)</li>\n</ul>\n<p>No one would like to be kept waiting outside of a phone booth, but only to see someone stay in the booth doing nothing.</p>\n<p>An efficient JavaScript engine also does not allow async functions to occupy the call stack and have sync ones to wait.</p>\n<h3 id=\"Callback-Queue-and-Call-Stack\"><a href=\"#Callback-Queue-and-Call-Stack\" class=\"headerlink\" title=\"Callback Queue and Call Stack\"></a>Callback Queue and Call Stack</h3><p>So the JavaScript engine will let the sync calls to stay in the call stack, and puts async calls aside for a while.</p>\n<p>For those async calls, once they are ready to be executed, they will be pushed into a callback queue, waiting to be back to the call stack.<br>Right, they are not pushed into the call stack immediately. Instead, they will be back until the call stack has finished its existing sync calls.</p>\n<p>I think this makes sense, because we do not want to messed up async calls and sync calls.</p>\n<p>When an async callback is ready, it is possible that there are still some sync tasks waiting to be execuated in the call stack. At this moment, if we allow a ready async task to jump the queue, you may get confused why a async call is execuated before your sync calls.<br><img src=\"https://pbs.twimg.com/media/FoeFEsiXgAE7PxT?format=png&name=900x900\" alt=\"image\"></p>\n<h3 id=\"Microtask-and-Macrotask\"><a href=\"#Microtask-and-Macrotask\" class=\"headerlink\" title=\"Microtask and Macrotask\"></a>Microtask and Macrotask</h3><p>Microtask</p>\n","feature":true,"text":"Single-threaded JavaScriptThe JavaScript engine is single threaded. This means it only does one thing at a time in the call stack, like the ...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Single-threaded-JavaScript\"><span class=\"toc-text\">Single-threaded JavaScript</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Sync-and-Aysnc-Events\"><span class=\"toc-text\">Sync and Aysnc Events</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Callback-Queue-and-Call-Stack\"><span class=\"toc-text\">Callback Queue and Call Stack</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Microtask-and-Macrotask\"><span class=\"toc-text\">Microtask and Macrotask</span></a></li></ol>","author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Is setState asynchronous?","uid":"d7e769e271f05380381ff271e09b897f","slug":"async-setState","date":"2023-02-07T20:07:27.000Z","updated":"2023-02-10T22:44:02.788Z","comments":true,"path":"api/articles/async-setState.json","keywords":null,"cover":null,"text":"Ideas of this articleSetState itself is not an asynchronous function, but for some reasons React makes setState act like an async function. ...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"React","slug":"React","count":5,"path":"api/tags/React.json"}],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}