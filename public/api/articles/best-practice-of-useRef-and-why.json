{"title":"Best Practice of using ref in React hooks and Why","uid":"475ab91d3f640698afc7f2e0661d00df","slug":"best-practice-of-useRef-and-why","date":"2023-02-28T20:54:29.000Z","updated":"2023-03-01T00:02:24.319Z","comments":true,"path":"api/articles/best-practice-of-useRef-and-why.json","keywords":null,"cover":[],"content":"<p>The idea for this blog post was sparked by a React quiz on Big Front-End titled “useEffect.”<br>In this article, we’ll be discussing a best practice for using useRef in React, as well as delving into the reasons behind it.</p>\n<h1 id=\"21-useEffect-II\"><a href=\"#21-useEffect-II\" class=\"headerlink\" title=\"21. useEffect() II\"></a><span id='jump-q-21'>21. useEffect() II</span></h1><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState<span class=\"token punctuation\">,</span> useRef<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>show<span class=\"token punctuation\">,</span> setShow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#123;</span>show <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>Child unmount<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShow</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> unmount <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> isMounted <span class=\"token operator\">=</span> <span class=\"token function\">useIsMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span>\n    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useIsMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> isMounted <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    isMounted<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> isMounted<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isMounted<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<details><summary><b>Answer (click me)</b></summary>\n<p>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// mount </span>\n<span class=\"token boolean\">false</span>\n<span class=\"token comment\">// update</span>\n<span class=\"token boolean\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">function Child(&#123; unmount &#125;) &#123;\n  const isMounted &#x3D; useIsMounted() &#x2F;&#x2F; mounting\n  useEffect(() &#x3D;&gt; &#123;\n    console.log(isMounted) &#x2F;&#x2F; mounted\n    Promise.resolve(true).then(() &#x3D;&gt; &#123;\n      console.log(isMounted) &#x2F;&#x2F; update\n    &#125;);\n    unmount(); &#x2F;&#x2F; called when mounted, cause an update\n  &#125;, []);\n\n  return null;\n&#125;;\n\nfunction useIsMounted() &#123;\n  const isMounted &#x3D; useRef(false); &#x2F;&#x2F; mounting\n\n  useEffect(() &#x3D;&gt; &#123;\n    isMounted.current &#x3D; true; &#x2F;&#x2F; mounted\n    return () &#x3D;&gt; isMounted.current &#x3D; false; &#x2F;&#x2F; cleanup function called during next update\n  &#125;, []);\n\n  return isMounted.current; &#x2F;&#x2F; mounting\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n\n<h2 id=\"Why-the-above-code-does-not-work-as-expected\"><a href=\"#Why-the-above-code-does-not-work-as-expected\" class=\"headerlink\" title=\"Why the above code does not work as expected?\"></a>Why the above code does not work as expected?</h2><h3 id=\"Primitive-V-S-Reference-Data-type-in-JavaScript\"><a href=\"#Primitive-V-S-Reference-Data-type-in-JavaScript\" class=\"headerlink\" title=\"Primitive V.S. Reference Data type in JavaScript\"></a>Primitive V.S. Reference Data type in JavaScript</h3><p><img src=\"https://user-images.githubusercontent.com/51183663/221996628-e8465f1a-21ec-4f42-838d-a6b41ad17047.png\" alt=\"image\"><br>When you create a copy of a primitive value, such as a string or a number, it is completely independent of the original value. In other words, changing the copy will not affect the original value in any way.</p>\n<p>However, when you make a copy of reference data, such as an object or an array, it’s like duplicating a key to a house. If you use this copied key to enter the house and make any changes to the interior, these modifications will be reflected for anyone else who also has access to this house.</p>\n<h3 id=\"How-primitive-data-affected-the-useIsMounted-hook\"><a href=\"#How-primitive-data-affected-the-useIsMounted-hook\" class=\"headerlink\" title=\"How primitive data affected the useIsMounted hook?\"></a>How primitive data affected the <code>useIsMounted</code> hook?</h3><p>The value returned by <code>useIsMounted</code> is a snapshot of a primitive value during mounting, and any changes made to the ref after that moment will not affect this initially returned value.</p>\n<p>It’s worth noting that <code>refs</code> does not automatically trigger a re-rendering. As a result, the initial value of isMounted<code>false</code> is called twice.</p>\n<h3 id=\"Closure-in-hooks\"><a href=\"#Closure-in-hooks\" class=\"headerlink\" title=\"Closure in hooks\"></a>Closure in hooks</h3><p>You may also be curious about why <code>console.log(isMounted)</code> called with <code>Promise</code> is still false. To understand this, you need a little background knowledge about the execution context of each effect in React.</p>\n<p>You can think of each render in React as a layer of dreams in the movie “Inception”:<br><em>Data that <code>useEffect</code> can directly access is not infinite in time and space.</em><br>It can only read the execution context that was created, when the <code>useEffect</code> was called.</p>\n<p>So, although each update cycle in React will create a new execution context, some hooks might still refer to its old context.</p>\n<p>This is why the Promise <code>console.log(isMounted)</code> still showed the initial <code>isMounted</code> value, even after <code>unmount()</code> triggered a new update cycle.</p>\n<h2 id=\"How-should-we-modify-the-above-code-to-make-it-work-as-expected\"><a href=\"#How-should-we-modify-the-above-code-to-make-it-work-as-expected\" class=\"headerlink\" title=\"How should we modify the above code to make it work as expected?\"></a>How should we modify the above code to make it work as expected?</h2><p>Before answering this question, let’s do another quiz:<br>What will be printed after runing the below code?</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState<span class=\"token punctuation\">,</span> useRef<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>show<span class=\"token punctuation\">,</span> setShow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>show <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>Child setShow<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>setShow<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> setShow <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> isMounted <span class=\"token operator\">=</span> <span class=\"token function\">useIsMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setShow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'update state'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useIsMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> isMounted <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    isMounted<span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      isMounted<span class=\"token punctuation\">.</span>current <span class=\"token operator\">*=</span> <span class=\"token number\">2</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isMounted<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span> App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<details><summary><b>Answer (click me)</b></summary>\n<p>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// mounted</span>\n<span class=\"token number\">5</span>\n<span class=\"token string\">\"update state\"</span>\n<span class=\"token comment\">// after state updated</span>\n<span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n\n<h3 id=\"Explanation\"><a href=\"#Explanation\" class=\"headerlink\" title=\"Explanation\"></a>Explanation</h3><p>Instead of returning the <code>isMounted.current</code> value, we are now returning the entire <code>isMounted object</code>. This means, although our reference key (the ref object) was created during mounting, we still can refer to an updated version of the <code>isMounted ref</code> in the componentDidMount lifecycle.</p>\n<p>In this case, the logged <code>isMounted.current</code> values are as expected:</p>\n<ul>\n<li><strong>5</strong>: After mounting, the <code>isMounted.current</code> value is 5, which is updated by the <code>useEffect</code> function in the custom hook.</li>\n<li><strong>10</strong>: When <code>setShow</code> is triggered, it triggers a re-render of the App component, which causes the Child component to be unmounted and the cleanup function of <code>useIsMounted</code> to be called.</li>\n</ul>\n<p>(<strong>A tip on useEffect cleanup</strong>: React will call your cleanup function each time before the Effect runs again, before the related component unmount)</p>\n<p>As a result, isMounted.current &#x3D; 10    </p>\n<h2 id=\"A-secret-behind-useRef\"><a href=\"#A-secret-behind-useRef\" class=\"headerlink\" title=\"A secret behind useRef\"></a>A secret behind <code>useRef</code></h2><p>The ref returned by <code>useIsMounted</code> references the same ref object during each rendering (to understand it, try to log <code>isMounted</code> in the above code).</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><div class=\"caption\"><span>jsx</span></div><code class=\"language-typescript\">import React, &#123; useState, useRef, useEffect &#125; from &quot;react&quot;;\nimport ReactDOM from &#39;react-dom&#x2F;client&#39;;\n\nfunction App() &#123;\n  const [show, setShow] &#x3D; useState(true);\n  return &lt;div&gt;&#123;show &amp;&amp; &lt;Child setShow&#x3D;&#123;setShow&#125; &#x2F;&gt;&#125;&lt;&#x2F;div&gt;;\n&#125;\n\nfunction Child(&#123; setShow &#125;) &#123;\n  const isMounted &#x3D; useIsMounted();\n\n  useEffect(() &#x3D;&gt; &#123;\n    console.log(isMounted);\n    setShow(() &#x3D;&gt; &#123;\n      console.log(&#39;update state&#39;);\n      return false;\n    &#125;);\n  &#125;, []);\n\n  return null;\n&#125;\n\nfunction useIsMounted() &#123;\n  const isMounted &#x3D; useRef(2);\n\n  useEffect(() &#x3D;&gt; &#123;\n    isMounted.current +&#x3D; 3;\n    return () &#x3D;&gt; &#123;\n      isMounted.current *&#x3D; 2\n      console.log(isMounted);\n    &#125;;\n  &#125;, []);\n\n  return isMounted;\n&#125;\n\nconst root &#x3D; ReactDOM.createRoot(\n  document.getElementById(&#39;root&#39;)\n);\nroot.render(&lt; App &#x2F;&gt;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Can you take a guess on what will be logged by this code?</p>\n<details><summary><b>Answer (click me)</b></summary>\n<p>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">current</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token string\">'update state'</span> \n<span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">current</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n\n<h3 id=\"Explanation-1\"><a href=\"#Explanation-1\" class=\"headerlink\" title=\"Explanation\"></a>Explanation</h3><p>To understand this, let’s look at the source code of updating refs in React:</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function updateRef&lt;T&gt;(initialValue: T): &#123;current: T&#125; &#123;\n  const hook &#x3D; updateWorkInProgressHook();\n  return hook.memoizedState;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>As you can see, the updated ref object always refers to the initial one.<br>This explains why you see <code>&#123;current: 10&#125;</code> before ‘update state’:<br><em>The ref always points to the same object, and <code>&#123;content:10&#125;</code> is showing its most recent value.</em><br>If you want a ref to reflect data changes more accurately, you can convert the ref object to a string or call ref.current.</p>\n<h2 id=\"Recap-best-practice-of-returning-a-ref-in-custom-hooks\"><a href=\"#Recap-best-practice-of-returning-a-ref-in-custom-hooks\" class=\"headerlink\" title=\"Recap: best practice of returning a ref in custom hooks\"></a>Recap: best practice of returning a ref in custom hooks</h2><ol>\n<li>return the ref object itself</li>\n<li>call ref.current to access the latest value</li>\n</ol>\n","feature":true,"text":"The idea for this blog post was sparked by a React quiz on Big Front-End titled “useEffect.”In this article, we’ll be discussing a best prac...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#21-useEffect-II\"><span class=\"toc-text\">21. useEffect() II</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Why-the-above-code-does-not-work-as-expected\"><span class=\"toc-text\">Why the above code does not work as expected?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Primitive-V-S-Reference-Data-type-in-JavaScript\"><span class=\"toc-text\">Primitive V.S. Reference Data type in JavaScript</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#How-primitive-data-affected-the-useIsMounted-hook\"><span class=\"toc-text\">How primitive data affected the useIsMounted hook?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Closure-in-hooks\"><span class=\"toc-text\">Closure in hooks</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#How-should-we-modify-the-above-code-to-make-it-work-as-expected\"><span class=\"toc-text\">How should we modify the above code to make it work as expected?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Explanation\"><span class=\"toc-text\">Explanation</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#A-secret-behind-useRef\"><span class=\"toc-text\">A secret behind useRef</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Explanation-1\"><span class=\"toc-text\">Explanation</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Recap-best-practice-of-returning-a-ref-in-custom-hooks\"><span class=\"toc-text\">Recap: best practice of returning a ref in custom hooks</span></a></li></ol></li></ol>","author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Unraveling the Mystery Behind Closure with Stories","uid":"00e3725bba8ba6160a12eac273cbe88b","slug":"closure_stories","date":"2023-03-03T01:30:37.000Z","updated":"2023-03-03T19:19:55.105Z","comments":true,"path":"api/articles/closure_stories.json","keywords":null,"cover":[],"text":"Before I explain the concept of closure, let me share a story with you. The word “closure” evokes a tender memory of my visit to Manchester ...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Single-threaded JavaScript","uid":"e3fb0e6e7c44f4a9d38a4589b5569d51","slug":"single-threaded-javascript","date":"2023-02-08T19:33:14.000Z","updated":"2023-03-01T17:36:46.956Z","comments":true,"path":"api/articles/single-threaded-javascript.json","keywords":null,"cover":[],"text":"This article will illustrate why we have synchronous and asynchronous tasks. Synchronous and Asynchronous TasksIn JavaScript, we have synchr...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"}],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}