{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.0cb5c513.jpg","path":"static/img/default-cover.0cb5c513.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.6be4f6ad.js","path":"static/js/404.6be4f6ad.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.cce5f7d2.js","path":"static/js/archives.cce5f7d2.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.22fb1e0f.js","path":"static/js/about.22fb1e0f.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.9555ebf4.js","path":"static/js/categories.9555ebf4.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.f075ccdf.js","path":"static/js/chunk-libs.f075ccdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a7f9c2ed.js","path":"static/js/page.a7f9c2ed.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.5c1774b3.js","path":"static/js/post.5c1774b3.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.bb7c7b68.js","path":"static/js/result.bb7c7b68.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.ef0a903a.js","path":"static/js/tags.ef0a903a.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.0adfb9ab.css","path":"static/css/404.0adfb9ab.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.146e7a5c.css","path":"static/css/about.146e7a5c.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.a51fdfda.css","path":"static/css/archives.a51fdfda.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.0efa1954.css","path":"static/css/categories.0efa1954.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.f7bc5e05.css","path":"static/css/page.f7bc5e05.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.0efa1954.css","path":"static/css/result.0efa1954.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.0efa1954.css","path":"static/css/tags.0efa1954.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.7978b119.js","path":"static/js/app.7978b119.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.81fe2707.css","path":"static/css/app.81fe2707.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/locality.md","hash":"c2323863fd0be1a0e9f15546c828d67678eda4ea","modified":1679696736401},{"_id":"source/_posts/async-setState.md","hash":"e037dcda7d9fadd896bcb6fc2edc237add719aee","modified":1677874342744},{"_id":"source/_posts/dsa_for_web_trie_router.md","hash":"1161f86440a4704a96cd0555270da6f260022760","modified":1675912505303},{"_id":"source/_posts/react-fiber-tree.md","hash":"83ac6631c1ab4127df18d0790708a8ec234af0c4","modified":1679696551343},{"_id":"source/_posts/simple-ideas-about-React-Concurrent-mode.md","hash":"74e7622df30d835a175a450f51a2f160f010bbcc","modified":1677869424285},{"_id":"source/_posts/react-render-phase.md","hash":"6ab92611c6e4ad0b4e8532f7a19355e24ba4153d","modified":1679696525896},{"_id":"source/_posts/single-threaded-javascript.md","hash":"74dd608aa42b61f5d4772533cbece80bc5b0d2ed","modified":1677692206956},{"_id":"source/_posts/time-slicing-react.md","hash":"1b654a56570734d644ccfbe30e06f345eb34ba97","modified":1679696519736},{"_id":"node_modules/hexo-theme-aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":1675912502895},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG.md","hash":"e68f3af8af17d326a48e1b317e01d7429193217e","modified":1675912502896},{"_id":"node_modules/hexo-theme-aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":1675912502896},{"_id":"node_modules/hexo-theme-aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":1675893270212},{"_id":"node_modules/hexo-theme-aurora/README.md","hash":"c50f58b08b75780990c18ab85761e3e24aac0d90","modified":1675912502896},{"_id":"node_modules/hexo-theme-aurora/_config.yml","hash":"e6b2335cb393444b8a1fc1ad65331f4a30bc8915","modified":1675912502897},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG_CN.md","hash":"5d13c251e8b77fd86870da50f3be98f8822edc66","modified":1675912502896},{"_id":"node_modules/hexo-theme-aurora/package.json","hash":"1b312a6a2de107ba9dc952614f1078c78664a4e4","modified":1675912502897},{"_id":"node_modules/hexo-theme-aurora/scripts/index.js","hash":"2a3c62a860581ee6813ca4bcaa7c952f614e818c","modified":1675893270217},{"_id":"node_modules/hexo-theme-aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":1675893270215},{"_id":"node_modules/hexo-theme-aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":1675893270215},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/layout/index.ejs","hash":"e08bd3831afd4b54d63d064417378857e42b522a","modified":1676068860649},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":1675893270218},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/index.js","hash":"dfbb0fdbf990bd67684ed891a4aaa1fd8dcd23f2","modified":1675898548957},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/filters/index.js","hash":"5eacff9446dd6c9a7eb0a0c84be9187055440454","modified":1675903576586},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/post.js","hash":"023baeb8d0fd3687c97004f2c73bad0dd207c0f7","modified":1675893270218},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":1675893270219},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":1675893270218},{"_id":"node_modules/hexo-theme-aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":1675912502897},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":1675893270219},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":1675893270219},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/mapper.js","hash":"266a87499af02b7d25a14e88c2c632d2c492b6c3","modified":1675893270220},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":1675893270220},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":1675893270221},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":1675893270219},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/utils.js","hash":"93ff75f0e35a1dc40d5406cc097f5988dd820600","modified":1675893270221},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":1675893270220},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/injector/index.js","hash":"7ca562ea3af3068ee925b5a8afdce0eaa1e15e64","modified":1675893270221},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.0cb5c513.jpg","hash":"bb898310c66d16bf83c919dc297ea4bb019424fb","modified":1675917824431},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.6be4f6ad.js","hash":"5aba99e4a9ca2ac53b23748a432c9fac2c65cb29","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.cce5f7d2.js","hash":"3a125bda03f482c3c0eaa75887364be4b1fab72a","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.22fb1e0f.js","hash":"77c8411564558544ae3d3246e2d14ee34dedf78a","modified":1675917824433},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.9555ebf4.js","hash":"194b26fb6ccaae0fc4f5533617356370036f6601","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.5c1774b3.js","hash":"82a354b7aff0ae9a4bbf8626c9e5157ffc2a103a","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a7f9c2ed.js","hash":"42a3d27f29f7ed33935c972f46ef2fe66be0e1b1","modified":1675917824435},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.bb7c7b68.js","hash":"5fb1bafd40bb515f7c4d15399e6fef4af58a377a","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.0adfb9ab.css","hash":"c6893036083fde17c7aa5c7b616cf2d9b51a0433","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.ef0a903a.js","hash":"7c0355e3f0f469cfee19e5001fcaccf6c229d8a1","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.a51fdfda.css","hash":"24c8cb385ba252456d2334a303a1a0140f0955c2","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.146e7a5c.css","hash":"acdaf33028c3c5e9a5e63cece60e4880e5cb3595","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1675917824435},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.0efa1954.css","hash":"42637609aeb2b772a22723b82e622aae6e57ffd5","modified":1675917824435},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1675917824435},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.f7bc5e05.css","hash":"631109598caa6253c1bef61cfce7a6dfd1407ec7","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.0efa1954.css","hash":"42637609aeb2b772a22723b82e622aae6e57ffd5","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.0efa1954.css","hash":"42637609aeb2b772a22723b82e622aae6e57ffd5","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.ab43a208.css","hash":"d617bdd000c9a3d8f1466048e66be43d1c30ba55","modified":1675917824433},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.9af737dd.js","hash":"c15762a8f15256ed01a3ac7413fc0c310ceed1fc","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.f075ccdf.js","hash":"b788f426d9cef5ecaa3f9eddba9d09c06ac3f6d0","modified":1675917824434},{"_id":"public/api/posts/1.json","hash":"836248b30c01798520aebe299d32ee5621c60609","modified":1679966357096},{"_id":"public/api/articles/simple-ideas-about-React-Concurrent-mode.json","hash":"fc0a67a5dd3197bc78406dae59b70f6a05dcb010","modified":1679696556420},{"_id":"public/api/articles/react-render-phase.json","hash":"48d538e5e0a9c136f8154b54fd26d03b96986835","modified":1679696556420},{"_id":"public/api/articles/dsa_for_web_trie_router.json","hash":"cbc6aaf94438db9e17dc46e1bc999e2d88aa6bac","modified":1679696556420},{"_id":"public/api/articles/async-setState.json","hash":"d51c7de9e1612ec26960b2a7e621ccc17e773626","modified":1679696848462},{"_id":"public/api/articles/react-fiber-tree.json","hash":"744ef1545136d121f14b835ef9068cfd6f48a89c","modified":1679696748789},{"_id":"public/api/articles/single-threaded-javascript.json","hash":"d1a0848ad82ee9d4a43b13785e5f485b94673cbc","modified":1679889311198},{"_id":"public/api/articles/locality.json","hash":"f7ca85d3ed1ed0d381f2e826855d80cb1b84eb9b","modified":1679696748789},{"_id":"public/api/articles/time-slicing-react.json","hash":"56b061de3555066ba3b87d54b18070bfc6c7b4c4","modified":1679696748789},{"_id":"public/api/features.json","hash":"d633c8d5ce71b9f67200255cf336155657d0dd8a","modified":1679966357096},{"_id":"public/api/authors/flaming-cl.json","hash":"76c650b300fa207190b3eb291fe4ead4e5054379","modified":1679966357096},{"_id":"public/api/site.json","hash":"fa54e0069f11f31e2399fb597502ec7e89842b92","modified":1679966357096},{"_id":"public/api/categories.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1675918731910},{"_id":"public/api/tags.json","hash":"d2597f9e39f636a47a19ce4c33e7f21fd1f7ca34","modified":1679966357096},{"_id":"public/api/tags/React.json","hash":"54debfe760907a43c0d8239614c4a05aa146fdcc","modified":1679966070589},{"_id":"public/api/tags/DSA-for-web-dev.json","hash":"f527f7a128685ae9143c6636ed6b026485aaff66","modified":1675918731910},{"_id":"public/api/tags/JavaScript.json","hash":"eca83e97ead0d8fdd6240c08fb6d4078d2d4a997","modified":1679966357096},{"_id":"public/api/statistic.json","hash":"ed6e89f7dc135b7be747a3b24f65fca2dfd3de02","modified":1679966357096},{"_id":"public/api/search.json","hash":"1e7722f54780aa28d37d3dd339a10d36299cb19b","modified":1679966357096},{"_id":"public/post/single-threaded-javascript","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/post/async-setState","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/post/simple-ideas-about-React-Concurrent-mode","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/post/react-render-phase","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/post/dsa_for_web_trie_router","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/post/react-fiber-tree","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/post/locality","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/post/time-slicing-react","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/index.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/tags/index.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/tags/search/index.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/archives/index.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1675918731910},{"_id":"public/static/img/default-cover.0cb5c513.jpg","hash":"bb898310c66d16bf83c919dc297ea4bb019424fb","modified":1675918731910},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1675918731910},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1675918731910},{"_id":"public/static/js/404.6be4f6ad.js","hash":"5aba99e4a9ca2ac53b23748a432c9fac2c65cb29","modified":1675918731910},{"_id":"public/static/js/about.22fb1e0f.js","hash":"77c8411564558544ae3d3246e2d14ee34dedf78a","modified":1675918731910},{"_id":"public/static/js/categories.9555ebf4.js","hash":"194b26fb6ccaae0fc4f5533617356370036f6601","modified":1675918731910},{"_id":"public/static/js/archives.cce5f7d2.js","hash":"3a125bda03f482c3c0eaa75887364be4b1fab72a","modified":1675918731910},{"_id":"public/static/js/page.a7f9c2ed.js","hash":"42a3d27f29f7ed33935c972f46ef2fe66be0e1b1","modified":1675918731910},{"_id":"public/static/js/post.5c1774b3.js","hash":"82a354b7aff0ae9a4bbf8626c9e5157ffc2a103a","modified":1675918731910},{"_id":"public/static/js/tags.ef0a903a.js","hash":"7c0355e3f0f469cfee19e5001fcaccf6c229d8a1","modified":1675918731910},{"_id":"public/static/js/result.bb7c7b68.js","hash":"5fb1bafd40bb515f7c4d15399e6fef4af58a377a","modified":1675918731910},{"_id":"public/static/css/archives.a51fdfda.css","hash":"24c8cb385ba252456d2334a303a1a0140f0955c2","modified":1675918731910},{"_id":"public/static/css/about.146e7a5c.css","hash":"acdaf33028c3c5e9a5e63cece60e4880e5cb3595","modified":1675918731910},{"_id":"public/static/css/categories.0efa1954.css","hash":"42637609aeb2b772a22723b82e622aae6e57ffd5","modified":1675918731910},{"_id":"public/static/css/404.0adfb9ab.css","hash":"c6893036083fde17c7aa5c7b616cf2d9b51a0433","modified":1675918731910},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1675918731910},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1675918731910},{"_id":"public/static/css/result.0efa1954.css","hash":"42637609aeb2b772a22723b82e622aae6e57ffd5","modified":1675918731910},{"_id":"public/static/css/tags.0efa1954.css","hash":"42637609aeb2b772a22723b82e622aae6e57ffd5","modified":1675918731910},{"_id":"public/static/css/page.f7bc5e05.css","hash":"631109598caa6253c1bef61cfce7a6dfd1407ec7","modified":1675918731910},{"_id":"public/static/js/chunk-libs.f075ccdf.js","hash":"b788f426d9cef5ecaa3f9eddba9d09c06ac3f6d0","modified":1675918731910},{"_id":"public/static/css/app.ab43a208.css","hash":"d617bdd000c9a3d8f1466048e66be43d1c30ba55","modified":1675918731910},{"_id":"public/static/js/app.9af737dd.js","hash":"c15762a8f15256ed01a3ac7413fc0c310ceed1fc","modified":1675918731910},{"_id":"source/about/index.md","hash":"6c44fdef696e33c9c5fa77480dc2ed5e65e242c6","modified":1675919380948},{"_id":"public/api/pages/about/index.json","hash":"54b7e1b0f3bf30c55a7e1c487ab469f3b1eaad37","modified":1675919714718},{"_id":"public/page/about/index.html","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918800525},{"_id":"public/about/index.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/single-threaded-javascript.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/async-setState.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/simple-ideas-about-React-Concurrent-mode.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/react-render-phase.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/dsa_for_web_trie_router.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/react-fiber-tree.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/locality.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/time-slicing-react.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.81fe2707.css","hash":"e1f928ef9993f3bbc21b2af42ba52baad0ad6106","modified":1676068860647},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.7978b119.js","hash":"a2f743de50ad834e5b1698c55182b0d9923e67d6","modified":1676068860646},{"_id":"public/static/css/app.81fe2707.css","hash":"e1f928ef9993f3bbc21b2af42ba52baad0ad6106","modified":1676069074756},{"_id":"public/static/js/app.7978b119.js","hash":"a2f743de50ad834e5b1698c55182b0d9923e67d6","modified":1676069074756},{"_id":"source/_posts/best-practice-of-useRef-and-why.md","hash":"584ef67047152c741b96a9e56b20ecb03eea8f98","modified":1679888502362},{"_id":"public/api/articles/best-practice-of-useRef-and-why.json","hash":"b2d055f610b2ae65ee38251558789be635bb3355","modified":1679966357096},{"_id":"public/post/best-practice-of-useRef-and-why.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1677621905017},{"_id":"source/_posts/closure_inception.md","hash":"58e1c61533dc2c7f652f941da255b20a50a57108","modified":1677869277200},{"_id":"public/api/articles/closure_inception.json","hash":"c9e723c4235d7297f262a8045bee0ee14d1f5ce9","modified":1677869432781},{"_id":"public/post/closure_inception.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1677869432781},{"_id":"source/_posts/closure_stories.md","hash":"76fc1342e0ed0691c57b133537464c85a0655925","modified":1679888553201},{"_id":"public/api/articles/closure_stories.json","hash":"d2f38533e9bd760217a4a29a1c186cf57c007d0e","modified":1679966357096},{"_id":"public/post/closure_stories.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1677869467611},{"_id":"source/_posts/Inception-md.md","hash":"213d266b2a2d482fd552180c514d91712edb07c8","modified":1679966066865},{"_id":"public/api/articles/Inception-md.json","hash":"2b3e8fd7c22881064ae1eea5ed0ed05f89db6293","modified":1679966357096},{"_id":"public/post/Inception-md.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1679199285521},{"_id":"public/page/2/index.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1679199285521},{"_id":"public/api/tags/JavaScript-Closure.json","hash":"faae334f3394e75a203f9e8cfe083539c0fc8b37","modified":1679696748789},{"_id":"public/api/tags/Memory.json","hash":"81f24d9d42914d6c19691ee55c329788b89f1ba0","modified":1679696748789},{"_id":"source/_posts/recursion-iteration-and-function-abstraction-md.md","hash":"6132cd2bb6b2c04b6b70ebfeea2bacd7416f3ea5","modified":1679926101291},{"_id":"public/api/articles/recursion-iteration-and-function-abstraction-md.json","hash":"f8eb65953c098e9e269490c41a1321e0de0a674c","modified":1679966357096},{"_id":"public/api/tags/Functional-Programming.json","hash":"6dc24c76e89457452b038493466046e17145825a","modified":1679966357096},{"_id":"public/post/recursion-iteration-and-function-abstraction-md.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1679887883377},{"_id":"source/_posts/SICP-2-data-abstraction.md","hash":"2b420c25d089e76541cc929a7e81c22554198742","modified":1679965509811},{"_id":"public/api/posts/2.json","hash":"b75a51507a4d420d71d75ed91cca6e2fd96cdc08","modified":1679966070589},{"_id":"public/api/articles/SICP-2-data-abstraction.json","hash":"20462e493f7bf3c0e64bf5d4eee2bbc0a9015789","modified":1679966070589},{"_id":"public/post/SICP-2-data-abstraction.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1679966070589}],"Category":[],"Data":[],"Page":[{"title":"About","type":"about","_content":"\nDeveloper in 🇨🇦, specialized in React.js web dev.\n\n\n\n[GitHub 🐱](https://github.com/flaming-cl)  |  [Twitter 🐦](https://twitter.com/flaming_cl)\n\n❤️ \n<section style=\"\n    display: grid;\n    width: 164px;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    background: linear-gradient(192deg, rgb(255 255 255), rgb(140, 185, 255) 41.07%, rgb(255, 109, 140) 76.05%);\n    border-radius: 23px;\n    padding: 2px 12px;\">\n    <div>💻</div> \n    <div>🎮</div>\n    <img src=\"https://user-images.githubusercontent.com/51183663/217701653-5f6a9bcc-a0a4-4e35-9d6d-f3c39623b182.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n    <img src=\"https://user-images.githubusercontent.com/51183663/217700781-2377d5e4-9e33-4712-b1da-4de5472e798b.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n</section>\n","source":"about/index.md","raw":"---\ntitle: About\ntype: about\n---\n\nDeveloper in 🇨🇦, specialized in React.js web dev.\n\n\n\n[GitHub 🐱](https://github.com/flaming-cl)  |  [Twitter 🐦](https://twitter.com/flaming_cl)\n\n❤️ \n<section style=\"\n    display: grid;\n    width: 164px;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    background: linear-gradient(192deg, rgb(255 255 255), rgb(140, 185, 255) 41.07%, rgb(255, 109, 140) 76.05%);\n    border-radius: 23px;\n    padding: 2px 12px;\">\n    <div>💻</div> \n    <div>🎮</div>\n    <img src=\"https://user-images.githubusercontent.com/51183663/217701653-5f6a9bcc-a0a4-4e35-9d6d-f3c39623b182.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n    <img src=\"https://user-images.githubusercontent.com/51183663/217700781-2377d5e4-9e33-4712-b1da-4de5472e798b.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n</section>\n","date":"2023-02-09T05:09:40.948Z","updated":"2023-02-09T05:09:40.948Z","path":"about/index.html","_id":"cldwms41h00003hpndzrz3pmp","comments":1,"layout":"page","content":"<p>Developer in 🇨🇦, specialized in React.js web dev.</p>\n<p><a href=\"https://github.com/flaming-cl\">GitHub 🐱</a>  |  <a href=\"https://twitter.com/flaming_cl\">Twitter 🐦</a></p>\n<p>❤️ </p>\n<section style=\"\n    display: grid;\n    width: 164px;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    background: linear-gradient(192deg, rgb(255 255 255), rgb(140, 185, 255) 41.07%, rgb(255, 109, 140) 76.05%);\n    border-radius: 23px;\n    padding: 2px 12px;\">\n    <div>💻</div> \n    <div>🎮</div>\n    <img src=\"https://user-images.githubusercontent.com/51183663/217701653-5f6a9bcc-a0a4-4e35-9d6d-f3c39623b182.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n    <img src=\"https://user-images.githubusercontent.com/51183663/217700781-2377d5e4-9e33-4712-b1da-4de5472e798b.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n</section>\n","site":{"data":{}},"excerpt":"","more":"<p>Developer in 🇨🇦, specialized in React.js web dev.</p>\n<p><a href=\"https://github.com/flaming-cl\">GitHub 🐱</a>  |  <a href=\"https://twitter.com/flaming_cl\">Twitter 🐦</a></p>\n<p>❤️ </p>\n<section style=\"\n    display: grid;\n    width: 164px;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    background: linear-gradient(192deg, rgb(255 255 255), rgb(140, 185, 255) 41.07%, rgb(255, 109, 140) 76.05%);\n    border-radius: 23px;\n    padding: 2px 12px;\">\n    <div>💻</div> \n    <div>🎮</div>\n    <img src=\"https://user-images.githubusercontent.com/51183663/217701653-5f6a9bcc-a0a4-4e35-9d6d-f3c39623b182.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n    <img src=\"https://user-images.githubusercontent.com/51183663/217700781-2377d5e4-9e33-4712-b1da-4de5472e798b.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n</section>\n"}],"Post":[{"title":"Is setState asynchronous?","date":"2023-02-07T20:07:27.000Z","_content":"Whether setState is synchronous or asynchronous has become a cliché these days.   \n\nHowever, as React is constantly evolving, a frontend programmer's answer to this question can still demonstrate some deep understanding of the framework.\n\nToday, let's gain a deeper understanding of some implementation mechanisms behind React.\n\n## Ideas of this article \nAlthough `setState()` is not inherently asynchronous, React has designed it to behave like an asynchronous function for certain reasons. This article will:\n\n- Summarize why `setState()` behaves like an asynchronous function.\n- Explore the reasons why synchronous `setState()` can behave asynchronously.\n- Clarify whether `setState()` behaves like a microtask or a macrotask.\n\n## Why setState() act like an async function\n(This section is a recap on Dan Abramov's response to the question posed in [RFClarification: why is setState asynchronous?](https://github.com/facebook/react/issues/11527#issuecomment-360199710))\n\nIn daily life, tasks that require immediate attention are important to us, while tasks we procrastinate on are often less critical. Similarly, not every state update triggered by `setState()` is of the highest priority.\n\nThis is where the first reason of asynchronously `setState` comes into play: priority scheduling.\n> React could assign different priorities to setState() calls depending on where they’re coming from: an event handler, a network response, an animation, etc.\n\n\n### Reason 1: ensures concurrent features\n**Example**\nImagine you're editing a post on social media while getting a dozen of new notification messages.\nIf there are 100+ or even 500+ new messages, there may be no response to your keyboard input, as the browser is busy updating new notifications.\n\n**For the above situation, what can you do to ensure smooth text input for users?**\nA good practice is: giving low priority to message updates, as they are less important in this case. And when a message update encounters a high priority event, we will ask the former one to yield the main thread.\n\n**Why asynchronous `setState()` benefits prioritized rendering (concurrent features) in React?**\nThis is because async-like `setState()` makes concurrent features possible, by delaying execution of low priority task and making room for high priority ones.\n\n### Reason 2: avoid dirty data\nBesides performance optimization, avoiding dirty data is another reason not to run `setState()` in a synchronous way. To understand this, we need to talk about the core value of React first.\n\n**React In Theory**\n\nFor React, its most fundamental principle evolved from this formula:\n> UI = f(state)\n\nThe concept behind this idea is straightforward: if you have the same input states for your application, it should always produce the same user interface (UI).\n\nHowever, running `setState()` synchronously may violate React's pure-function-like update processes: **It is hard to ensure consistency on synchronously updated states and their props.**  \n\nWhen a sync `setState()` is fired, its related props have to wait for reconciliation or flushSync to happen for corresponding updates. Such inconsistency can lead to unpredictable state updates in a React App.\n\nTo feel such consistency, you can try this example:\n```jsx\nfunction App() {\n  let [count, updateCount] = useState(0);\n  console.log('render cycle', count);\n\n  const clickMe = () => {\n    updateCount(count + 1);\n    console.log('click me:', count);\n  }\n\n  const clickFox = () => {\n    count += 1;\n    console.log('click fox:', count);\n  }\n\n  return (\n  <>\n    <button onClick={clickMe}>click me</button>\n    <button onClick={clickFox}>click fox</button>\n    <Child count={count} updateCount={updateCount}/>\n  </>\n  )\n}\n\nfunction Child({ count, updateCount }) {\n  const updateOnChild = () => updateCount(count + 1);\n  return (<button onClick={updateOnChild}>{count}</button>)\n}\n```\nIn the above example, `clickMe` is a function that calls `updateCount` asynchronously and will trigger a re-rendering of this App. Such characteristics ensure consistency between the `count` state, and its corresponding `props` passed to the Child component.\n\nIf you try `clickFox`, every time when you click on `click fox`, a new value of count is immediately logged to the console. However, while \"click fox\" immediately updates the `count` state, the prop `count` still refers to the old value resulted from the last reconciliation.\n\nSuch inconsistency in states and props can cause unpredictable behavior in an App.\n\nPlease note: directly updating a state by `\"=\"` will not cause any re-rendering in a React App, unless we update the state with setState or useState hooks. \nHere we only use the `click fox` example to mock the situation that a state changes inconsistently with related props, and its potential issues.\n\n## What makes sync setState() act asynchronously\nEvery time `renderRoot` or `setState` is triggered, React doesn't immediately start rendering in a React App. Instead, React will first schedule the updates, assigning different priority levels to each task and combining multiple tasks into one.\n\nBecause of this, synchronous `setState()` calls are collected in an `updateQueue`.  \nThe way `updateQueue` implemented gives `setState()` asynchronous behaviors: \n- `normal setState()` calls will be handled within a micro task queue\n- `concurrent featured setState()` calls are handled in a macro task queue\n\n**You might be wondering how to prove that `setState()` itself is synchronous?**\nA classic example is: Prior to React 18, if you called `setState()` within `setTimeout()`, you would notice that it executes immediately, as setState called in setTimeout or native events are not collected in the `updateQueue` of React. \n\n(In React 18, this issue has been addressed, and `setState()` calls made within `setTimeout()` are now asynchronous as well)\n\n## Microtask or Macrotask\nWhen updating, if React encounters a high-priority task, it will not execute the next low-priority task and schedule the highest-priority task to be executed.\n\n**How does React implement this (let high priority tasks cut in line)?**\nWhen it comes to the JavaScript event loop, a common method of interrupting is to let the newly added microtask interrupt the execution of existing macro tasks.\nWe also know that React update functions (setState) are often processed as microtasks.\n\n**Take the concurrent feature as an example:**\nTo interrupt low-priority tasks, we mark the tasks in a concurrent feature API as low-priority and put them in a macro task queue.\nIn this way, when higher-priority microtask updates appear, they can jump ahead of the current low-priority macro tasks and be processed first.\n\n## Reference\n1. [RFClarification: why is setState asynchronous?](https://github.com/facebook/react/issues/11527#issuecomment-360199710)\n2. [Automatic batching for fewer renders in React 18](https://github.com/reactwg/react-18/discussions/21)\n","source":"_posts/async-setState.md","raw":"---\ntitle: Is setState asynchronous?\ndate: 2023-02-07 15:07:27\ntags: React\n---\nWhether setState is synchronous or asynchronous has become a cliché these days.   \n\nHowever, as React is constantly evolving, a frontend programmer's answer to this question can still demonstrate some deep understanding of the framework.\n\nToday, let's gain a deeper understanding of some implementation mechanisms behind React.\n\n## Ideas of this article \nAlthough `setState()` is not inherently asynchronous, React has designed it to behave like an asynchronous function for certain reasons. This article will:\n\n- Summarize why `setState()` behaves like an asynchronous function.\n- Explore the reasons why synchronous `setState()` can behave asynchronously.\n- Clarify whether `setState()` behaves like a microtask or a macrotask.\n\n## Why setState() act like an async function\n(This section is a recap on Dan Abramov's response to the question posed in [RFClarification: why is setState asynchronous?](https://github.com/facebook/react/issues/11527#issuecomment-360199710))\n\nIn daily life, tasks that require immediate attention are important to us, while tasks we procrastinate on are often less critical. Similarly, not every state update triggered by `setState()` is of the highest priority.\n\nThis is where the first reason of asynchronously `setState` comes into play: priority scheduling.\n> React could assign different priorities to setState() calls depending on where they’re coming from: an event handler, a network response, an animation, etc.\n\n\n### Reason 1: ensures concurrent features\n**Example**\nImagine you're editing a post on social media while getting a dozen of new notification messages.\nIf there are 100+ or even 500+ new messages, there may be no response to your keyboard input, as the browser is busy updating new notifications.\n\n**For the above situation, what can you do to ensure smooth text input for users?**\nA good practice is: giving low priority to message updates, as they are less important in this case. And when a message update encounters a high priority event, we will ask the former one to yield the main thread.\n\n**Why asynchronous `setState()` benefits prioritized rendering (concurrent features) in React?**\nThis is because async-like `setState()` makes concurrent features possible, by delaying execution of low priority task and making room for high priority ones.\n\n### Reason 2: avoid dirty data\nBesides performance optimization, avoiding dirty data is another reason not to run `setState()` in a synchronous way. To understand this, we need to talk about the core value of React first.\n\n**React In Theory**\n\nFor React, its most fundamental principle evolved from this formula:\n> UI = f(state)\n\nThe concept behind this idea is straightforward: if you have the same input states for your application, it should always produce the same user interface (UI).\n\nHowever, running `setState()` synchronously may violate React's pure-function-like update processes: **It is hard to ensure consistency on synchronously updated states and their props.**  \n\nWhen a sync `setState()` is fired, its related props have to wait for reconciliation or flushSync to happen for corresponding updates. Such inconsistency can lead to unpredictable state updates in a React App.\n\nTo feel such consistency, you can try this example:\n```jsx\nfunction App() {\n  let [count, updateCount] = useState(0);\n  console.log('render cycle', count);\n\n  const clickMe = () => {\n    updateCount(count + 1);\n    console.log('click me:', count);\n  }\n\n  const clickFox = () => {\n    count += 1;\n    console.log('click fox:', count);\n  }\n\n  return (\n  <>\n    <button onClick={clickMe}>click me</button>\n    <button onClick={clickFox}>click fox</button>\n    <Child count={count} updateCount={updateCount}/>\n  </>\n  )\n}\n\nfunction Child({ count, updateCount }) {\n  const updateOnChild = () => updateCount(count + 1);\n  return (<button onClick={updateOnChild}>{count}</button>)\n}\n```\nIn the above example, `clickMe` is a function that calls `updateCount` asynchronously and will trigger a re-rendering of this App. Such characteristics ensure consistency between the `count` state, and its corresponding `props` passed to the Child component.\n\nIf you try `clickFox`, every time when you click on `click fox`, a new value of count is immediately logged to the console. However, while \"click fox\" immediately updates the `count` state, the prop `count` still refers to the old value resulted from the last reconciliation.\n\nSuch inconsistency in states and props can cause unpredictable behavior in an App.\n\nPlease note: directly updating a state by `\"=\"` will not cause any re-rendering in a React App, unless we update the state with setState or useState hooks. \nHere we only use the `click fox` example to mock the situation that a state changes inconsistently with related props, and its potential issues.\n\n## What makes sync setState() act asynchronously\nEvery time `renderRoot` or `setState` is triggered, React doesn't immediately start rendering in a React App. Instead, React will first schedule the updates, assigning different priority levels to each task and combining multiple tasks into one.\n\nBecause of this, synchronous `setState()` calls are collected in an `updateQueue`.  \nThe way `updateQueue` implemented gives `setState()` asynchronous behaviors: \n- `normal setState()` calls will be handled within a micro task queue\n- `concurrent featured setState()` calls are handled in a macro task queue\n\n**You might be wondering how to prove that `setState()` itself is synchronous?**\nA classic example is: Prior to React 18, if you called `setState()` within `setTimeout()`, you would notice that it executes immediately, as setState called in setTimeout or native events are not collected in the `updateQueue` of React. \n\n(In React 18, this issue has been addressed, and `setState()` calls made within `setTimeout()` are now asynchronous as well)\n\n## Microtask or Macrotask\nWhen updating, if React encounters a high-priority task, it will not execute the next low-priority task and schedule the highest-priority task to be executed.\n\n**How does React implement this (let high priority tasks cut in line)?**\nWhen it comes to the JavaScript event loop, a common method of interrupting is to let the newly added microtask interrupt the execution of existing macro tasks.\nWe also know that React update functions (setState) are often processed as microtasks.\n\n**Take the concurrent feature as an example:**\nTo interrupt low-priority tasks, we mark the tasks in a concurrent feature API as low-priority and put them in a macro task queue.\nIn this way, when higher-priority microtask updates appear, they can jump ahead of the current low-priority macro tasks and be processed first.\n\n## Reference\n1. [RFClarification: why is setState asynchronous?](https://github.com/facebook/react/issues/11527#issuecomment-360199710)\n2. [Automatic batching for fewer renders in React 18](https://github.com/reactwg/react-18/discussions/21)\n","slug":"async-setState","published":1,"updated":"2023-03-03T20:12:22.744Z","_id":"cldwmqq0800002epn1bvn2n15","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Whether setState is synchronous or asynchronous has become a cliché these days.   </p>\n<p>However, as React is constantly evolving, a frontend programmer’s answer to this question can still demonstrate some deep understanding of the framework.</p>\n<p>Today, let’s gain a deeper understanding of some implementation mechanisms behind React.</p>\n<h2 id=\"Ideas-of-this-article\"><a href=\"#Ideas-of-this-article\" class=\"headerlink\" title=\"Ideas of this article\"></a>Ideas of this article</h2><p>Although <code>setState()</code> is not inherently asynchronous, React has designed it to behave like an asynchronous function for certain reasons. This article will:</p>\n<ul>\n<li>Summarize why <code>setState()</code> behaves like an asynchronous function.</li>\n<li>Explore the reasons why synchronous <code>setState()</code> can behave asynchronously.</li>\n<li>Clarify whether <code>setState()</code> behaves like a microtask or a macrotask.</li>\n</ul>\n<h2 id=\"Why-setState-act-like-an-async-function\"><a href=\"#Why-setState-act-like-an-async-function\" class=\"headerlink\" title=\"Why setState() act like an async function\"></a>Why setState() act like an async function</h2><p>(This section is a recap on Dan Abramov’s response to the question posed in <a href=\"https://github.com/facebook/react/issues/11527#issuecomment-360199710\">RFClarification: why is setState asynchronous?</a>)</p>\n<p>In daily life, tasks that require immediate attention are important to us, while tasks we procrastinate on are often less critical. Similarly, not every state update triggered by <code>setState()</code> is of the highest priority.</p>\n<p>This is where the first reason of asynchronously <code>setState</code> comes into play: priority scheduling.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>React could assign different priorities to setState() calls depending on where they’re coming from: an event handler, a network response, an animation, etc.</p></blockquote>\n<h3 id=\"Reason-1-ensures-concurrent-features\"><a href=\"#Reason-1-ensures-concurrent-features\" class=\"headerlink\" title=\"Reason 1: ensures concurrent features\"></a>Reason 1: ensures concurrent features</h3><p><strong>Example</strong><br>Imagine you’re editing a post on social media while getting a dozen of new notification messages.<br>If there are 100+ or even 500+ new messages, there may be no response to your keyboard input, as the browser is busy updating new notifications.</p>\n<p><strong>For the above situation, what can you do to ensure smooth text input for users?</strong><br>A good practice is: giving low priority to message updates, as they are less important in this case. And when a message update encounters a high priority event, we will ask the former one to yield the main thread.</p>\n<p><strong>Why asynchronous <code>setState()</code> benefits prioritized rendering (concurrent features) in React?</strong><br>This is because async-like <code>setState()</code> makes concurrent features possible, by delaying execution of low priority task and making room for high priority ones.</p>\n<h3 id=\"Reason-2-avoid-dirty-data\"><a href=\"#Reason-2-avoid-dirty-data\" class=\"headerlink\" title=\"Reason 2: avoid dirty data\"></a>Reason 2: avoid dirty data</h3><p>Besides performance optimization, avoiding dirty data is another reason not to run <code>setState()</code> in a synchronous way. To understand this, we need to talk about the core value of React first.</p>\n<p><strong>React In Theory</strong></p>\n<p>For React, its most fundamental principle evolved from this formula:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>UI &#x3D; f(state)</p></blockquote>\n<p>The concept behind this idea is straightforward: if you have the same input states for your application, it should always produce the same user interface (UI).</p>\n<p>However, running <code>setState()</code> synchronously may violate React’s pure-function-like update processes: <strong>It is hard to ensure consistency on synchronously updated states and their props.</strong>  </p>\n<p>When a sync <code>setState()</code> is fired, its related props have to wait for reconciliation or flushSync to happen for corresponding updates. Such inconsistency can lead to unpredictable state updates in a React App.</p>\n<p>To feel such consistency, you can try this example:</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">function App() &#123;\n  let [count, updateCount] &#x3D; useState(0);\n  console.log(&#39;render cycle&#39;, count);\n\n  const clickMe &#x3D; () &#x3D;&gt; &#123;\n    updateCount(count + 1);\n    console.log(&#39;click me:&#39;, count);\n  &#125;\n\n  const clickFox &#x3D; () &#x3D;&gt; &#123;\n    count +&#x3D; 1;\n    console.log(&#39;click fox:&#39;, count);\n  &#125;\n\n  return (\n  &lt;&gt;\n    &lt;button onClick&#x3D;&#123;clickMe&#125;&gt;click me&lt;&#x2F;button&gt;\n    &lt;button onClick&#x3D;&#123;clickFox&#125;&gt;click fox&lt;&#x2F;button&gt;\n    &lt;Child count&#x3D;&#123;count&#125; updateCount&#x3D;&#123;updateCount&#125;&#x2F;&gt;\n  &lt;&#x2F;&gt;\n  )\n&#125;\n\nfunction Child(&#123; count, updateCount &#125;) &#123;\n  const updateOnChild &#x3D; () &#x3D;&gt; updateCount(count + 1);\n  return (&lt;button onClick&#x3D;&#123;updateOnChild&#125;&gt;&#123;count&#125;&lt;&#x2F;button&gt;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>In the above example, <code>clickMe</code> is a function that calls <code>updateCount</code> asynchronously and will trigger a re-rendering of this App. Such characteristics ensure consistency between the <code>count</code> state, and its corresponding <code>props</code> passed to the Child component.</p>\n<p>If you try <code>clickFox</code>, every time when you click on <code>click fox</code>, a new value of count is immediately logged to the console. However, while “click fox” immediately updates the <code>count</code> state, the prop <code>count</code> still refers to the old value resulted from the last reconciliation.</p>\n<p>Such inconsistency in states and props can cause unpredictable behavior in an App.</p>\n<p>Please note: directly updating a state by <code>&quot;=&quot;</code> will not cause any re-rendering in a React App, unless we update the state with setState or useState hooks.<br>Here we only use the <code>click fox</code> example to mock the situation that a state changes inconsistently with related props, and its potential issues.</p>\n<h2 id=\"What-makes-sync-setState-act-asynchronously\"><a href=\"#What-makes-sync-setState-act-asynchronously\" class=\"headerlink\" title=\"What makes sync setState() act asynchronously\"></a>What makes sync setState() act asynchronously</h2><p>Every time <code>renderRoot</code> or <code>setState</code> is triggered, React doesn’t immediately start rendering in a React App. Instead, React will first schedule the updates, assigning different priority levels to each task and combining multiple tasks into one.</p>\n<p>Because of this, synchronous <code>setState()</code> calls are collected in an <code>updateQueue</code>.<br>The way <code>updateQueue</code> implemented gives <code>setState()</code> asynchronous behaviors: </p>\n<ul>\n<li><code>normal setState()</code> calls will be handled within a micro task queue</li>\n<li><code>concurrent featured setState()</code> calls are handled in a macro task queue</li>\n</ul>\n<p><strong>You might be wondering how to prove that <code>setState()</code> itself is synchronous?</strong><br>A classic example is: Prior to React 18, if you called <code>setState()</code> within <code>setTimeout()</code>, you would notice that it executes immediately, as setState called in setTimeout or native events are not collected in the <code>updateQueue</code> of React. </p>\n<p>(In React 18, this issue has been addressed, and <code>setState()</code> calls made within <code>setTimeout()</code> are now asynchronous as well)</p>\n<h2 id=\"Microtask-or-Macrotask\"><a href=\"#Microtask-or-Macrotask\" class=\"headerlink\" title=\"Microtask or Macrotask\"></a>Microtask or Macrotask</h2><p>When updating, if React encounters a high-priority task, it will not execute the next low-priority task and schedule the highest-priority task to be executed.</p>\n<p><strong>How does React implement this (let high priority tasks cut in line)?</strong><br>When it comes to the JavaScript event loop, a common method of interrupting is to let the newly added microtask interrupt the execution of existing macro tasks.<br>We also know that React update functions (setState) are often processed as microtasks.</p>\n<p><strong>Take the concurrent feature as an example:</strong><br>To interrupt low-priority tasks, we mark the tasks in a concurrent feature API as low-priority and put them in a macro task queue.<br>In this way, when higher-priority microtask updates appear, they can jump ahead of the current low-priority macro tasks and be processed first.</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://github.com/facebook/react/issues/11527#issuecomment-360199710\">RFClarification: why is setState asynchronous?</a></li>\n<li><a href=\"https://github.com/reactwg/react-18/discussions/21\">Automatic batching for fewer renders in React 18</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>Whether setState is synchronous or asynchronous has become a cliché these days.   </p>\n<p>However, as React is constantly evolving, a frontend programmer’s answer to this question can still demonstrate some deep understanding of the framework.</p>\n<p>Today, let’s gain a deeper understanding of some implementation mechanisms behind React.</p>\n<h2 id=\"Ideas-of-this-article\"><a href=\"#Ideas-of-this-article\" class=\"headerlink\" title=\"Ideas of this article\"></a>Ideas of this article</h2><p>Although <code>setState()</code> is not inherently asynchronous, React has designed it to behave like an asynchronous function for certain reasons. This article will:</p>\n<ul>\n<li>Summarize why <code>setState()</code> behaves like an asynchronous function.</li>\n<li>Explore the reasons why synchronous <code>setState()</code> can behave asynchronously.</li>\n<li>Clarify whether <code>setState()</code> behaves like a microtask or a macrotask.</li>\n</ul>\n<h2 id=\"Why-setState-act-like-an-async-function\"><a href=\"#Why-setState-act-like-an-async-function\" class=\"headerlink\" title=\"Why setState() act like an async function\"></a>Why setState() act like an async function</h2><p>(This section is a recap on Dan Abramov’s response to the question posed in <a href=\"https://github.com/facebook/react/issues/11527#issuecomment-360199710\">RFClarification: why is setState asynchronous?</a>)</p>\n<p>In daily life, tasks that require immediate attention are important to us, while tasks we procrastinate on are often less critical. Similarly, not every state update triggered by <code>setState()</code> is of the highest priority.</p>\n<p>This is where the first reason of asynchronously <code>setState</code> comes into play: priority scheduling.</p>\n<blockquote>\n<p>React could assign different priorities to setState() calls depending on where they’re coming from: an event handler, a network response, an animation, etc.</p>\n</blockquote>\n<h3 id=\"Reason-1-ensures-concurrent-features\"><a href=\"#Reason-1-ensures-concurrent-features\" class=\"headerlink\" title=\"Reason 1: ensures concurrent features\"></a>Reason 1: ensures concurrent features</h3><p><strong>Example</strong><br>Imagine you’re editing a post on social media while getting a dozen of new notification messages.<br>If there are 100+ or even 500+ new messages, there may be no response to your keyboard input, as the browser is busy updating new notifications.</p>\n<p><strong>For the above situation, what can you do to ensure smooth text input for users?</strong><br>A good practice is: giving low priority to message updates, as they are less important in this case. And when a message update encounters a high priority event, we will ask the former one to yield the main thread.</p>\n<p><strong>Why asynchronous <code>setState()</code> benefits prioritized rendering (concurrent features) in React?</strong><br>This is because async-like <code>setState()</code> makes concurrent features possible, by delaying execution of low priority task and making room for high priority ones.</p>\n<h3 id=\"Reason-2-avoid-dirty-data\"><a href=\"#Reason-2-avoid-dirty-data\" class=\"headerlink\" title=\"Reason 2: avoid dirty data\"></a>Reason 2: avoid dirty data</h3><p>Besides performance optimization, avoiding dirty data is another reason not to run <code>setState()</code> in a synchronous way. To understand this, we need to talk about the core value of React first.</p>\n<p><strong>React In Theory</strong></p>\n<p>For React, its most fundamental principle evolved from this formula:</p>\n<blockquote>\n<p>UI &#x3D; f(state)</p>\n</blockquote>\n<p>The concept behind this idea is straightforward: if you have the same input states for your application, it should always produce the same user interface (UI).</p>\n<p>However, running <code>setState()</code> synchronously may violate React’s pure-function-like update processes: <strong>It is hard to ensure consistency on synchronously updated states and their props.</strong>  </p>\n<p>When a sync <code>setState()</code> is fired, its related props have to wait for reconciliation or flushSync to happen for corresponding updates. Such inconsistency can lead to unpredictable state updates in a React App.</p>\n<p>To feel such consistency, you can try this example:</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">function App() &#123;\n  let [count, updateCount] &#x3D; useState(0);\n  console.log(&#39;render cycle&#39;, count);\n\n  const clickMe &#x3D; () &#x3D;&gt; &#123;\n    updateCount(count + 1);\n    console.log(&#39;click me:&#39;, count);\n  &#125;\n\n  const clickFox &#x3D; () &#x3D;&gt; &#123;\n    count +&#x3D; 1;\n    console.log(&#39;click fox:&#39;, count);\n  &#125;\n\n  return (\n  &lt;&gt;\n    &lt;button onClick&#x3D;&#123;clickMe&#125;&gt;click me&lt;&#x2F;button&gt;\n    &lt;button onClick&#x3D;&#123;clickFox&#125;&gt;click fox&lt;&#x2F;button&gt;\n    &lt;Child count&#x3D;&#123;count&#125; updateCount&#x3D;&#123;updateCount&#125;&#x2F;&gt;\n  &lt;&#x2F;&gt;\n  )\n&#125;\n\nfunction Child(&#123; count, updateCount &#125;) &#123;\n  const updateOnChild &#x3D; () &#x3D;&gt; updateCount(count + 1);\n  return (&lt;button onClick&#x3D;&#123;updateOnChild&#125;&gt;&#123;count&#125;&lt;&#x2F;button&gt;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>In the above example, <code>clickMe</code> is a function that calls <code>updateCount</code> asynchronously and will trigger a re-rendering of this App. Such characteristics ensure consistency between the <code>count</code> state, and its corresponding <code>props</code> passed to the Child component.</p>\n<p>If you try <code>clickFox</code>, every time when you click on <code>click fox</code>, a new value of count is immediately logged to the console. However, while “click fox” immediately updates the <code>count</code> state, the prop <code>count</code> still refers to the old value resulted from the last reconciliation.</p>\n<p>Such inconsistency in states and props can cause unpredictable behavior in an App.</p>\n<p>Please note: directly updating a state by <code>&quot;=&quot;</code> will not cause any re-rendering in a React App, unless we update the state with setState or useState hooks.<br>Here we only use the <code>click fox</code> example to mock the situation that a state changes inconsistently with related props, and its potential issues.</p>\n<h2 id=\"What-makes-sync-setState-act-asynchronously\"><a href=\"#What-makes-sync-setState-act-asynchronously\" class=\"headerlink\" title=\"What makes sync setState() act asynchronously\"></a>What makes sync setState() act asynchronously</h2><p>Every time <code>renderRoot</code> or <code>setState</code> is triggered, React doesn’t immediately start rendering in a React App. Instead, React will first schedule the updates, assigning different priority levels to each task and combining multiple tasks into one.</p>\n<p>Because of this, synchronous <code>setState()</code> calls are collected in an <code>updateQueue</code>.<br>The way <code>updateQueue</code> implemented gives <code>setState()</code> asynchronous behaviors: </p>\n<ul>\n<li><code>normal setState()</code> calls will be handled within a micro task queue</li>\n<li><code>concurrent featured setState()</code> calls are handled in a macro task queue</li>\n</ul>\n<p><strong>You might be wondering how to prove that <code>setState()</code> itself is synchronous?</strong><br>A classic example is: Prior to React 18, if you called <code>setState()</code> within <code>setTimeout()</code>, you would notice that it executes immediately, as setState called in setTimeout or native events are not collected in the <code>updateQueue</code> of React. </p>\n<p>(In React 18, this issue has been addressed, and <code>setState()</code> calls made within <code>setTimeout()</code> are now asynchronous as well)</p>\n<h2 id=\"Microtask-or-Macrotask\"><a href=\"#Microtask-or-Macrotask\" class=\"headerlink\" title=\"Microtask or Macrotask\"></a>Microtask or Macrotask</h2><p>When updating, if React encounters a high-priority task, it will not execute the next low-priority task and schedule the highest-priority task to be executed.</p>\n<p><strong>How does React implement this (let high priority tasks cut in line)?</strong><br>When it comes to the JavaScript event loop, a common method of interrupting is to let the newly added microtask interrupt the execution of existing macro tasks.<br>We also know that React update functions (setState) are often processed as microtasks.</p>\n<p><strong>Take the concurrent feature as an example:</strong><br>To interrupt low-priority tasks, we mark the tasks in a concurrent feature API as low-priority and put them in a macro task queue.<br>In this way, when higher-priority microtask updates appear, they can jump ahead of the current low-priority macro tasks and be processed first.</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://github.com/facebook/react/issues/11527#issuecomment-360199710\">RFClarification: why is setState asynchronous?</a></li>\n<li><a href=\"https://github.com/reactwg/react-18/discussions/21\">Automatic batching for fewer renders in React 18</a></li>\n</ol>\n"},{"title":"Exploring the Benefits of Locality in Memory","date":"2022-11-10T18:04:15.000Z","_content":"As stated in Computer Systems: A Programmer's Perspective:\n> Well-written computer programs tend to exhibit good locality\n\n## What is locality\n<details><summary><b>If you haven't heard of locality, click here.</b></summary>\n<div>\n \n> Locality is often described as temporal locality and spatial locality.\n\n## 1. Spatial locality\nGood practice: reference a memory location and then its neighbors\n### Poor spatial locality\n```c\nint sumarraycols (int a[M][N]) {\n  int i, j, sum = 0;\n  for (j = 0; j < N; j++)\n    for (i =0: i < M; i++)\n      sum+ = a[i][j]:\n  return sum;\n}\n```\nThis code jumping through elements of different rows in the matrix.\n\nAssume you are going to buy groceries and books. With poor spatial locality, you  do this:\n- buy tomatoes first, and go to a book store for a Math book.\n- back to the grocery store for milk, and go to the book store again for a comic book.\n\n### Better spatial locality\n```c\nint sumarraycols (int a[M][N]) {\n  int i, j, sum = 0;\n  for (i = 0; i < M; i++)\n    for (j =0: j < N; j++)\n      sum+ = a[i][j]:\n  return sum;\n}\n```\nThis code reads all the elements in a row and then the next row.\n\nBack to our grocery example, this time you buy everything from the grocery store first. \nLater to buy all the books you need from the book store.\n\n## 2. Temporal locality\nGood practice: reference a memory location multiple times\n### Good temporal locality\nOur code above repeatedly reference the same variables (i, j) and enjoy good temporal locality.\n\n</div>\n</details>\n\n## Example in JavaScript\nCan we have good spatial locality if we loop cols before rows like this?\n```javascript\nfunction farAccess(data) {\n  for (let i = 0; i < COLS; i++) {\n    for (let j = 0; j < ROWS; j++) {\n      data[j * ROWS + i].x = 1;\n    }\n  }\n}\n```\nLet's look at an [example](https://codesandbox.io/s/cool-murdock-bnj02z?file=/src/index.js) given by Yonatan Kra:\n\n1/ Create an array of 1,000,000 instances.\n```javascript\nconst ROWS = 1000, COLS = 1000, REPEATS = 1000;\nconst testArray = new Array(ROWS * COLS).fill(0).map((a, i) => new Boom(i));\n\n// testArray:\n0:Boom {id: 0, x: 0}\n1:Boom {id: 1, x: 0}\n2:Boom {id: 2, x: 0}\n3:Boom {id: 3, x: 0}\n...\n999999:Boom {id: 999999, x: 0}\n```\n2/ Create a tricky array.\n```javascript\nconst trickyArray = new Array(ROWS * COLS).fill(0);\nfor (let col = 0; col < COLS; col++) {\n    for (let row = 0; row < ROWS; row++) {\n        trickyArray[row * ROWS + col] = arr[col * COLS + row];\n    }\n}\n```\n3/ Write two functions with good/bad spatial locality. \n```javascript\nfunction runGoodSpatialLocality(arr) {\n  for (let i = 0; i < ROWS; i++) {\n    for (let j = 0; j < COLS; j++) {\n      arr[i * ROWS + j].x = 0;\n    }\n  }\n}\n\nfunction runPoorSpatialLocality(arr) {\n  for (let i = 0; i < COLS; i++) {\n    for (let j = 0; j < ROWS; j++) {\n      arr[j * ROWS + i].x = 0;\n    }\n  }\n}\n```\n4/ Test performance\n```javascript\nfunction timeit(cb, type) {\n    console.log(`Started data ${type}`);\n    const start = performance.now();\n    for (let i = 0; i < repeats; i++) {\n        cb();\n    }\n    const end = performance.now();\n    console.log(\n        `Finished data locality test run in ${((end - start) / 1000).toFixed(\n            4\n        )} seconds`\n    );\n    return end - start;\n}\n\ntimeit(() => runGoodSpatialLocality(testArray), \"good\");\nsetTimeout(() => {\n    timeit(() => runPoorSpatialLocality(testArray), \"bad\");\n    setTimeout(() => {\n        timeit(() => runPoorSpatialLocality(trickyArray), \"tricky\");\n    }, 2000);\n}, 2000);\n```\n5/ Results\nThe second function call with bad locality is more than 2 times slower.\nThis is because it makes the CPU chasing its tail to jump between N (length of a row) stride of memory, during each access.\nBut why the third function call with bad locality and the tricky array is still fast? \n```javascript\nFinished good data locality test in 5.1799 seconds\nFinished bad data locality test in 13.9438 seconds\nFinished tricky data locality test in 5.4242 seconds\n```\nBecause our tricky array still access 1-[stride](https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/) of an array:\nAlthough we access the whole array by index 0, 1000, ... \nour tricky array just put elements with 1-stride of memory on index 0, 1000, 2000, ... like this:\n```javascript\n// trickArray:\n0:Boom {id: 0, x: 0}\n1:Boom {id: 1000, x: 0}\n1000:Boom {id: 1, x: 0}\n1001:Boom {id: 1001, x: 0}\n2000:Boom {id: 2, x: 0}\n...\n\n// testArray:\n0:Boom {id: 0, x: 0}\n1:Boom {id: 1, x: 0}\n1000:Boom {id: 1000, x: 0}\n2000:Boom {id: 1000, x: 0}\n...\n```\nNow we get the answer: Yes. \nEven though we run a COL loop first and a ROW loop later, \nas we still access a memory location and its neighbors in memory,\nwe can have good spatial locality.\n\n### References\n\n[1] [Computer Systems: A Programmer's Perspective](https://csapp.cs.cmu.edu)\n[2] [Memory in Javascript—Beyond Leaks](https://medium.com/walkme-engineering/memory-in-javascript-beyond-leaks-8c1d697c655c)\n[3] [Stride, Caches, CS61C lab12](https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/)\n","source":"_posts/locality.md","raw":"---\ntitle: Exploring the Benefits of Locality in Memory\ndate: 2022-11-10 13:04:15\ntag: Memory\n\n---\nAs stated in Computer Systems: A Programmer's Perspective:\n> Well-written computer programs tend to exhibit good locality\n\n## What is locality\n<details><summary><b>If you haven't heard of locality, click here.</b></summary>\n<div>\n \n> Locality is often described as temporal locality and spatial locality.\n\n## 1. Spatial locality\nGood practice: reference a memory location and then its neighbors\n### Poor spatial locality\n```c\nint sumarraycols (int a[M][N]) {\n  int i, j, sum = 0;\n  for (j = 0; j < N; j++)\n    for (i =0: i < M; i++)\n      sum+ = a[i][j]:\n  return sum;\n}\n```\nThis code jumping through elements of different rows in the matrix.\n\nAssume you are going to buy groceries and books. With poor spatial locality, you  do this:\n- buy tomatoes first, and go to a book store for a Math book.\n- back to the grocery store for milk, and go to the book store again for a comic book.\n\n### Better spatial locality\n```c\nint sumarraycols (int a[M][N]) {\n  int i, j, sum = 0;\n  for (i = 0; i < M; i++)\n    for (j =0: j < N; j++)\n      sum+ = a[i][j]:\n  return sum;\n}\n```\nThis code reads all the elements in a row and then the next row.\n\nBack to our grocery example, this time you buy everything from the grocery store first. \nLater to buy all the books you need from the book store.\n\n## 2. Temporal locality\nGood practice: reference a memory location multiple times\n### Good temporal locality\nOur code above repeatedly reference the same variables (i, j) and enjoy good temporal locality.\n\n</div>\n</details>\n\n## Example in JavaScript\nCan we have good spatial locality if we loop cols before rows like this?\n```javascript\nfunction farAccess(data) {\n  for (let i = 0; i < COLS; i++) {\n    for (let j = 0; j < ROWS; j++) {\n      data[j * ROWS + i].x = 1;\n    }\n  }\n}\n```\nLet's look at an [example](https://codesandbox.io/s/cool-murdock-bnj02z?file=/src/index.js) given by Yonatan Kra:\n\n1/ Create an array of 1,000,000 instances.\n```javascript\nconst ROWS = 1000, COLS = 1000, REPEATS = 1000;\nconst testArray = new Array(ROWS * COLS).fill(0).map((a, i) => new Boom(i));\n\n// testArray:\n0:Boom {id: 0, x: 0}\n1:Boom {id: 1, x: 0}\n2:Boom {id: 2, x: 0}\n3:Boom {id: 3, x: 0}\n...\n999999:Boom {id: 999999, x: 0}\n```\n2/ Create a tricky array.\n```javascript\nconst trickyArray = new Array(ROWS * COLS).fill(0);\nfor (let col = 0; col < COLS; col++) {\n    for (let row = 0; row < ROWS; row++) {\n        trickyArray[row * ROWS + col] = arr[col * COLS + row];\n    }\n}\n```\n3/ Write two functions with good/bad spatial locality. \n```javascript\nfunction runGoodSpatialLocality(arr) {\n  for (let i = 0; i < ROWS; i++) {\n    for (let j = 0; j < COLS; j++) {\n      arr[i * ROWS + j].x = 0;\n    }\n  }\n}\n\nfunction runPoorSpatialLocality(arr) {\n  for (let i = 0; i < COLS; i++) {\n    for (let j = 0; j < ROWS; j++) {\n      arr[j * ROWS + i].x = 0;\n    }\n  }\n}\n```\n4/ Test performance\n```javascript\nfunction timeit(cb, type) {\n    console.log(`Started data ${type}`);\n    const start = performance.now();\n    for (let i = 0; i < repeats; i++) {\n        cb();\n    }\n    const end = performance.now();\n    console.log(\n        `Finished data locality test run in ${((end - start) / 1000).toFixed(\n            4\n        )} seconds`\n    );\n    return end - start;\n}\n\ntimeit(() => runGoodSpatialLocality(testArray), \"good\");\nsetTimeout(() => {\n    timeit(() => runPoorSpatialLocality(testArray), \"bad\");\n    setTimeout(() => {\n        timeit(() => runPoorSpatialLocality(trickyArray), \"tricky\");\n    }, 2000);\n}, 2000);\n```\n5/ Results\nThe second function call with bad locality is more than 2 times slower.\nThis is because it makes the CPU chasing its tail to jump between N (length of a row) stride of memory, during each access.\nBut why the third function call with bad locality and the tricky array is still fast? \n```javascript\nFinished good data locality test in 5.1799 seconds\nFinished bad data locality test in 13.9438 seconds\nFinished tricky data locality test in 5.4242 seconds\n```\nBecause our tricky array still access 1-[stride](https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/) of an array:\nAlthough we access the whole array by index 0, 1000, ... \nour tricky array just put elements with 1-stride of memory on index 0, 1000, 2000, ... like this:\n```javascript\n// trickArray:\n0:Boom {id: 0, x: 0}\n1:Boom {id: 1000, x: 0}\n1000:Boom {id: 1, x: 0}\n1001:Boom {id: 1001, x: 0}\n2000:Boom {id: 2, x: 0}\n...\n\n// testArray:\n0:Boom {id: 0, x: 0}\n1:Boom {id: 1, x: 0}\n1000:Boom {id: 1000, x: 0}\n2000:Boom {id: 1000, x: 0}\n...\n```\nNow we get the answer: Yes. \nEven though we run a COL loop first and a ROW loop later, \nas we still access a memory location and its neighbors in memory,\nwe can have good spatial locality.\n\n### References\n\n[1] [Computer Systems: A Programmer's Perspective](https://csapp.cs.cmu.edu)\n[2] [Memory in Javascript—Beyond Leaks](https://medium.com/walkme-engineering/memory-in-javascript-beyond-leaks-8c1d697c655c)\n[3] [Stride, Caches, CS61C lab12](https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/)\n","slug":"locality","published":1,"updated":"2023-03-24T22:25:36.401Z","_id":"cldwmqq0c00012epnhdsh6n5x","comments":1,"layout":"post","photos":[],"link":"","content":"<p>As stated in Computer Systems: A Programmer’s Perspective:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Well-written computer programs tend to exhibit good locality</p></blockquote>\n<h2 id=\"What-is-locality\"><a href=\"#What-is-locality\" class=\"headerlink\" title=\"What is locality\"></a>What is locality</h2><details><summary><b>If you haven't heard of locality, click here.</b></summary>\n<div>\n \n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Locality is often described as temporal locality and spatial locality.</p></blockquote>\n<h2 id=\"1-Spatial-locality\"><a href=\"#1-Spatial-locality\" class=\"headerlink\" title=\"1. Spatial locality\"></a>1. Spatial locality</h2><p>Good practice: reference a memory location and then its neighbors</p>\n<h3 id=\"Poor-spatial-locality\"><a href=\"#Poor-spatial-locality\" class=\"headerlink\" title=\"Poor spatial locality\"></a>Poor spatial locality</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int sumarraycols (int a[M][N]) &#123;\n  int i, j, sum &#x3D; 0;\n  for (j &#x3D; 0; j &lt; N; j++)\n    for (i &#x3D;0: i &lt; M; i++)\n      sum+ &#x3D; a[i][j]:\n  return sum;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>This code jumping through elements of different rows in the matrix.</p>\n<p>Assume you are going to buy groceries and books. With poor spatial locality, you  do this:</p>\n<ul>\n<li>buy tomatoes first, and go to a book store for a Math book.</li>\n<li>back to the grocery store for milk, and go to the book store again for a comic book.</li>\n</ul>\n<h3 id=\"Better-spatial-locality\"><a href=\"#Better-spatial-locality\" class=\"headerlink\" title=\"Better spatial locality\"></a>Better spatial locality</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int sumarraycols (int a[M][N]) &#123;\n  int i, j, sum &#x3D; 0;\n  for (i &#x3D; 0; i &lt; M; i++)\n    for (j &#x3D;0: j &lt; N; j++)\n      sum+ &#x3D; a[i][j]:\n  return sum;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>This code reads all the elements in a row and then the next row.</p>\n<p>Back to our grocery example, this time you buy everything from the grocery store first.<br>Later to buy all the books you need from the book store.</p>\n<h2 id=\"2-Temporal-locality\"><a href=\"#2-Temporal-locality\" class=\"headerlink\" title=\"2. Temporal locality\"></a>2. Temporal locality</h2><p>Good practice: reference a memory location multiple times</p>\n<h3 id=\"Good-temporal-locality\"><a href=\"#Good-temporal-locality\" class=\"headerlink\" title=\"Good temporal locality\"></a>Good temporal locality</h3><p>Our code above repeatedly reference the same variables (i, j) and enjoy good temporal locality.</p>\n</div>\n</details>\n\n<h2 id=\"Example-in-JavaScript\"><a href=\"#Example-in-JavaScript\" class=\"headerlink\" title=\"Example in JavaScript\"></a>Example in JavaScript</h2><p>Can we have good spatial locality if we loop cols before rows like this?</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">farAccess</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      data<span class=\"token punctuation\">[</span>j <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Let’s look at an <a href=\"https://codesandbox.io/s/cool-murdock-bnj02z?file=/src/index.js\">example</a> given by Yonatan Kra:</p>\n<p>1&#x2F; Create an array of 1,000,000 instances.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">COLS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">REPEATS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> testArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ROWS</span> <span class=\"token operator\">*</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boom</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// testArray:</span>\n<span class=\"token number\">0</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">2</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">3</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token number\">999999</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">999999</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2&#x2F; Create a tricky array.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> trickyArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ROWS</span> <span class=\"token operator\">*</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        trickyArray<span class=\"token punctuation\">[</span>row <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>col <span class=\"token operator\">*</span> <span class=\"token constant\">COLS</span> <span class=\"token operator\">+</span> row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3&#x2F; Write two functions with good&#x2F;bad spatial locality. </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">runGoodSpatialLocality</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">runPoorSpatialLocality</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4&#x2F; Test performance</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Started data </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>type<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> repeats<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Finished data locality test run in </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span>\n            <span class=\"token number\">4</span>\n        <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> seconds</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">runGoodSpatialLocality</span><span class=\"token punctuation\">(</span>testArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">runPoorSpatialLocality</span><span class=\"token punctuation\">(</span>testArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bad\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">runPoorSpatialLocality</span><span class=\"token punctuation\">(</span>trickyArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tricky\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>5&#x2F; Results<br>The second function call with bad locality is more than 2 times slower.<br>This is because it makes the CPU chasing its tail to jump between N (length of a row) stride of memory, during each access.<br>But why the third function call with bad locality and the tricky array is still fast? </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Finished good data locality test <span class=\"token keyword\">in</span> <span class=\"token number\">5.1799</span> seconds\nFinished bad data locality test <span class=\"token keyword\">in</span> <span class=\"token number\">13.9438</span> seconds\nFinished tricky data locality test <span class=\"token keyword\">in</span> <span class=\"token number\">5.4242</span> seconds<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>Because our tricky array still access 1-<a href=\"https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/\">stride</a> of an array:<br>Although we access the whole array by index 0, 1000, …<br>our tricky array just put elements with 1-stride of memory on index 0, 1000, 2000, … like this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// trickArray:</span>\n<span class=\"token number\">0</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1001</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">2000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">// testArray:</span>\n<span class=\"token number\">0</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">2000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Now we get the answer: Yes.<br>Even though we run a COL loop first and a ROW loop later,<br>as we still access a memory location and its neighbors in memory,<br>we can have good spatial locality.</p>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p>[1] <a href=\"https://csapp.cs.cmu.edu/\">Computer Systems: A Programmer’s Perspective</a><br>[2] <a href=\"https://medium.com/walkme-engineering/memory-in-javascript-beyond-leaks-8c1d697c655c\">Memory in Javascript—Beyond Leaks</a><br>[3] <a href=\"https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/\">Stride, Caches, CS61C lab12</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>As stated in Computer Systems: A Programmer’s Perspective:</p>\n<blockquote>\n<p>Well-written computer programs tend to exhibit good locality</p>\n</blockquote>\n<h2 id=\"What-is-locality\"><a href=\"#What-is-locality\" class=\"headerlink\" title=\"What is locality\"></a>What is locality</h2><details><summary><b>If you haven't heard of locality, click here.</b></summary>\n<div>\n \n<blockquote>\n<p>Locality is often described as temporal locality and spatial locality.</p>\n</blockquote>\n<h2 id=\"1-Spatial-locality\"><a href=\"#1-Spatial-locality\" class=\"headerlink\" title=\"1. Spatial locality\"></a>1. Spatial locality</h2><p>Good practice: reference a memory location and then its neighbors</p>\n<h3 id=\"Poor-spatial-locality\"><a href=\"#Poor-spatial-locality\" class=\"headerlink\" title=\"Poor spatial locality\"></a>Poor spatial locality</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int sumarraycols (int a[M][N]) &#123;\n  int i, j, sum &#x3D; 0;\n  for (j &#x3D; 0; j &lt; N; j++)\n    for (i &#x3D;0: i &lt; M; i++)\n      sum+ &#x3D; a[i][j]:\n  return sum;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>This code jumping through elements of different rows in the matrix.</p>\n<p>Assume you are going to buy groceries and books. With poor spatial locality, you  do this:</p>\n<ul>\n<li>buy tomatoes first, and go to a book store for a Math book.</li>\n<li>back to the grocery store for milk, and go to the book store again for a comic book.</li>\n</ul>\n<h3 id=\"Better-spatial-locality\"><a href=\"#Better-spatial-locality\" class=\"headerlink\" title=\"Better spatial locality\"></a>Better spatial locality</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int sumarraycols (int a[M][N]) &#123;\n  int i, j, sum &#x3D; 0;\n  for (i &#x3D; 0; i &lt; M; i++)\n    for (j &#x3D;0: j &lt; N; j++)\n      sum+ &#x3D; a[i][j]:\n  return sum;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>This code reads all the elements in a row and then the next row.</p>\n<p>Back to our grocery example, this time you buy everything from the grocery store first.<br>Later to buy all the books you need from the book store.</p>\n<h2 id=\"2-Temporal-locality\"><a href=\"#2-Temporal-locality\" class=\"headerlink\" title=\"2. Temporal locality\"></a>2. Temporal locality</h2><p>Good practice: reference a memory location multiple times</p>\n<h3 id=\"Good-temporal-locality\"><a href=\"#Good-temporal-locality\" class=\"headerlink\" title=\"Good temporal locality\"></a>Good temporal locality</h3><p>Our code above repeatedly reference the same variables (i, j) and enjoy good temporal locality.</p>\n</div>\n</details>\n\n<h2 id=\"Example-in-JavaScript\"><a href=\"#Example-in-JavaScript\" class=\"headerlink\" title=\"Example in JavaScript\"></a>Example in JavaScript</h2><p>Can we have good spatial locality if we loop cols before rows like this?</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">farAccess</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      data<span class=\"token punctuation\">[</span>j <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Let’s look at an <a href=\"https://codesandbox.io/s/cool-murdock-bnj02z?file=/src/index.js\">example</a> given by Yonatan Kra:</p>\n<p>1&#x2F; Create an array of 1,000,000 instances.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">COLS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">REPEATS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> testArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ROWS</span> <span class=\"token operator\">*</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boom</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// testArray:</span>\n<span class=\"token number\">0</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">2</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">3</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token number\">999999</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">999999</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2&#x2F; Create a tricky array.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> trickyArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ROWS</span> <span class=\"token operator\">*</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        trickyArray<span class=\"token punctuation\">[</span>row <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>col <span class=\"token operator\">*</span> <span class=\"token constant\">COLS</span> <span class=\"token operator\">+</span> row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3&#x2F; Write two functions with good&#x2F;bad spatial locality. </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">runGoodSpatialLocality</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">runPoorSpatialLocality</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4&#x2F; Test performance</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Started data </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>type<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> repeats<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Finished data locality test run in </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span>\n            <span class=\"token number\">4</span>\n        <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> seconds</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">runGoodSpatialLocality</span><span class=\"token punctuation\">(</span>testArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">runPoorSpatialLocality</span><span class=\"token punctuation\">(</span>testArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bad\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">runPoorSpatialLocality</span><span class=\"token punctuation\">(</span>trickyArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tricky\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>5&#x2F; Results<br>The second function call with bad locality is more than 2 times slower.<br>This is because it makes the CPU chasing its tail to jump between N (length of a row) stride of memory, during each access.<br>But why the third function call with bad locality and the tricky array is still fast? </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Finished good data locality test <span class=\"token keyword\">in</span> <span class=\"token number\">5.1799</span> seconds\nFinished bad data locality test <span class=\"token keyword\">in</span> <span class=\"token number\">13.9438</span> seconds\nFinished tricky data locality test <span class=\"token keyword\">in</span> <span class=\"token number\">5.4242</span> seconds<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>Because our tricky array still access 1-<a href=\"https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/\">stride</a> of an array:<br>Although we access the whole array by index 0, 1000, …<br>our tricky array just put elements with 1-stride of memory on index 0, 1000, 2000, … like this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// trickArray:</span>\n<span class=\"token number\">0</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1001</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">2000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">// testArray:</span>\n<span class=\"token number\">0</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">2000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Now we get the answer: Yes.<br>Even though we run a COL loop first and a ROW loop later,<br>as we still access a memory location and its neighbors in memory,<br>we can have good spatial locality.</p>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p>[1] <a href=\"https://csapp.cs.cmu.edu/\">Computer Systems: A Programmer’s Perspective</a><br>[2] <a href=\"https://medium.com/walkme-engineering/memory-in-javascript-beyond-leaks-8c1d697c655c\">Memory in Javascript—Beyond Leaks</a><br>[3] <a href=\"https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/\">Stride, Caches, CS61C lab12</a></p>\n"},{"title":"React Source Code Little by Little 2 - Fiber Tree","date":"2022-11-23T04:40:35.000Z","_content":"> Plato said life is like being chained up in a cave, forced to watch shadows flitting across a stone wall.\n\nWe are not talking about philosophy today, but use [Allegory of the Cave](https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler) to describe the relationship between React applications and what is under the hood:\n\nReact applications we see today are mainly results of the render phase and the commit phase.\nJust like shadows in the eyes of prisoners are results of sun reflection and real world activities.\n\n![allegory_cave_dark](https://user-images.githubusercontent.com/51183663/209894263-18de7386-087f-4a0d-8418-dba2744d016d.png)\n\n### What is under the hood\nBefore we see any changes in an application, React does three things: Scheduling, Rendering and commit. What are these? In plain English, they are just:\n- Scheduling 🗓️: schedule and manage tasks to run\n- Render 🔎 🌲 🏁: figure out changes made in React applications\n- Commit ☑️ : apply these changes to browser DOM\n\nTo understand React, we will start from the render phase. To understand the render phase, we need to understand the React Fiber data structure.\n\nIn this post, I will cover 2 topics about React Fiber:\n- How does React create the first Fiber node?\n  - What are the main properties of a Fiber node?\n- How does React build a Fiber Tree from the first Fiber node during mounting?\n\n## Inside React Reconciliation: Fiber Trees\nFrequent DOM manipulations are expensive for complicated web applications.\nIn this case, we had better only applies changes to the real DOM during state/props updates. \nBut changes might spread all over the whole tree, to locate them, we can compare two versions (previous & current) of a virtual DOM tree. This process is called Reconciliation in React.\n\n### Question: What is a virtual DOM tree called in React 18?\nFiber tree, a singly linked list tree.\nTo understand Fiber tree, we can start from the most basic unit of it, a Fiber node.\n\n## How does React generate the first Fiber node\nA Fiber node is just a plain JavaScript object.\nBut it may be the object you have never seen before, since it is not exposed to React users.\nLet us start from something we are familiar with—React Components.\n\n### React Components, Elements, Fiber Node\nThe process of building a Fiber node is the process of converting React Component JSX => a React Element => a Fiber node. \n<details><summary><b> JSX </b></summary>\n<p>\n\n> A syntax extension to JavaScript that allows writing HTML in React components\n\n</p>\n</details>\n\n<details><summary><b> React Element </b></summary>\n<p>\n\n> The smallest building blocks of React apps, describing what to render to a React UI environment\n\n</p>\n</details>\n\n<details><summary><b> Fiber node </b></summary>\n<p>\n\n> A basic unit of work to locate or commit changes in React applications\n\n</p>\n</details>\n\n### From React Component to React Element\nWe know that React components return JSX. But what does JSX produces?\n```javascript\nconst App = () => {\n    return (\n        <div>\n            react\n            <span>\n                little by little\n            </span>\n        </div>\n    )\n}\nReactDOM.createRoot(rootElement).render(<App />);\n```\nJSX produces React elements.\nFor example, App is a React component; <App / > is a React element in the form of JSX.\nIf you put <App / > into [Babel](https://babeljs.io/repl), you will get:\n```javascript\n/*#__PURE__*/React.createElement(App, null);\n```\nIt is just a JavaScript object:\n```javascript\nconsole.log(React.createElement(App, null));\n\n/*\n{\ntype: ƒ App(), // e.g. functional component, or HTML tag type like div, p, h1\nkey: null, // e.g. keys you set up in a React component\nref: null,\nprops: {}, // e.g. React component props\n_store: {},\n_owner: null,\n}\n*/\n```\nTake a closer look at this React Element object, and answer this question:\n\n<details><summary><b>Can a React Element be the unit of work to do the Reconciliation job? </b></summary>\n<p>\n\nNo. For Reconciliation, a React element can be too static and isolated:\n- Data stored in it is comparatively static. It mainly explains what this React element looks like.\n> For reconciliation, we need more dynamic data about its state/effect changes or priority scheduling.\n- It does not show connections with its children/sibling/parent Elements.\n> When we have finished processing it, we have no way to find the next unit of work.\n\nFor reconciliation, we need an upgraded version of React Element. That is where Fiber node comes in.\n\n</p>\n</details>\n\n### From React Element to Fiber node\nWe can create a Fiber root node for the React element <App / >, by calling:\n```javascript\nconst rootElement = document.getElementById(\"root\");\nReactDOM.createRoot(rootElement).render(<App />);\n```\n\nTo see what is inside a Fiber node (React 18.2.0), you can try this:\n\n```javascript\nconst reactContainerKey = Object.keys(rootElement)[0]; // __reactContainer$cjvrzgbs4i4 \nconsole.log(rootElement[reactContainerKey]) // Fiber root node\n```\n\n![fiber_node_log](https://user-images.githubusercontent.com/51183663/210151836-ae932fd9-cfbe-424d-85db-f3c9882cd11c.png)\nTo make it easier to understand, I break down properties of a Fiber node object into 4 parts:\n- Basic Fiber node info\n- Tree pointers\n- Effect & reconciliation\n- Scheduling\n\nHere is a cheatsheet for a React Fiber node:\n\n![fiber_node](https://user-images.githubusercontent.com/51183663/212479942-a25a466e-a095-4409-9f9e-70c20139f918.png)\n\nAt this moment, just take a glimpse at this Fiber node.\nKnowing it also tells something about Reconciliation, Scheduling and its neighbor nodes is enough at this moment. \n## How does React build a Fiber tree from the Fiber root node?\nNow we have created a Fiber root node.\nBefore mount (first time rendering), React does three things:\n1) Create a Fiber root node for the whole App.\n2) Create a Host Fiber node for the rootElement DOM element.\n3) Link the Fiber root node with the host Fiber node, using the \"current\" pointer.\n\n![beforeMount](https://user-images.githubusercontent.com/51183663/211693577-4f9e384d-ff4e-414a-8d04-8792cc986bdc.png)\n\nDuring mounting, React will also create an alternative host Fiber node. \nThis is different from our existing one, as its child node is not null but a tree of Fiber nodes, which correspond to each React element listed in the app.\n\n![mounting](https://user-images.githubusercontent.com/51183663/211698358-9ab6c474-e979-4333-a59e-892d7453577d.png)\nThe alternative host Fiber node, along with its descendant Fiber nodes, is called the workInProgress (WIP) Fiber tree.\n\n<details><summary><b>Look at the above pic, you may wonder: Why two host root nodes? What is double buffering? </b></summary>\n<p>\n\nHere is an illustration from [game programming patterns](http://gameprogrammingpatterns.com/):\n> Imagine we are watching a play. \n> When scene 1 is finished, we will have a 5-minute scene transition, leaving the audience in dark and silence. This is normal in a real world theatre play. \n> But if we leave game players in a black screen for a few seconds, this may drive people nuts.\n\nIn both game programming and React, we hope to avoid this blank transition by a technique called [Double Buffering](http://gameprogrammingpatterns.com/double-buffer.html). \nBack to our theatre play example, we avoid the silent transition by running two stages (double buffering): \n- stage A is on show for the current scene \n- stage B is adjusting lights or removing/changing play props for the next scene\n\nOnce the current scene is finished on stage A, we immediately light on stage B to go to the next scene seamlessly. Now stage A is in dark preparing the next scene settings. \n\nSo in React, double buffering means switching between the current fiber tree and a workInProgress fiber tree for seamless transitions between rendering.\n\n---\n</p>\n</details>\n\nWe therefore have finished a simple tour about first time rendering in React.\n\n## References\n[1] [Double Buffering](http://gameprogrammingpatterns.com/double-buffer.html)\n[2] [Allegory of the Cave](https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler)\n","source":"_posts/react-fiber-tree.md","raw":"---\ntitle: React Source Code Little by Little 2 - Fiber Tree\ndate: 2022-11-22 23:40:35\ntags: React\n---\n> Plato said life is like being chained up in a cave, forced to watch shadows flitting across a stone wall.\n\nWe are not talking about philosophy today, but use [Allegory of the Cave](https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler) to describe the relationship between React applications and what is under the hood:\n\nReact applications we see today are mainly results of the render phase and the commit phase.\nJust like shadows in the eyes of prisoners are results of sun reflection and real world activities.\n\n![allegory_cave_dark](https://user-images.githubusercontent.com/51183663/209894263-18de7386-087f-4a0d-8418-dba2744d016d.png)\n\n### What is under the hood\nBefore we see any changes in an application, React does three things: Scheduling, Rendering and commit. What are these? In plain English, they are just:\n- Scheduling 🗓️: schedule and manage tasks to run\n- Render 🔎 🌲 🏁: figure out changes made in React applications\n- Commit ☑️ : apply these changes to browser DOM\n\nTo understand React, we will start from the render phase. To understand the render phase, we need to understand the React Fiber data structure.\n\nIn this post, I will cover 2 topics about React Fiber:\n- How does React create the first Fiber node?\n  - What are the main properties of a Fiber node?\n- How does React build a Fiber Tree from the first Fiber node during mounting?\n\n## Inside React Reconciliation: Fiber Trees\nFrequent DOM manipulations are expensive for complicated web applications.\nIn this case, we had better only applies changes to the real DOM during state/props updates. \nBut changes might spread all over the whole tree, to locate them, we can compare two versions (previous & current) of a virtual DOM tree. This process is called Reconciliation in React.\n\n### Question: What is a virtual DOM tree called in React 18?\nFiber tree, a singly linked list tree.\nTo understand Fiber tree, we can start from the most basic unit of it, a Fiber node.\n\n## How does React generate the first Fiber node\nA Fiber node is just a plain JavaScript object.\nBut it may be the object you have never seen before, since it is not exposed to React users.\nLet us start from something we are familiar with—React Components.\n\n### React Components, Elements, Fiber Node\nThe process of building a Fiber node is the process of converting React Component JSX => a React Element => a Fiber node. \n<details><summary><b> JSX </b></summary>\n<p>\n\n> A syntax extension to JavaScript that allows writing HTML in React components\n\n</p>\n</details>\n\n<details><summary><b> React Element </b></summary>\n<p>\n\n> The smallest building blocks of React apps, describing what to render to a React UI environment\n\n</p>\n</details>\n\n<details><summary><b> Fiber node </b></summary>\n<p>\n\n> A basic unit of work to locate or commit changes in React applications\n\n</p>\n</details>\n\n### From React Component to React Element\nWe know that React components return JSX. But what does JSX produces?\n```javascript\nconst App = () => {\n    return (\n        <div>\n            react\n            <span>\n                little by little\n            </span>\n        </div>\n    )\n}\nReactDOM.createRoot(rootElement).render(<App />);\n```\nJSX produces React elements.\nFor example, App is a React component; <App / > is a React element in the form of JSX.\nIf you put <App / > into [Babel](https://babeljs.io/repl), you will get:\n```javascript\n/*#__PURE__*/React.createElement(App, null);\n```\nIt is just a JavaScript object:\n```javascript\nconsole.log(React.createElement(App, null));\n\n/*\n{\ntype: ƒ App(), // e.g. functional component, or HTML tag type like div, p, h1\nkey: null, // e.g. keys you set up in a React component\nref: null,\nprops: {}, // e.g. React component props\n_store: {},\n_owner: null,\n}\n*/\n```\nTake a closer look at this React Element object, and answer this question:\n\n<details><summary><b>Can a React Element be the unit of work to do the Reconciliation job? </b></summary>\n<p>\n\nNo. For Reconciliation, a React element can be too static and isolated:\n- Data stored in it is comparatively static. It mainly explains what this React element looks like.\n> For reconciliation, we need more dynamic data about its state/effect changes or priority scheduling.\n- It does not show connections with its children/sibling/parent Elements.\n> When we have finished processing it, we have no way to find the next unit of work.\n\nFor reconciliation, we need an upgraded version of React Element. That is where Fiber node comes in.\n\n</p>\n</details>\n\n### From React Element to Fiber node\nWe can create a Fiber root node for the React element <App / >, by calling:\n```javascript\nconst rootElement = document.getElementById(\"root\");\nReactDOM.createRoot(rootElement).render(<App />);\n```\n\nTo see what is inside a Fiber node (React 18.2.0), you can try this:\n\n```javascript\nconst reactContainerKey = Object.keys(rootElement)[0]; // __reactContainer$cjvrzgbs4i4 \nconsole.log(rootElement[reactContainerKey]) // Fiber root node\n```\n\n![fiber_node_log](https://user-images.githubusercontent.com/51183663/210151836-ae932fd9-cfbe-424d-85db-f3c9882cd11c.png)\nTo make it easier to understand, I break down properties of a Fiber node object into 4 parts:\n- Basic Fiber node info\n- Tree pointers\n- Effect & reconciliation\n- Scheduling\n\nHere is a cheatsheet for a React Fiber node:\n\n![fiber_node](https://user-images.githubusercontent.com/51183663/212479942-a25a466e-a095-4409-9f9e-70c20139f918.png)\n\nAt this moment, just take a glimpse at this Fiber node.\nKnowing it also tells something about Reconciliation, Scheduling and its neighbor nodes is enough at this moment. \n## How does React build a Fiber tree from the Fiber root node?\nNow we have created a Fiber root node.\nBefore mount (first time rendering), React does three things:\n1) Create a Fiber root node for the whole App.\n2) Create a Host Fiber node for the rootElement DOM element.\n3) Link the Fiber root node with the host Fiber node, using the \"current\" pointer.\n\n![beforeMount](https://user-images.githubusercontent.com/51183663/211693577-4f9e384d-ff4e-414a-8d04-8792cc986bdc.png)\n\nDuring mounting, React will also create an alternative host Fiber node. \nThis is different from our existing one, as its child node is not null but a tree of Fiber nodes, which correspond to each React element listed in the app.\n\n![mounting](https://user-images.githubusercontent.com/51183663/211698358-9ab6c474-e979-4333-a59e-892d7453577d.png)\nThe alternative host Fiber node, along with its descendant Fiber nodes, is called the workInProgress (WIP) Fiber tree.\n\n<details><summary><b>Look at the above pic, you may wonder: Why two host root nodes? What is double buffering? </b></summary>\n<p>\n\nHere is an illustration from [game programming patterns](http://gameprogrammingpatterns.com/):\n> Imagine we are watching a play. \n> When scene 1 is finished, we will have a 5-minute scene transition, leaving the audience in dark and silence. This is normal in a real world theatre play. \n> But if we leave game players in a black screen for a few seconds, this may drive people nuts.\n\nIn both game programming and React, we hope to avoid this blank transition by a technique called [Double Buffering](http://gameprogrammingpatterns.com/double-buffer.html). \nBack to our theatre play example, we avoid the silent transition by running two stages (double buffering): \n- stage A is on show for the current scene \n- stage B is adjusting lights or removing/changing play props for the next scene\n\nOnce the current scene is finished on stage A, we immediately light on stage B to go to the next scene seamlessly. Now stage A is in dark preparing the next scene settings. \n\nSo in React, double buffering means switching between the current fiber tree and a workInProgress fiber tree for seamless transitions between rendering.\n\n---\n</p>\n</details>\n\nWe therefore have finished a simple tour about first time rendering in React.\n\n## References\n[1] [Double Buffering](http://gameprogrammingpatterns.com/double-buffer.html)\n[2] [Allegory of the Cave](https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler)\n","slug":"react-fiber-tree","published":1,"updated":"2023-03-24T22:22:31.343Z","_id":"cldwmqq0f00032epne7a5e0ys","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Plato said life is like being chained up in a cave, forced to watch shadows flitting across a stone wall.</p></blockquote>\n<p>We are not talking about philosophy today, but use <a href=\"https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler\">Allegory of the Cave</a> to describe the relationship between React applications and what is under the hood:</p>\n<p>React applications we see today are mainly results of the render phase and the commit phase.<br>Just like shadows in the eyes of prisoners are results of sun reflection and real world activities.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/209894263-18de7386-087f-4a0d-8418-dba2744d016d.png\" alt=\"allegory_cave_dark\"></p>\n<h3 id=\"What-is-under-the-hood\"><a href=\"#What-is-under-the-hood\" class=\"headerlink\" title=\"What is under the hood\"></a>What is under the hood</h3><p>Before we see any changes in an application, React does three things: Scheduling, Rendering and commit. What are these? In plain English, they are just:</p>\n<ul>\n<li>Scheduling 🗓️: schedule and manage tasks to run</li>\n<li>Render 🔎 🌲 🏁: figure out changes made in React applications</li>\n<li>Commit ☑️ : apply these changes to browser DOM</li>\n</ul>\n<p>To understand React, we will start from the render phase. To understand the render phase, we need to understand the React Fiber data structure.</p>\n<p>In this post, I will cover 2 topics about React Fiber:</p>\n<ul>\n<li>How does React create the first Fiber node?<ul>\n<li>What are the main properties of a Fiber node?</li>\n</ul>\n</li>\n<li>How does React build a Fiber Tree from the first Fiber node during mounting?</li>\n</ul>\n<h2 id=\"Inside-React-Reconciliation-Fiber-Trees\"><a href=\"#Inside-React-Reconciliation-Fiber-Trees\" class=\"headerlink\" title=\"Inside React Reconciliation: Fiber Trees\"></a>Inside React Reconciliation: Fiber Trees</h2><p>Frequent DOM manipulations are expensive for complicated web applications.<br>In this case, we had better only applies changes to the real DOM during state&#x2F;props updates.<br>But changes might spread all over the whole tree, to locate them, we can compare two versions (previous &amp; current) of a virtual DOM tree. This process is called Reconciliation in React.</p>\n<h3 id=\"Question-What-is-a-virtual-DOM-tree-called-in-React-18\"><a href=\"#Question-What-is-a-virtual-DOM-tree-called-in-React-18\" class=\"headerlink\" title=\"Question: What is a virtual DOM tree called in React 18?\"></a>Question: What is a virtual DOM tree called in React 18?</h3><p>Fiber tree, a singly linked list tree.<br>To understand Fiber tree, we can start from the most basic unit of it, a Fiber node.</p>\n<h2 id=\"How-does-React-generate-the-first-Fiber-node\"><a href=\"#How-does-React-generate-the-first-Fiber-node\" class=\"headerlink\" title=\"How does React generate the first Fiber node\"></a>How does React generate the first Fiber node</h2><p>A Fiber node is just a plain JavaScript object.<br>But it may be the object you have never seen before, since it is not exposed to React users.<br>Let us start from something we are familiar with—React Components.</p>\n<h3 id=\"React-Components-Elements-Fiber-Node\"><a href=\"#React-Components-Elements-Fiber-Node\" class=\"headerlink\" title=\"React Components, Elements, Fiber Node\"></a>React Components, Elements, Fiber Node</h3><p>The process of building a Fiber node is the process of converting React Component JSX &#x3D;&gt; a React Element &#x3D;&gt; a Fiber node. </p>\n<details><summary><b> JSX </b></summary>\n<p>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>A syntax extension to JavaScript that allows writing HTML in React components</p></blockquote>\n</p>\n</details>\n\n<details><summary><b> React Element </b></summary>\n<p>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>The smallest building blocks of React apps, describing what to render to a React UI environment</p></blockquote>\n</p>\n</details>\n\n<details><summary><b> Fiber node </b></summary>\n<p>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>A basic unit of work to locate or commit changes in React applications</p></blockquote>\n</p>\n</details>\n\n<h3 id=\"From-React-Component-to-React-Element\"><a href=\"#From-React-Component-to-React-Element\" class=\"headerlink\" title=\"From React Component to React Element\"></a>From React Component to React Element</h3><p>We know that React components return JSX. But what does JSX produces?</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            react\n            <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>\n                little by little\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>JSX produces React elements.<br>For example, App is a React component; &lt;App &#x2F; &gt; is a React element in the form of JSX.<br>If you put &lt;App &#x2F; &gt; into <a href=\"https://babeljs.io/repl\">Babel</a>, you will get:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*#__PURE__*/</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>It is just a JavaScript object:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n&#123;\ntype: ƒ App(), // e.g. functional component, or HTML tag type like div, p, h1\nkey: null, // e.g. keys you set up in a React component\nref: null,\nprops: &#123;&#125;, // e.g. React component props\n_store: &#123;&#125;,\n_owner: null,\n&#125;\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Take a closer look at this React Element object, and answer this question:</p>\n<details><summary><b>Can a React Element be the unit of work to do the Reconciliation job? </b></summary>\n<p>\n\n<p>No. For Reconciliation, a React element can be too static and isolated:</p>\n<ul>\n<li>Data stored in it is comparatively static. It mainly explains what this React element looks like.<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>For reconciliation, we need more dynamic data about its state&#x2F;effect changes or priority scheduling.</p></blockquote>\n</li>\n<li>It does not show connections with its children&#x2F;sibling&#x2F;parent Elements.<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>When we have finished processing it, we have no way to find the next unit of work.</p></blockquote>\n</li>\n</ul>\n<p>For reconciliation, we need an upgraded version of React Element. That is where Fiber node comes in.</p>\n</p>\n</details>\n\n<h3 id=\"From-React-Element-to-Fiber-node\"><a href=\"#From-React-Element-to-Fiber-node\" class=\"headerlink\" title=\"From React Element to Fiber node\"></a>From React Element to Fiber node</h3><p>We can create a Fiber root node for the React element &lt;App &#x2F; &gt;, by calling:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>To see what is inside a Fiber node (React 18.2.0), you can try this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> reactContainerKey <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// __reactContainer$cjvrzgbs4i4 </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">[</span>reactContainerKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fiber root node</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://user-images.githubusercontent.com/51183663/210151836-ae932fd9-cfbe-424d-85db-f3c9882cd11c.png\" alt=\"fiber_node_log\"><br>To make it easier to understand, I break down properties of a Fiber node object into 4 parts:</p>\n<ul>\n<li>Basic Fiber node info</li>\n<li>Tree pointers</li>\n<li>Effect &amp; reconciliation</li>\n<li>Scheduling</li>\n</ul>\n<p>Here is a cheatsheet for a React Fiber node:</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/212479942-a25a466e-a095-4409-9f9e-70c20139f918.png\" alt=\"fiber_node\"></p>\n<p>At this moment, just take a glimpse at this Fiber node.<br>Knowing it also tells something about Reconciliation, Scheduling and its neighbor nodes is enough at this moment. </p>\n<h2 id=\"How-does-React-build-a-Fiber-tree-from-the-Fiber-root-node\"><a href=\"#How-does-React-build-a-Fiber-tree-from-the-Fiber-root-node\" class=\"headerlink\" title=\"How does React build a Fiber tree from the Fiber root node?\"></a>How does React build a Fiber tree from the Fiber root node?</h2><p>Now we have created a Fiber root node.<br>Before mount (first time rendering), React does three things:</p>\n<ol>\n<li>Create a Fiber root node for the whole App.</li>\n<li>Create a Host Fiber node for the rootElement DOM element.</li>\n<li>Link the Fiber root node with the host Fiber node, using the “current” pointer.</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/211693577-4f9e384d-ff4e-414a-8d04-8792cc986bdc.png\" alt=\"beforeMount\"></p>\n<p>During mounting, React will also create an alternative host Fiber node.<br>This is different from our existing one, as its child node is not null but a tree of Fiber nodes, which correspond to each React element listed in the app.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/211698358-9ab6c474-e979-4333-a59e-892d7453577d.png\" alt=\"mounting\"><br>The alternative host Fiber node, along with its descendant Fiber nodes, is called the workInProgress (WIP) Fiber tree.</p>\n<details><summary><b>Look at the above pic, you may wonder: Why two host root nodes? What is double buffering? </b></summary>\n<p>\n\n<p>Here is an illustration from <a href=\"http://gameprogrammingpatterns.com/\">game programming patterns</a>:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Imagine we are watching a play.<br>When scene 1 is finished, we will have a 5-minute scene transition, leaving the audience in dark and silence. This is normal in a real world theatre play.<br>But if we leave game players in a black screen for a few seconds, this may drive people nuts.</p></blockquote>\n<p>In both game programming and React, we hope to avoid this blank transition by a technique called <a href=\"http://gameprogrammingpatterns.com/double-buffer.html\">Double Buffering</a>.<br>Back to our theatre play example, we avoid the silent transition by running two stages (double buffering): </p>\n<ul>\n<li>stage A is on show for the current scene </li>\n<li>stage B is adjusting lights or removing&#x2F;changing play props for the next scene</li>\n</ul>\n<p>Once the current scene is finished on stage A, we immediately light on stage B to go to the next scene seamlessly. Now stage A is in dark preparing the next scene settings. </p>\n<p>So in React, double buffering means switching between the current fiber tree and a workInProgress fiber tree for seamless transitions between rendering.</p>\n<hr>\n</p>\n</details>\n\n<p>We therefore have finished a simple tour about first time rendering in React.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[1] <a href=\"http://gameprogrammingpatterns.com/double-buffer.html\">Double Buffering</a><br>[2] <a href=\"https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler\">Allegory of the Cave</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Plato said life is like being chained up in a cave, forced to watch shadows flitting across a stone wall.</p>\n</blockquote>\n<p>We are not talking about philosophy today, but use <a href=\"https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler\">Allegory of the Cave</a> to describe the relationship between React applications and what is under the hood:</p>\n<p>React applications we see today are mainly results of the render phase and the commit phase.<br>Just like shadows in the eyes of prisoners are results of sun reflection and real world activities.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/209894263-18de7386-087f-4a0d-8418-dba2744d016d.png\" alt=\"allegory_cave_dark\"></p>\n<h3 id=\"What-is-under-the-hood\"><a href=\"#What-is-under-the-hood\" class=\"headerlink\" title=\"What is under the hood\"></a>What is under the hood</h3><p>Before we see any changes in an application, React does three things: Scheduling, Rendering and commit. What are these? In plain English, they are just:</p>\n<ul>\n<li>Scheduling 🗓️: schedule and manage tasks to run</li>\n<li>Render 🔎 🌲 🏁: figure out changes made in React applications</li>\n<li>Commit ☑️ : apply these changes to browser DOM</li>\n</ul>\n<p>To understand React, we will start from the render phase. To understand the render phase, we need to understand the React Fiber data structure.</p>\n<p>In this post, I will cover 2 topics about React Fiber:</p>\n<ul>\n<li>How does React create the first Fiber node?<ul>\n<li>What are the main properties of a Fiber node?</li>\n</ul>\n</li>\n<li>How does React build a Fiber Tree from the first Fiber node during mounting?</li>\n</ul>\n<h2 id=\"Inside-React-Reconciliation-Fiber-Trees\"><a href=\"#Inside-React-Reconciliation-Fiber-Trees\" class=\"headerlink\" title=\"Inside React Reconciliation: Fiber Trees\"></a>Inside React Reconciliation: Fiber Trees</h2><p>Frequent DOM manipulations are expensive for complicated web applications.<br>In this case, we had better only applies changes to the real DOM during state&#x2F;props updates.<br>But changes might spread all over the whole tree, to locate them, we can compare two versions (previous &amp; current) of a virtual DOM tree. This process is called Reconciliation in React.</p>\n<h3 id=\"Question-What-is-a-virtual-DOM-tree-called-in-React-18\"><a href=\"#Question-What-is-a-virtual-DOM-tree-called-in-React-18\" class=\"headerlink\" title=\"Question: What is a virtual DOM tree called in React 18?\"></a>Question: What is a virtual DOM tree called in React 18?</h3><p>Fiber tree, a singly linked list tree.<br>To understand Fiber tree, we can start from the most basic unit of it, a Fiber node.</p>\n<h2 id=\"How-does-React-generate-the-first-Fiber-node\"><a href=\"#How-does-React-generate-the-first-Fiber-node\" class=\"headerlink\" title=\"How does React generate the first Fiber node\"></a>How does React generate the first Fiber node</h2><p>A Fiber node is just a plain JavaScript object.<br>But it may be the object you have never seen before, since it is not exposed to React users.<br>Let us start from something we are familiar with—React Components.</p>\n<h3 id=\"React-Components-Elements-Fiber-Node\"><a href=\"#React-Components-Elements-Fiber-Node\" class=\"headerlink\" title=\"React Components, Elements, Fiber Node\"></a>React Components, Elements, Fiber Node</h3><p>The process of building a Fiber node is the process of converting React Component JSX &#x3D;&gt; a React Element &#x3D;&gt; a Fiber node. </p>\n<details><summary><b> JSX </b></summary>\n<p>\n\n<blockquote>\n<p>A syntax extension to JavaScript that allows writing HTML in React components</p>\n</blockquote>\n</p>\n</details>\n\n<details><summary><b> React Element </b></summary>\n<p>\n\n<blockquote>\n<p>The smallest building blocks of React apps, describing what to render to a React UI environment</p>\n</blockquote>\n</p>\n</details>\n\n<details><summary><b> Fiber node </b></summary>\n<p>\n\n<blockquote>\n<p>A basic unit of work to locate or commit changes in React applications</p>\n</blockquote>\n</p>\n</details>\n\n<h3 id=\"From-React-Component-to-React-Element\"><a href=\"#From-React-Component-to-React-Element\" class=\"headerlink\" title=\"From React Component to React Element\"></a>From React Component to React Element</h3><p>We know that React components return JSX. But what does JSX produces?</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            react\n            <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>\n                little by little\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>JSX produces React elements.<br>For example, App is a React component; &lt;App &#x2F; &gt; is a React element in the form of JSX.<br>If you put &lt;App &#x2F; &gt; into <a href=\"https://babeljs.io/repl\">Babel</a>, you will get:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*#__PURE__*/</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>It is just a JavaScript object:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n&#123;\ntype: ƒ App(), // e.g. functional component, or HTML tag type like div, p, h1\nkey: null, // e.g. keys you set up in a React component\nref: null,\nprops: &#123;&#125;, // e.g. React component props\n_store: &#123;&#125;,\n_owner: null,\n&#125;\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Take a closer look at this React Element object, and answer this question:</p>\n<details><summary><b>Can a React Element be the unit of work to do the Reconciliation job? </b></summary>\n<p>\n\n<p>No. For Reconciliation, a React element can be too static and isolated:</p>\n<ul>\n<li>Data stored in it is comparatively static. It mainly explains what this React element looks like.<blockquote>\n<p>For reconciliation, we need more dynamic data about its state&#x2F;effect changes or priority scheduling.</p>\n</blockquote>\n</li>\n<li>It does not show connections with its children&#x2F;sibling&#x2F;parent Elements.<blockquote>\n<p>When we have finished processing it, we have no way to find the next unit of work.</p>\n</blockquote>\n</li>\n</ul>\n<p>For reconciliation, we need an upgraded version of React Element. That is where Fiber node comes in.</p>\n</p>\n</details>\n\n<h3 id=\"From-React-Element-to-Fiber-node\"><a href=\"#From-React-Element-to-Fiber-node\" class=\"headerlink\" title=\"From React Element to Fiber node\"></a>From React Element to Fiber node</h3><p>We can create a Fiber root node for the React element &lt;App &#x2F; &gt;, by calling:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>To see what is inside a Fiber node (React 18.2.0), you can try this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> reactContainerKey <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// __reactContainer$cjvrzgbs4i4 </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">[</span>reactContainerKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fiber root node</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://user-images.githubusercontent.com/51183663/210151836-ae932fd9-cfbe-424d-85db-f3c9882cd11c.png\" alt=\"fiber_node_log\"><br>To make it easier to understand, I break down properties of a Fiber node object into 4 parts:</p>\n<ul>\n<li>Basic Fiber node info</li>\n<li>Tree pointers</li>\n<li>Effect &amp; reconciliation</li>\n<li>Scheduling</li>\n</ul>\n<p>Here is a cheatsheet for a React Fiber node:</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/212479942-a25a466e-a095-4409-9f9e-70c20139f918.png\" alt=\"fiber_node\"></p>\n<p>At this moment, just take a glimpse at this Fiber node.<br>Knowing it also tells something about Reconciliation, Scheduling and its neighbor nodes is enough at this moment. </p>\n<h2 id=\"How-does-React-build-a-Fiber-tree-from-the-Fiber-root-node\"><a href=\"#How-does-React-build-a-Fiber-tree-from-the-Fiber-root-node\" class=\"headerlink\" title=\"How does React build a Fiber tree from the Fiber root node?\"></a>How does React build a Fiber tree from the Fiber root node?</h2><p>Now we have created a Fiber root node.<br>Before mount (first time rendering), React does three things:</p>\n<ol>\n<li>Create a Fiber root node for the whole App.</li>\n<li>Create a Host Fiber node for the rootElement DOM element.</li>\n<li>Link the Fiber root node with the host Fiber node, using the “current” pointer.</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/211693577-4f9e384d-ff4e-414a-8d04-8792cc986bdc.png\" alt=\"beforeMount\"></p>\n<p>During mounting, React will also create an alternative host Fiber node.<br>This is different from our existing one, as its child node is not null but a tree of Fiber nodes, which correspond to each React element listed in the app.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/211698358-9ab6c474-e979-4333-a59e-892d7453577d.png\" alt=\"mounting\"><br>The alternative host Fiber node, along with its descendant Fiber nodes, is called the workInProgress (WIP) Fiber tree.</p>\n<details><summary><b>Look at the above pic, you may wonder: Why two host root nodes? What is double buffering? </b></summary>\n<p>\n\n<p>Here is an illustration from <a href=\"http://gameprogrammingpatterns.com/\">game programming patterns</a>:</p>\n<blockquote>\n<p>Imagine we are watching a play.<br>When scene 1 is finished, we will have a 5-minute scene transition, leaving the audience in dark and silence. This is normal in a real world theatre play.<br>But if we leave game players in a black screen for a few seconds, this may drive people nuts.</p>\n</blockquote>\n<p>In both game programming and React, we hope to avoid this blank transition by a technique called <a href=\"http://gameprogrammingpatterns.com/double-buffer.html\">Double Buffering</a>.<br>Back to our theatre play example, we avoid the silent transition by running two stages (double buffering): </p>\n<ul>\n<li>stage A is on show for the current scene </li>\n<li>stage B is adjusting lights or removing&#x2F;changing play props for the next scene</li>\n</ul>\n<p>Once the current scene is finished on stage A, we immediately light on stage B to go to the next scene seamlessly. Now stage A is in dark preparing the next scene settings. </p>\n<p>So in React, double buffering means switching between the current fiber tree and a workInProgress fiber tree for seamless transitions between rendering.</p>\n<hr>\n</p>\n</details>\n\n<p>We therefore have finished a simple tour about first time rendering in React.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[1] <a href=\"http://gameprogrammingpatterns.com/double-buffer.html\">Double Buffering</a><br>[2] <a href=\"https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler\">Allegory of the Cave</a></p>\n"},{"title":"Trie based router","date":"2022-12-21T18:04:15.000Z","_content":"## Why trie based router\nIf you do not have performance issues, adopting a trie based router might become a premature optimization. In this case, Regex based routing is fast enough, as Regex are compiled down to native code in modern browsers, like Chrome.\n\nHowever, if you feel tradition MVC routing results in performance pressure on your web App, you can take a look at trie based router. Here is an [example](https://ayende.com/blog/173313/trie-based-routing) from Ayende Rahien.   \n> Traditional MVC routing infrastructure can consume a significant amount of time,\nleaving little time for handling actual requests.\nBy using a trie based router, it is possible to reduce time spent on routing infrastructure,\nand increase time spent on actual request handling.\n\n## How to implement Router trie\nA route mainly does two things: registering a route with a function; matching a route.\nHere we use trie to register and match routes.\n### 1. Register a route\nFirst, split the route into an array of routes.\ne.g. \"/courses/:id\" => [\"courses\", \":id\"]\n```javascript\nconst add = (route) => {\n    if (typeof route !== 'string') {\n        throw TypeError('route should be string');\n    }\n    this.currentRoutes = splitRoute(route);\n    return this.createTrieNode(0, this.trie);\n}\n```\nNext, recursively add each segment of the route array to our trie.\n- 1/ Handle \":\" for dynamic values, \"*\" for wildcard (any value)\n- 2/ If a segment is found in our trie, check the next one\n  - \"courses\" is shared in the trie, if we have both courses/:id and courses/ranking \n- 3/ If not found, create a trie node for this segment \n```javascript\nconst createTrieNode = (index, trie) => {\n    const thisRoute = this.currentRoutes[index];\n    if (thisRoute === undefined) return trie;\n        \n    let node = null;\n    if (HAS_SPECIAL_SYMBOL) {\n        handleSpecialSymbol();\n    } else if (trie.nodes.has(thisRoute)) {\n        node = trie.nodes[thisRoute];\n    } else {\n        node = this.createNewNodes();\n        trie.nodes[thisRoute] = node;     \n    }\n\n    return this.createTrieNode(index + 1, node);\n}\n```\n### 2. Match a route\nLogics for match() a route is quite similar to add().\nThe main difference is in match() we also handle params for a route (if found).\n```javascript\nconst match = (route) => {\n    this.currentRoutes = splitRoute(route);\n    this.currentParams = {};\n        \n    const node = search(0, this.trie);\n    if (!node) return undefined;\n        \n    node = new Map(node);\n    node.params = this.currentParams;\n    return node;\n}\n```\nWhat does search() do?\nIf a node is found, search() recursively calls itself, with the next segment and the matching node as arguments.\n```javascript\nconst search = (index, trie) => {\n    if (trie === undefined) return trie;\n    const thisRoute = this.currentRoutes[index];\n    if (thisRoute === undefined) return trie;\n\n    if (trie.nodes.has(thisRoute)) {\n        return search(index + 1, trie.nodes[thisRoute]);\n    }\n\n    if (trie.name) {\n        // add params\n    }\n\n    if (trie.wildCard) {\n        // add params\n    }\n\n    return search(index + 1);\n}\n```\nFor full implementation, check [here](https://github.com/choojs/wayfarer/blob/master/trie.js).\n\n### References\n\n[1] [Trie based routing, Ayende Rahien](https://ayende.com/blog/173313/trie-based-routing)\n[2] [A composable trie based router, Wayfarer](https://github.com/choojs/wayfarer/blob/master/trie.js)\n[3] [Trie based routing instead of Regex based routing, React router](https://github.com/remix-run/react-router/issues/6627)\n","source":"_posts/dsa_for_web_trie_router.md","raw":"---\ntitle: Trie based router\ndate: 2022-12-21 13:04:15\ntag: DSA for web dev\n---\n## Why trie based router\nIf you do not have performance issues, adopting a trie based router might become a premature optimization. In this case, Regex based routing is fast enough, as Regex are compiled down to native code in modern browsers, like Chrome.\n\nHowever, if you feel tradition MVC routing results in performance pressure on your web App, you can take a look at trie based router. Here is an [example](https://ayende.com/blog/173313/trie-based-routing) from Ayende Rahien.   \n> Traditional MVC routing infrastructure can consume a significant amount of time,\nleaving little time for handling actual requests.\nBy using a trie based router, it is possible to reduce time spent on routing infrastructure,\nand increase time spent on actual request handling.\n\n## How to implement Router trie\nA route mainly does two things: registering a route with a function; matching a route.\nHere we use trie to register and match routes.\n### 1. Register a route\nFirst, split the route into an array of routes.\ne.g. \"/courses/:id\" => [\"courses\", \":id\"]\n```javascript\nconst add = (route) => {\n    if (typeof route !== 'string') {\n        throw TypeError('route should be string');\n    }\n    this.currentRoutes = splitRoute(route);\n    return this.createTrieNode(0, this.trie);\n}\n```\nNext, recursively add each segment of the route array to our trie.\n- 1/ Handle \":\" for dynamic values, \"*\" for wildcard (any value)\n- 2/ If a segment is found in our trie, check the next one\n  - \"courses\" is shared in the trie, if we have both courses/:id and courses/ranking \n- 3/ If not found, create a trie node for this segment \n```javascript\nconst createTrieNode = (index, trie) => {\n    const thisRoute = this.currentRoutes[index];\n    if (thisRoute === undefined) return trie;\n        \n    let node = null;\n    if (HAS_SPECIAL_SYMBOL) {\n        handleSpecialSymbol();\n    } else if (trie.nodes.has(thisRoute)) {\n        node = trie.nodes[thisRoute];\n    } else {\n        node = this.createNewNodes();\n        trie.nodes[thisRoute] = node;     \n    }\n\n    return this.createTrieNode(index + 1, node);\n}\n```\n### 2. Match a route\nLogics for match() a route is quite similar to add().\nThe main difference is in match() we also handle params for a route (if found).\n```javascript\nconst match = (route) => {\n    this.currentRoutes = splitRoute(route);\n    this.currentParams = {};\n        \n    const node = search(0, this.trie);\n    if (!node) return undefined;\n        \n    node = new Map(node);\n    node.params = this.currentParams;\n    return node;\n}\n```\nWhat does search() do?\nIf a node is found, search() recursively calls itself, with the next segment and the matching node as arguments.\n```javascript\nconst search = (index, trie) => {\n    if (trie === undefined) return trie;\n    const thisRoute = this.currentRoutes[index];\n    if (thisRoute === undefined) return trie;\n\n    if (trie.nodes.has(thisRoute)) {\n        return search(index + 1, trie.nodes[thisRoute]);\n    }\n\n    if (trie.name) {\n        // add params\n    }\n\n    if (trie.wildCard) {\n        // add params\n    }\n\n    return search(index + 1);\n}\n```\nFor full implementation, check [here](https://github.com/choojs/wayfarer/blob/master/trie.js).\n\n### References\n\n[1] [Trie based routing, Ayende Rahien](https://ayende.com/blog/173313/trie-based-routing)\n[2] [A composable trie based router, Wayfarer](https://github.com/choojs/wayfarer/blob/master/trie.js)\n[3] [Trie based routing instead of Regex based routing, React router](https://github.com/remix-run/react-router/issues/6627)\n","slug":"dsa_for_web_trie_router","published":1,"updated":"2023-02-09T03:15:05.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldwmqq0g00042epn87mo9kch","content":"<h2 id=\"Why-trie-based-router\"><a href=\"#Why-trie-based-router\" class=\"headerlink\" title=\"Why trie based router\"></a>Why trie based router</h2><p>If you do not have performance issues, adopting a trie based router might become a premature optimization. In this case, Regex based routing is fast enough, as Regex are compiled down to native code in modern browsers, like Chrome.</p>\n<p>However, if you feel tradition MVC routing results in performance pressure on your web App, you can take a look at trie based router. Here is an <a href=\"https://ayende.com/blog/173313/trie-based-routing\">example</a> from Ayende Rahien.   </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Traditional MVC routing infrastructure can consume a significant amount of time,<br>leaving little time for handling actual requests.<br>By using a trie based router, it is possible to reduce time spent on routing infrastructure,<br>and increase time spent on actual request handling.</p></blockquote>\n<h2 id=\"How-to-implement-Router-trie\"><a href=\"#How-to-implement-Router-trie\" class=\"headerlink\" title=\"How to implement Router trie\"></a>How to implement Router trie</h2><p>A route mainly does two things: registering a route with a function; matching a route.<br>Here we use trie to register and match routes.</p>\n<h3 id=\"1-Register-a-route\"><a href=\"#1-Register-a-route\" class=\"headerlink\" title=\"1. Register a route\"></a>1. Register a route</h3><p>First, split the route into an array of routes.<br>e.g. “&#x2F;courses&#x2F;:id” &#x3D;&gt; [“courses”, “:id”]</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> route <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'route should be string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes <span class=\"token operator\">=</span> <span class=\"token function\">splitRoute</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTrieNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>trie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Next, recursively add each segment of the route array to our trie.</p>\n<ul>\n<li>1&#x2F; Handle “:” for dynamic values, “*” for wildcard (any value)</li>\n<li>2&#x2F; If a segment is found in our trie, check the next one<ul>\n<li>“courses” is shared in the trie, if we have both courses&#x2F;:id and courses&#x2F;ranking</li>\n</ul>\n</li>\n<li>3&#x2F; If not found, create a trie node for this segment <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createTrieNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> trie</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> thisRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thisRoute <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> trie<span class=\"token punctuation\">;</span>\n        \n    <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">HAS_SPECIAL_SYMBOL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">handleSpecialSymbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>thisRoute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        node <span class=\"token operator\">=</span> trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>thisRoute<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createNewNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>thisRoute<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>     \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTrieNode</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"2-Match-a-route\"><a href=\"#2-Match-a-route\" class=\"headerlink\" title=\"2. Match a route\"></a>2. Match a route</h3><p>Logics for match() a route is quite similar to add().<br>The main difference is in match() we also handle params for a route (if found).</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">match</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes <span class=\"token operator\">=</span> <span class=\"token function\">splitRoute</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentParams <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>trie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n        \n    node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentParams<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>What does search() do?<br>If a node is found, search() recursively calls itself, with the next segment and the matching node as arguments.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> trie</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> trie<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> thisRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thisRoute <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> trie<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>thisRoute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>thisRoute<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// add params</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>wildCard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// add params</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>For full implementation, check <a href=\"https://github.com/choojs/wayfarer/blob/master/trie.js\">here</a>.</p>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p>[1] <a href=\"https://ayende.com/blog/173313/trie-based-routing\">Trie based routing, Ayende Rahien</a><br>[2] <a href=\"https://github.com/choojs/wayfarer/blob/master/trie.js\">A composable trie based router, Wayfarer</a><br>[3] <a href=\"https://github.com/remix-run/react-router/issues/6627\">Trie based routing instead of Regex based routing, React router</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Why-trie-based-router\"><a href=\"#Why-trie-based-router\" class=\"headerlink\" title=\"Why trie based router\"></a>Why trie based router</h2><p>If you do not have performance issues, adopting a trie based router might become a premature optimization. In this case, Regex based routing is fast enough, as Regex are compiled down to native code in modern browsers, like Chrome.</p>\n<p>However, if you feel tradition MVC routing results in performance pressure on your web App, you can take a look at trie based router. Here is an <a href=\"https://ayende.com/blog/173313/trie-based-routing\">example</a> from Ayende Rahien.   </p>\n<blockquote>\n<p>Traditional MVC routing infrastructure can consume a significant amount of time,<br>leaving little time for handling actual requests.<br>By using a trie based router, it is possible to reduce time spent on routing infrastructure,<br>and increase time spent on actual request handling.</p>\n</blockquote>\n<h2 id=\"How-to-implement-Router-trie\"><a href=\"#How-to-implement-Router-trie\" class=\"headerlink\" title=\"How to implement Router trie\"></a>How to implement Router trie</h2><p>A route mainly does two things: registering a route with a function; matching a route.<br>Here we use trie to register and match routes.</p>\n<h3 id=\"1-Register-a-route\"><a href=\"#1-Register-a-route\" class=\"headerlink\" title=\"1. Register a route\"></a>1. Register a route</h3><p>First, split the route into an array of routes.<br>e.g. “&#x2F;courses&#x2F;:id” &#x3D;&gt; [“courses”, “:id”]</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> route <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'route should be string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes <span class=\"token operator\">=</span> <span class=\"token function\">splitRoute</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTrieNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>trie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Next, recursively add each segment of the route array to our trie.</p>\n<ul>\n<li>1&#x2F; Handle “:” for dynamic values, “*” for wildcard (any value)</li>\n<li>2&#x2F; If a segment is found in our trie, check the next one<ul>\n<li>“courses” is shared in the trie, if we have both courses&#x2F;:id and courses&#x2F;ranking</li>\n</ul>\n</li>\n<li>3&#x2F; If not found, create a trie node for this segment <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createTrieNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> trie</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> thisRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thisRoute <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> trie<span class=\"token punctuation\">;</span>\n        \n    <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">HAS_SPECIAL_SYMBOL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">handleSpecialSymbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>thisRoute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        node <span class=\"token operator\">=</span> trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>thisRoute<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createNewNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>thisRoute<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>     \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTrieNode</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"2-Match-a-route\"><a href=\"#2-Match-a-route\" class=\"headerlink\" title=\"2. Match a route\"></a>2. Match a route</h3><p>Logics for match() a route is quite similar to add().<br>The main difference is in match() we also handle params for a route (if found).</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">match</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes <span class=\"token operator\">=</span> <span class=\"token function\">splitRoute</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentParams <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>trie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n        \n    node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentParams<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>What does search() do?<br>If a node is found, search() recursively calls itself, with the next segment and the matching node as arguments.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> trie</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> trie<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> thisRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thisRoute <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> trie<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>thisRoute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>thisRoute<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// add params</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>wildCard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// add params</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>For full implementation, check <a href=\"https://github.com/choojs/wayfarer/blob/master/trie.js\">here</a>.</p>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p>[1] <a href=\"https://ayende.com/blog/173313/trie-based-routing\">Trie based routing, Ayende Rahien</a><br>[2] <a href=\"https://github.com/choojs/wayfarer/blob/master/trie.js\">A composable trie based router, Wayfarer</a><br>[3] <a href=\"https://github.com/remix-run/react-router/issues/6627\">Trie based routing instead of Regex based routing, React router</a></p>\n"},{"title":"React Source Code Little by Little 3 - Render Phase","date":"2023-01-13T13:41:00.000Z","_content":"## Recap: Time Sliced Work Loop\nFrom the [time slicing](https://flaming-cl.github.io/post/time-slicing-react) post, we have known React implements an interruptible render phase by a conditional while loop: once <abbr>shouldYield</abbr> turns True, the current reconciliation job can be paused, leaving the main thread to more prioritized jobs, like a user event.\n```js\nfunction workLoop(deadline) {\n    let shouldYield = false\n    while (workInProgress !== null && !shouldYield) {\n        // next workInprogress is set within performUnitOfWork\n        performUnitOfWork(\n            workInProgress \n        )\n        shouldYield = deadline.timeRemaining() < 1\n    }\n    requestIdleCallback(workLoop)\n}\n```\nToday we are going to talk about the render phase of React, which is implemented via <abbr>performUnitOfWork</abbr> inside each work loop.\n<details><summary><b>Question: Do you think where we should put our code for the commit phase?</b></summary>\n<p>\nWe should put it outside the breakable while loop.      \nThis is because the commit phase can not be paused: we do not want to see our App rendered with some half updated states.\n\n```js\nfunction workLoop(deadline) {\n    let shouldYield = false\n    while (workInProgress !== null && !shouldYield) {\n        performUnitOfWork(\n            workInProgress\n        )\n        shouldYield = deadline.timeRemaining() < 1\n    }\n    commitWork(); // the commit phase\n    requestIdleCallback(workLoop)\n}\n```\n</p>\n</details>\n\n---\n\n## The Render Phase\n<abbr>PerformUnitOfWork</abbr> (the render phase) mainly does two things: beginWork and completeWork. Its code could be written like this:\n```javascript\nlet workInProgress = null;\n\nfunction performUnitOfWork(fiber: FiberNode) {\n    const next = beginWork(fiber);\n    fiber.memorizedProps = fiber.pendingProps;\n\n    if (next === null) {\n        completeUnitOfWork(fiber);\n    } else {\n        workInProgress = next;\n    }\n}\n```\n### An Overview of PerformUnitOfWork\nBefore understanding key responsibilities of <abbr>performUnitOfWork</abbr>, we first have an overview about how React calls <abbr>performUnitOfWork</abbr> to reconcile a Fiber tree.\n\n![punitofwork](https://user-images.githubusercontent.com/51183663/213318797-f18c1fa2-6c65-4ed7-aa29-bd7eea58ff9e.png)\n\n### beginWork\n### What does beginWork do?\nEach time, <abbr>performUnitOfWork</abbr> calls <abbr>beginWork</abbr> with the WIP (work in progress) fiber node to do the reconciliation job and return a reconciled child Fiber node (return null if no child). \n### Execution order of beginWork calls\n\n  The execution order of beginWork calls is similar to a preorder traversal of a tree, like succession to a monarchy's throne:\n  \n  > 1st kid ➡ 1st grandchildren ➡ 1st great-grandchildren ➡ ... ➡ the 1st no-kid offspring\n  > ➡ second in line sibling ➡ 1st kid of second in line sibling ➡ ...\n\n  <details><summary><b>True or False: The 1st Fiber node enters <abbr>completeWork</abbr> is the deepest node in a Fiber tree. </b></summary>\n          <p>\n          False. The first Fiber node enters <abbr>completeWork</abbr> is the left most leaf node in an App.\n          </p>\n  </details>   \n\n### After beginWork\nWhen <abbr>beginWork</abbr> finishes its work, we update the current props in the Fiber node.\nThe next step depends on whether the current Fiber node has a child node:\n- child ✅, <abbr>performUnitOfWork</abbr> will pass the child to the next <abbr>performUnitOfWork</abbr> call.\n- child ❌, <abbr>performUnitOfWork</abbr> will leave the current node to <abbr>completeUnitOfWork</abbr>.\n\n### completeUnitOfWork\nThen, <abbr>performUnitOfWork</abbr> calls <abbr>completeUnitOfWork</abbr>:\n```js\nfunction completeUnitOfWork(fiber: FiberNode) {\n    let node: FiberNode | null = fiber;\n\n    do {\n        completeWork(node); \n        const sibling = node.sibling;\n\n        if (sibling !== null) {\n            workInProgress = sibling;\n            return;\n        }\n\n        node = node.return;\n        workInProgress = node;\n    } while (node !== null);\n}\n```\nInside <abbr>completeUnitOfWork</abbr>, we first call <abbr>completeWork</abbr> to create a DOM instance for the WIP fiber node and handle its effects/flags. After that, the while loop has 3 options:\n- Option 1, the WIP node has a sibling node ✅: <abbr>beginWork(sibling)</abbr>\n- Option 2, sibling node ❌ , parent node ✅ : <abbr>completeWork(parent)</abbr>\n- Option 3, sibling node ❌ , parent node ❌ : stop the work loop \n  \n### Test your understanding\nNow we have had an overview of the reconciliation work loop.\nTo test how you understand what we have learned, give it a whirl on the following question.\n```javascript\nconst App = () => {\n    return (\n        <div>\n            react\n            <span>\n                little by little\n            </span>\n        </div>\n    )\n}\nReactDOM.createRoot(rootElement).render(<App />);\n```\n<summary>\n<b>Question: Please list all the beginWork and completeWork calls of this App during a render phase in sequence.</b>\nFor example, 1. beginWork(hostFiberRoot) 2. beginWork(App) 3. beginWork(div)\n</summary>\n\n\n![render_path](https://user-images.githubusercontent.com/51183663/212486682-a1a58b17-0206-419a-9d7c-945eb9918afc.png)\n\n\n\nNote: DIV is a host component. \"little by little\" is a text component.\n\n### Interview Trick\nYou may wonder why we spend so much time on a general understanding of the render phase. By understanding it, you can solve many interview questions on the rendering path of an APP.\n\nLet us look at an interview question:\n```javascript\nimport React, { useEffect } from \"react\";\n\nfunction A() {\n  useEffect(() => {\n    console.log(\"Mount A\");\n  }, []);\n  console.log(\"A\");\n  return <B />;\n}\n\nfunction B() {\n  useEffect(() => {\n    console.log(\"Mount B\");\n  }, []);\n  console.log(\"B\");\n  return <C />;\n}\n\nfunction C() {\n  useEffect(() => {\n    console.log(\"Mount C\");\n  }, []);\n  console.log(\"C\");\n  return null;\n}\n\nfunction D() {\n  useEffect(() => {\n    console.log(\"Mount D\");\n  }, []);\n  console.log(\"D\");\n  return null;\n}\n\nfunction App() {\n  useEffect(() => {\n    console.log(\"Mount App\");\n  }, []);\n  console.log(\"App\");\n  return (\n    <div>\n      <A />\n      <D />\n    </div>\n  );\n}\n\nexport default App;\n```\n### What does the above code snippet output by calling console.log?\n\n```\nApp    \nA    \nB    \nC    \nD     \nMount C    \nMount B     \nMount A    \nMount D   \nMount App  \n```\n\n- Console.log(\"X\") is called when we enter a component. \n> Orders of entering a component are the same as how we call beginWork (like a preorder traversal).\n- Console.log(\"Mount X\") inside useEffect(() => {}, []) is called after a component is rendered. \n> Orders of rendering a component are the same as how we call completeWork (like a postorder traversal).\n\n\nBut can you tell the reasons for your answer? It is time to take a closer look at beginWork and completeWork.\n","source":"_posts/react-render-phase.md","raw":"---\ntitle: React Source Code Little by Little 3 - Render Phase\ndate: 2023-01-13 08:41:00\ntags: React\n---\n## Recap: Time Sliced Work Loop\nFrom the [time slicing](https://flaming-cl.github.io/post/time-slicing-react) post, we have known React implements an interruptible render phase by a conditional while loop: once <abbr>shouldYield</abbr> turns True, the current reconciliation job can be paused, leaving the main thread to more prioritized jobs, like a user event.\n```js\nfunction workLoop(deadline) {\n    let shouldYield = false\n    while (workInProgress !== null && !shouldYield) {\n        // next workInprogress is set within performUnitOfWork\n        performUnitOfWork(\n            workInProgress \n        )\n        shouldYield = deadline.timeRemaining() < 1\n    }\n    requestIdleCallback(workLoop)\n}\n```\nToday we are going to talk about the render phase of React, which is implemented via <abbr>performUnitOfWork</abbr> inside each work loop.\n<details><summary><b>Question: Do you think where we should put our code for the commit phase?</b></summary>\n<p>\nWe should put it outside the breakable while loop.      \nThis is because the commit phase can not be paused: we do not want to see our App rendered with some half updated states.\n\n```js\nfunction workLoop(deadline) {\n    let shouldYield = false\n    while (workInProgress !== null && !shouldYield) {\n        performUnitOfWork(\n            workInProgress\n        )\n        shouldYield = deadline.timeRemaining() < 1\n    }\n    commitWork(); // the commit phase\n    requestIdleCallback(workLoop)\n}\n```\n</p>\n</details>\n\n---\n\n## The Render Phase\n<abbr>PerformUnitOfWork</abbr> (the render phase) mainly does two things: beginWork and completeWork. Its code could be written like this:\n```javascript\nlet workInProgress = null;\n\nfunction performUnitOfWork(fiber: FiberNode) {\n    const next = beginWork(fiber);\n    fiber.memorizedProps = fiber.pendingProps;\n\n    if (next === null) {\n        completeUnitOfWork(fiber);\n    } else {\n        workInProgress = next;\n    }\n}\n```\n### An Overview of PerformUnitOfWork\nBefore understanding key responsibilities of <abbr>performUnitOfWork</abbr>, we first have an overview about how React calls <abbr>performUnitOfWork</abbr> to reconcile a Fiber tree.\n\n![punitofwork](https://user-images.githubusercontent.com/51183663/213318797-f18c1fa2-6c65-4ed7-aa29-bd7eea58ff9e.png)\n\n### beginWork\n### What does beginWork do?\nEach time, <abbr>performUnitOfWork</abbr> calls <abbr>beginWork</abbr> with the WIP (work in progress) fiber node to do the reconciliation job and return a reconciled child Fiber node (return null if no child). \n### Execution order of beginWork calls\n\n  The execution order of beginWork calls is similar to a preorder traversal of a tree, like succession to a monarchy's throne:\n  \n  > 1st kid ➡ 1st grandchildren ➡ 1st great-grandchildren ➡ ... ➡ the 1st no-kid offspring\n  > ➡ second in line sibling ➡ 1st kid of second in line sibling ➡ ...\n\n  <details><summary><b>True or False: The 1st Fiber node enters <abbr>completeWork</abbr> is the deepest node in a Fiber tree. </b></summary>\n          <p>\n          False. The first Fiber node enters <abbr>completeWork</abbr> is the left most leaf node in an App.\n          </p>\n  </details>   \n\n### After beginWork\nWhen <abbr>beginWork</abbr> finishes its work, we update the current props in the Fiber node.\nThe next step depends on whether the current Fiber node has a child node:\n- child ✅, <abbr>performUnitOfWork</abbr> will pass the child to the next <abbr>performUnitOfWork</abbr> call.\n- child ❌, <abbr>performUnitOfWork</abbr> will leave the current node to <abbr>completeUnitOfWork</abbr>.\n\n### completeUnitOfWork\nThen, <abbr>performUnitOfWork</abbr> calls <abbr>completeUnitOfWork</abbr>:\n```js\nfunction completeUnitOfWork(fiber: FiberNode) {\n    let node: FiberNode | null = fiber;\n\n    do {\n        completeWork(node); \n        const sibling = node.sibling;\n\n        if (sibling !== null) {\n            workInProgress = sibling;\n            return;\n        }\n\n        node = node.return;\n        workInProgress = node;\n    } while (node !== null);\n}\n```\nInside <abbr>completeUnitOfWork</abbr>, we first call <abbr>completeWork</abbr> to create a DOM instance for the WIP fiber node and handle its effects/flags. After that, the while loop has 3 options:\n- Option 1, the WIP node has a sibling node ✅: <abbr>beginWork(sibling)</abbr>\n- Option 2, sibling node ❌ , parent node ✅ : <abbr>completeWork(parent)</abbr>\n- Option 3, sibling node ❌ , parent node ❌ : stop the work loop \n  \n### Test your understanding\nNow we have had an overview of the reconciliation work loop.\nTo test how you understand what we have learned, give it a whirl on the following question.\n```javascript\nconst App = () => {\n    return (\n        <div>\n            react\n            <span>\n                little by little\n            </span>\n        </div>\n    )\n}\nReactDOM.createRoot(rootElement).render(<App />);\n```\n<summary>\n<b>Question: Please list all the beginWork and completeWork calls of this App during a render phase in sequence.</b>\nFor example, 1. beginWork(hostFiberRoot) 2. beginWork(App) 3. beginWork(div)\n</summary>\n\n\n![render_path](https://user-images.githubusercontent.com/51183663/212486682-a1a58b17-0206-419a-9d7c-945eb9918afc.png)\n\n\n\nNote: DIV is a host component. \"little by little\" is a text component.\n\n### Interview Trick\nYou may wonder why we spend so much time on a general understanding of the render phase. By understanding it, you can solve many interview questions on the rendering path of an APP.\n\nLet us look at an interview question:\n```javascript\nimport React, { useEffect } from \"react\";\n\nfunction A() {\n  useEffect(() => {\n    console.log(\"Mount A\");\n  }, []);\n  console.log(\"A\");\n  return <B />;\n}\n\nfunction B() {\n  useEffect(() => {\n    console.log(\"Mount B\");\n  }, []);\n  console.log(\"B\");\n  return <C />;\n}\n\nfunction C() {\n  useEffect(() => {\n    console.log(\"Mount C\");\n  }, []);\n  console.log(\"C\");\n  return null;\n}\n\nfunction D() {\n  useEffect(() => {\n    console.log(\"Mount D\");\n  }, []);\n  console.log(\"D\");\n  return null;\n}\n\nfunction App() {\n  useEffect(() => {\n    console.log(\"Mount App\");\n  }, []);\n  console.log(\"App\");\n  return (\n    <div>\n      <A />\n      <D />\n    </div>\n  );\n}\n\nexport default App;\n```\n### What does the above code snippet output by calling console.log?\n\n```\nApp    \nA    \nB    \nC    \nD     \nMount C    \nMount B     \nMount A    \nMount D   \nMount App  \n```\n\n- Console.log(\"X\") is called when we enter a component. \n> Orders of entering a component are the same as how we call beginWork (like a preorder traversal).\n- Console.log(\"Mount X\") inside useEffect(() => {}, []) is called after a component is rendered. \n> Orders of rendering a component are the same as how we call completeWork (like a postorder traversal).\n\n\nBut can you tell the reasons for your answer? It is time to take a closer look at beginWork and completeWork.\n","slug":"react-render-phase","published":1,"updated":"2023-03-24T22:22:05.896Z","_id":"cldwmqq0h00052epn293t0lp2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Recap-Time-Sliced-Work-Loop\"><a href=\"#Recap-Time-Sliced-Work-Loop\" class=\"headerlink\" title=\"Recap: Time Sliced Work Loop\"></a>Recap: Time Sliced Work Loop</h2><p>From the <a href=\"https://flaming-cl.github.io/post/time-slicing-react\">time slicing</a> post, we have known React implements an interruptible render phase by a conditional while loop: once <abbr>shouldYield</abbr> turns True, the current reconciliation job can be paused, leaving the main thread to more prioritized jobs, like a user event.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deadline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> shouldYield <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>shouldYield<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// next workInprogress is set within performUnitOfWork</span>\n        <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>\n            workInProgress \n        <span class=\"token punctuation\">)</span>\n        shouldYield <span class=\"token operator\">=</span> deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>workLoop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Today we are going to talk about the render phase of React, which is implemented via <abbr>performUnitOfWork</abbr> inside each work loop.</p>\n<details><summary><b>Question: Do you think where we should put our code for the commit phase?</b></summary>\n<p>\nWe should put it outside the breakable while loop.      \nThis is because the commit phase can not be paused: we do not want to see our App rendered with some half updated states.\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deadline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> shouldYield <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>shouldYield<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>\n            workInProgress\n        <span class=\"token punctuation\">)</span>\n        shouldYield <span class=\"token operator\">=</span> deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">commitWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the commit phase</span>\n    <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>workLoop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</p>\n</details>\n\n<hr>\n<h2 id=\"The-Render-Phase\"><a href=\"#The-Render-Phase\" class=\"headerlink\" title=\"The Render Phase\"></a>The Render Phase</h2><p><abbr>PerformUnitOfWork</abbr> (the render phase) mainly does two things: beginWork and completeWork. Its code could be written like this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> workInProgress <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">fiber</span><span class=\"token operator\">:</span> FiberNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fiber<span class=\"token punctuation\">.</span>memorizedProps <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span>pendingProps<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        workInProgress <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"An-Overview-of-PerformUnitOfWork\"><a href=\"#An-Overview-of-PerformUnitOfWork\" class=\"headerlink\" title=\"An Overview of PerformUnitOfWork\"></a>An Overview of PerformUnitOfWork</h3><p>Before understanding key responsibilities of <abbr>performUnitOfWork</abbr>, we first have an overview about how React calls <abbr>performUnitOfWork</abbr> to reconcile a Fiber tree.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/213318797-f18c1fa2-6c65-4ed7-aa29-bd7eea58ff9e.png\" alt=\"punitofwork\"></p>\n<h3 id=\"beginWork\"><a href=\"#beginWork\" class=\"headerlink\" title=\"beginWork\"></a>beginWork</h3><h3 id=\"What-does-beginWork-do\"><a href=\"#What-does-beginWork-do\" class=\"headerlink\" title=\"What does beginWork do?\"></a>What does beginWork do?</h3><p>Each time, <abbr>performUnitOfWork</abbr> calls <abbr>beginWork</abbr> with the WIP (work in progress) fiber node to do the reconciliation job and return a reconciled child Fiber node (return null if no child). </p>\n<h3 id=\"Execution-order-of-beginWork-calls\"><a href=\"#Execution-order-of-beginWork-calls\" class=\"headerlink\" title=\"Execution order of beginWork calls\"></a>Execution order of beginWork calls</h3><p>  The execution order of beginWork calls is similar to a preorder traversal of a tree, like succession to a monarchy’s throne:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1st kid ➡ 1st grandchildren ➡ 1st great-grandchildren ➡ … ➡ the 1st no-kid offspring<br>➡ second in line sibling ➡ 1st kid of second in line sibling ➡ …</p></blockquote>\n  <details><summary><b>True or False: The 1st Fiber node enters <abbr>completeWork</abbr> is the deepest node in a Fiber tree. </b></summary>\n          <p>\n          False. The first Fiber node enters <abbr>completeWork</abbr> is the left most leaf node in an App.\n          </p>\n  </details>   \n\n<h3 id=\"After-beginWork\"><a href=\"#After-beginWork\" class=\"headerlink\" title=\"After beginWork\"></a>After beginWork</h3><p>When <abbr>beginWork</abbr> finishes its work, we update the current props in the Fiber node.<br>The next step depends on whether the current Fiber node has a child node:</p>\n<ul>\n<li>child ✅, <abbr>performUnitOfWork</abbr> will pass the child to the next <abbr>performUnitOfWork</abbr> call.</li>\n<li>child ❌, <abbr>performUnitOfWork</abbr> will leave the current node to <abbr>completeUnitOfWork</abbr>.</li>\n</ul>\n<h3 id=\"completeUnitOfWork\"><a href=\"#completeUnitOfWork\" class=\"headerlink\" title=\"completeUnitOfWork\"></a>completeUnitOfWork</h3><p>Then, <abbr>performUnitOfWork</abbr> calls <abbr>completeUnitOfWork</abbr>:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">fiber</span><span class=\"token operator\">:</span> FiberNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> FiberNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">completeWork</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">const</span> sibling <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sibling <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            workInProgress <span class=\"token operator\">=</span> sibling<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>return<span class=\"token punctuation\">;</span>\n        workInProgress <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Inside <abbr>completeUnitOfWork</abbr>, we first call <abbr>completeWork</abbr> to create a DOM instance for the WIP fiber node and handle its effects&#x2F;flags. After that, the while loop has 3 options:</p>\n<ul>\n<li>Option 1, the WIP node has a sibling node ✅: <abbr>beginWork(sibling)</abbr></li>\n<li>Option 2, sibling node ❌ , parent node ✅ : <abbr>completeWork(parent)</abbr></li>\n<li>Option 3, sibling node ❌ , parent node ❌ : stop the work loop</li>\n</ul>\n<h3 id=\"Test-your-understanding\"><a href=\"#Test-your-understanding\" class=\"headerlink\" title=\"Test your understanding\"></a>Test your understanding</h3><p>Now we have had an overview of the reconciliation work loop.<br>To test how you understand what we have learned, give it a whirl on the following question.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            react\n            <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>\n                little by little\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<summary>\n<b>Question: Please list all the beginWork and completeWork calls of this App during a render phase in sequence.</b>\nFor example, 1. beginWork(hostFiberRoot) 2. beginWork(App) 3. beginWork(div)\n</summary>\n\n\n<p><img src=\"https://user-images.githubusercontent.com/51183663/212486682-a1a58b17-0206-419a-9d7c-945eb9918afc.png\" alt=\"render_path\"></p>\n<p>Note: DIV is a host component. “little by little” is a text component.</p>\n<h3 id=\"Interview-Trick\"><a href=\"#Interview-Trick\" class=\"headerlink\" title=\"Interview Trick\"></a>Interview Trick</h3><p>You may wonder why we spend so much time on a general understanding of the render phase. By understanding it, you can solve many interview questions on the rendering path of an APP.</p>\n<p>Let us look at an interview question:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount App\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"App\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"What-does-the-above-code-snippet-output-by-calling-console-log\"><a href=\"#What-does-the-above-code-snippet-output-by-calling-console-log\" class=\"headerlink\" title=\"What does the above code snippet output by calling console.log?\"></a>What does the above code snippet output by calling console.log?</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">App    \nA    \nB    \nC    \nD     \nMount C    \nMount B     \nMount A    \nMount D   \nMount App  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>Console.log(“X”) is called when we enter a component. <blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Orders of entering a component are the same as how we call beginWork (like a preorder traversal).</p></blockquote>\n</li>\n<li>Console.log(“Mount X”) inside useEffect(() &#x3D;&gt; {}, []) is called after a component is rendered. <blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Orders of rendering a component are the same as how we call completeWork (like a postorder traversal).</p></blockquote>\n</li>\n</ul>\n<p>But can you tell the reasons for your answer? It is time to take a closer look at beginWork and completeWork.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Recap-Time-Sliced-Work-Loop\"><a href=\"#Recap-Time-Sliced-Work-Loop\" class=\"headerlink\" title=\"Recap: Time Sliced Work Loop\"></a>Recap: Time Sliced Work Loop</h2><p>From the <a href=\"https://flaming-cl.github.io/post/time-slicing-react\">time slicing</a> post, we have known React implements an interruptible render phase by a conditional while loop: once <abbr>shouldYield</abbr> turns True, the current reconciliation job can be paused, leaving the main thread to more prioritized jobs, like a user event.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deadline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> shouldYield <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>shouldYield<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// next workInprogress is set within performUnitOfWork</span>\n        <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>\n            workInProgress \n        <span class=\"token punctuation\">)</span>\n        shouldYield <span class=\"token operator\">=</span> deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>workLoop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Today we are going to talk about the render phase of React, which is implemented via <abbr>performUnitOfWork</abbr> inside each work loop.</p>\n<details><summary><b>Question: Do you think where we should put our code for the commit phase?</b></summary>\n<p>\nWe should put it outside the breakable while loop.      \nThis is because the commit phase can not be paused: we do not want to see our App rendered with some half updated states.\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deadline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> shouldYield <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>shouldYield<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>\n            workInProgress\n        <span class=\"token punctuation\">)</span>\n        shouldYield <span class=\"token operator\">=</span> deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">commitWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the commit phase</span>\n    <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>workLoop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</p>\n</details>\n\n<hr>\n<h2 id=\"The-Render-Phase\"><a href=\"#The-Render-Phase\" class=\"headerlink\" title=\"The Render Phase\"></a>The Render Phase</h2><p><abbr>PerformUnitOfWork</abbr> (the render phase) mainly does two things: beginWork and completeWork. Its code could be written like this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> workInProgress <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">fiber</span><span class=\"token operator\">:</span> FiberNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fiber<span class=\"token punctuation\">.</span>memorizedProps <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span>pendingProps<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        workInProgress <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"An-Overview-of-PerformUnitOfWork\"><a href=\"#An-Overview-of-PerformUnitOfWork\" class=\"headerlink\" title=\"An Overview of PerformUnitOfWork\"></a>An Overview of PerformUnitOfWork</h3><p>Before understanding key responsibilities of <abbr>performUnitOfWork</abbr>, we first have an overview about how React calls <abbr>performUnitOfWork</abbr> to reconcile a Fiber tree.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/213318797-f18c1fa2-6c65-4ed7-aa29-bd7eea58ff9e.png\" alt=\"punitofwork\"></p>\n<h3 id=\"beginWork\"><a href=\"#beginWork\" class=\"headerlink\" title=\"beginWork\"></a>beginWork</h3><h3 id=\"What-does-beginWork-do\"><a href=\"#What-does-beginWork-do\" class=\"headerlink\" title=\"What does beginWork do?\"></a>What does beginWork do?</h3><p>Each time, <abbr>performUnitOfWork</abbr> calls <abbr>beginWork</abbr> with the WIP (work in progress) fiber node to do the reconciliation job and return a reconciled child Fiber node (return null if no child). </p>\n<h3 id=\"Execution-order-of-beginWork-calls\"><a href=\"#Execution-order-of-beginWork-calls\" class=\"headerlink\" title=\"Execution order of beginWork calls\"></a>Execution order of beginWork calls</h3><p>  The execution order of beginWork calls is similar to a preorder traversal of a tree, like succession to a monarchy’s throne:</p>\n<blockquote>\n<p>1st kid ➡ 1st grandchildren ➡ 1st great-grandchildren ➡ … ➡ the 1st no-kid offspring<br>➡ second in line sibling ➡ 1st kid of second in line sibling ➡ …</p>\n</blockquote>\n  <details><summary><b>True or False: The 1st Fiber node enters <abbr>completeWork</abbr> is the deepest node in a Fiber tree. </b></summary>\n          <p>\n          False. The first Fiber node enters <abbr>completeWork</abbr> is the left most leaf node in an App.\n          </p>\n  </details>   \n\n<h3 id=\"After-beginWork\"><a href=\"#After-beginWork\" class=\"headerlink\" title=\"After beginWork\"></a>After beginWork</h3><p>When <abbr>beginWork</abbr> finishes its work, we update the current props in the Fiber node.<br>The next step depends on whether the current Fiber node has a child node:</p>\n<ul>\n<li>child ✅, <abbr>performUnitOfWork</abbr> will pass the child to the next <abbr>performUnitOfWork</abbr> call.</li>\n<li>child ❌, <abbr>performUnitOfWork</abbr> will leave the current node to <abbr>completeUnitOfWork</abbr>.</li>\n</ul>\n<h3 id=\"completeUnitOfWork\"><a href=\"#completeUnitOfWork\" class=\"headerlink\" title=\"completeUnitOfWork\"></a>completeUnitOfWork</h3><p>Then, <abbr>performUnitOfWork</abbr> calls <abbr>completeUnitOfWork</abbr>:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">fiber</span><span class=\"token operator\">:</span> FiberNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> FiberNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">completeWork</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">const</span> sibling <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sibling <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            workInProgress <span class=\"token operator\">=</span> sibling<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>return<span class=\"token punctuation\">;</span>\n        workInProgress <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Inside <abbr>completeUnitOfWork</abbr>, we first call <abbr>completeWork</abbr> to create a DOM instance for the WIP fiber node and handle its effects&#x2F;flags. After that, the while loop has 3 options:</p>\n<ul>\n<li>Option 1, the WIP node has a sibling node ✅: <abbr>beginWork(sibling)</abbr></li>\n<li>Option 2, sibling node ❌ , parent node ✅ : <abbr>completeWork(parent)</abbr></li>\n<li>Option 3, sibling node ❌ , parent node ❌ : stop the work loop</li>\n</ul>\n<h3 id=\"Test-your-understanding\"><a href=\"#Test-your-understanding\" class=\"headerlink\" title=\"Test your understanding\"></a>Test your understanding</h3><p>Now we have had an overview of the reconciliation work loop.<br>To test how you understand what we have learned, give it a whirl on the following question.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            react\n            <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>\n                little by little\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<summary>\n<b>Question: Please list all the beginWork and completeWork calls of this App during a render phase in sequence.</b>\nFor example, 1. beginWork(hostFiberRoot) 2. beginWork(App) 3. beginWork(div)\n</summary>\n\n\n<p><img src=\"https://user-images.githubusercontent.com/51183663/212486682-a1a58b17-0206-419a-9d7c-945eb9918afc.png\" alt=\"render_path\"></p>\n<p>Note: DIV is a host component. “little by little” is a text component.</p>\n<h3 id=\"Interview-Trick\"><a href=\"#Interview-Trick\" class=\"headerlink\" title=\"Interview Trick\"></a>Interview Trick</h3><p>You may wonder why we spend so much time on a general understanding of the render phase. By understanding it, you can solve many interview questions on the rendering path of an APP.</p>\n<p>Let us look at an interview question:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount App\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"App\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"What-does-the-above-code-snippet-output-by-calling-console-log\"><a href=\"#What-does-the-above-code-snippet-output-by-calling-console-log\" class=\"headerlink\" title=\"What does the above code snippet output by calling console.log?\"></a>What does the above code snippet output by calling console.log?</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">App    \nA    \nB    \nC    \nD     \nMount C    \nMount B     \nMount A    \nMount D   \nMount App  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>Console.log(“X”) is called when we enter a component. <blockquote>\n<p>Orders of entering a component are the same as how we call beginWork (like a preorder traversal).</p>\n</blockquote>\n</li>\n<li>Console.log(“Mount X”) inside useEffect(() &#x3D;&gt; {}, []) is called after a component is rendered. <blockquote>\n<p>Orders of rendering a component are the same as how we call completeWork (like a postorder traversal).</p>\n</blockquote>\n</li>\n</ul>\n<p>But can you tell the reasons for your answer? It is time to take a closer look at beginWork and completeWork.</p>\n"},{"title":"Ideas behind concurrent features","date":"2023-02-06T17:21:10.000Z","_content":"\n### Do React concurrent features mean multitasking?\nNo. React concurrent features are not about multitasking.\nThis is because the JavaScript engine is single-threaded (can only do one thing at one time).\nSo there is no magic for React to simultaneously handle user events while rendering a large list.\n\n### If so, what does React do to avoid stutters when running CPU heavy tasks?\nIn fact, React tries to avoid CPU bottlenecks by running one task, stopping it, running another, and so forth.\nSounds like a micro operating system, right? \n\nBut concurrent features will not allow tasks to freely compete for sources.   \nInstead, they will label different tasks with different priority: low priority running tasks will yield the main thread to high priority tasks to ensure performance.\n\nThis is quite similar to how we answer a second phone call:\n\n> Assume there comes a food delivery call, while we are calling a friend for a casual chat.\nSince a food delivery call is more urgent than a casual chat, we hold the chat and answer the delivery call.\n\n![calls](https://user-images.githubusercontent.com/51183663/217071662-a89bd48e-beb5-4a82-ab62-7f36f7ab15fe.png)\n\nReact does the same thing. It can pause a less prioritized rendering task and yield to more urgent tasks, such as keyboard events. This is implemented as concurrent features since React 18.\n### Can you give some examples about React concurrent features?\nConcurrent features: startTransition(), useTransition(), useDeferredValue()\nBy using the above APIs, you are telling React to give lower priority to things you put in them. \n\n1）useDeferredValue(value)\n- example: input value of a search bar\n- result: updates of the input value will be deferred, just like what \"debounce\" does\n\n2）startTransition(callback)\n- example: a function to update a large list\n- result: When updating the large list, if there comes a keyboard event, React will pause the ongoing update and turn to the user event.\n\n### What enables React to run the concurrent features?\nTime slicing.\nAfter V16, React started to embrace time slicing to ensure an interruptible render phase. \nThis means React can insert urgent browser tasks among small tasks from the render phase to avoid stutter.\n\n![217070500-dc1bfbcf-31a5-4158-8d19-7870dbf99071](https://user-images.githubusercontent.com/51183663/217111897-7dacf96a-a574-410b-865b-c5e8ce3c3f5a.png)\nTo understand more about time slicing, go to [this post](https://flaming-cl.github.io/post/time-slicing-react)\n\n## References\n[1] [Visualization of async rendering and synchronous rendering in React, Andrew Clark](https://twitter.com/acdlite/status/977291318324948992)\n[2] [useTransition, React Docs](https://beta.reactjs.org/reference/react/useTransition)\n[3] [useDeferredValue, React Docs](https://beta.reactjs.org/reference/react/useDeferredValue)\n","source":"_posts/simple-ideas-about-React-Concurrent-mode.md","raw":"---\ntitle: Ideas behind concurrent features\ndate: 2023-02-06 12:21:10\ntags: React\n---\n\n### Do React concurrent features mean multitasking?\nNo. React concurrent features are not about multitasking.\nThis is because the JavaScript engine is single-threaded (can only do one thing at one time).\nSo there is no magic for React to simultaneously handle user events while rendering a large list.\n\n### If so, what does React do to avoid stutters when running CPU heavy tasks?\nIn fact, React tries to avoid CPU bottlenecks by running one task, stopping it, running another, and so forth.\nSounds like a micro operating system, right? \n\nBut concurrent features will not allow tasks to freely compete for sources.   \nInstead, they will label different tasks with different priority: low priority running tasks will yield the main thread to high priority tasks to ensure performance.\n\nThis is quite similar to how we answer a second phone call:\n\n> Assume there comes a food delivery call, while we are calling a friend for a casual chat.\nSince a food delivery call is more urgent than a casual chat, we hold the chat and answer the delivery call.\n\n![calls](https://user-images.githubusercontent.com/51183663/217071662-a89bd48e-beb5-4a82-ab62-7f36f7ab15fe.png)\n\nReact does the same thing. It can pause a less prioritized rendering task and yield to more urgent tasks, such as keyboard events. This is implemented as concurrent features since React 18.\n### Can you give some examples about React concurrent features?\nConcurrent features: startTransition(), useTransition(), useDeferredValue()\nBy using the above APIs, you are telling React to give lower priority to things you put in them. \n\n1）useDeferredValue(value)\n- example: input value of a search bar\n- result: updates of the input value will be deferred, just like what \"debounce\" does\n\n2）startTransition(callback)\n- example: a function to update a large list\n- result: When updating the large list, if there comes a keyboard event, React will pause the ongoing update and turn to the user event.\n\n### What enables React to run the concurrent features?\nTime slicing.\nAfter V16, React started to embrace time slicing to ensure an interruptible render phase. \nThis means React can insert urgent browser tasks among small tasks from the render phase to avoid stutter.\n\n![217070500-dc1bfbcf-31a5-4158-8d19-7870dbf99071](https://user-images.githubusercontent.com/51183663/217111897-7dacf96a-a574-410b-865b-c5e8ce3c3f5a.png)\nTo understand more about time slicing, go to [this post](https://flaming-cl.github.io/post/time-slicing-react)\n\n## References\n[1] [Visualization of async rendering and synchronous rendering in React, Andrew Clark](https://twitter.com/acdlite/status/977291318324948992)\n[2] [useTransition, React Docs](https://beta.reactjs.org/reference/react/useTransition)\n[3] [useDeferredValue, React Docs](https://beta.reactjs.org/reference/react/useDeferredValue)\n","slug":"simple-ideas-about-React-Concurrent-mode","published":1,"updated":"2023-03-03T18:50:24.285Z","_id":"cldwmqq0j00082epn59tn69b1","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Do-React-concurrent-features-mean-multitasking\"><a href=\"#Do-React-concurrent-features-mean-multitasking\" class=\"headerlink\" title=\"Do React concurrent features mean multitasking?\"></a>Do React concurrent features mean multitasking?</h3><p>No. React concurrent features are not about multitasking.<br>This is because the JavaScript engine is single-threaded (can only do one thing at one time).<br>So there is no magic for React to simultaneously handle user events while rendering a large list.</p>\n<h3 id=\"If-so-what-does-React-do-to-avoid-stutters-when-running-CPU-heavy-tasks\"><a href=\"#If-so-what-does-React-do-to-avoid-stutters-when-running-CPU-heavy-tasks\" class=\"headerlink\" title=\"If so, what does React do to avoid stutters when running CPU heavy tasks?\"></a>If so, what does React do to avoid stutters when running CPU heavy tasks?</h3><p>In fact, React tries to avoid CPU bottlenecks by running one task, stopping it, running another, and so forth.<br>Sounds like a micro operating system, right? </p>\n<p>But concurrent features will not allow tasks to freely compete for sources.<br>Instead, they will label different tasks with different priority: low priority running tasks will yield the main thread to high priority tasks to ensure performance.</p>\n<p>This is quite similar to how we answer a second phone call:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Assume there comes a food delivery call, while we are calling a friend for a casual chat.<br>Since a food delivery call is more urgent than a casual chat, we hold the chat and answer the delivery call.</p></blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/217071662-a89bd48e-beb5-4a82-ab62-7f36f7ab15fe.png\" alt=\"calls\"></p>\n<p>React does the same thing. It can pause a less prioritized rendering task and yield to more urgent tasks, such as keyboard events. This is implemented as concurrent features since React 18.</p>\n<h3 id=\"Can-you-give-some-examples-about-React-concurrent-features\"><a href=\"#Can-you-give-some-examples-about-React-concurrent-features\" class=\"headerlink\" title=\"Can you give some examples about React concurrent features?\"></a>Can you give some examples about React concurrent features?</h3><p>Concurrent features: startTransition(), useTransition(), useDeferredValue()<br>By using the above APIs, you are telling React to give lower priority to things you put in them. </p>\n<p>1）useDeferredValue(value)</p>\n<ul>\n<li>example: input value of a search bar</li>\n<li>result: updates of the input value will be deferred, just like what “debounce” does</li>\n</ul>\n<p>2）startTransition(callback)</p>\n<ul>\n<li>example: a function to update a large list</li>\n<li>result: When updating the large list, if there comes a keyboard event, React will pause the ongoing update and turn to the user event.</li>\n</ul>\n<h3 id=\"What-enables-React-to-run-the-concurrent-features\"><a href=\"#What-enables-React-to-run-the-concurrent-features\" class=\"headerlink\" title=\"What enables React to run the concurrent features?\"></a>What enables React to run the concurrent features?</h3><p>Time slicing.<br>After V16, React started to embrace time slicing to ensure an interruptible render phase.<br>This means React can insert urgent browser tasks among small tasks from the render phase to avoid stutter.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/217111897-7dacf96a-a574-410b-865b-c5e8ce3c3f5a.png\" alt=\"217070500-dc1bfbcf-31a5-4158-8d19-7870dbf99071\"><br>To understand more about time slicing, go to <a href=\"https://flaming-cl.github.io/post/time-slicing-react\">this post</a></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[1] <a href=\"https://twitter.com/acdlite/status/977291318324948992\">Visualization of async rendering and synchronous rendering in React, Andrew Clark</a><br>[2] <a href=\"https://beta.reactjs.org/reference/react/useTransition\">useTransition, React Docs</a><br>[3] <a href=\"https://beta.reactjs.org/reference/react/useDeferredValue\">useDeferredValue, React Docs</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Do-React-concurrent-features-mean-multitasking\"><a href=\"#Do-React-concurrent-features-mean-multitasking\" class=\"headerlink\" title=\"Do React concurrent features mean multitasking?\"></a>Do React concurrent features mean multitasking?</h3><p>No. React concurrent features are not about multitasking.<br>This is because the JavaScript engine is single-threaded (can only do one thing at one time).<br>So there is no magic for React to simultaneously handle user events while rendering a large list.</p>\n<h3 id=\"If-so-what-does-React-do-to-avoid-stutters-when-running-CPU-heavy-tasks\"><a href=\"#If-so-what-does-React-do-to-avoid-stutters-when-running-CPU-heavy-tasks\" class=\"headerlink\" title=\"If so, what does React do to avoid stutters when running CPU heavy tasks?\"></a>If so, what does React do to avoid stutters when running CPU heavy tasks?</h3><p>In fact, React tries to avoid CPU bottlenecks by running one task, stopping it, running another, and so forth.<br>Sounds like a micro operating system, right? </p>\n<p>But concurrent features will not allow tasks to freely compete for sources.<br>Instead, they will label different tasks with different priority: low priority running tasks will yield the main thread to high priority tasks to ensure performance.</p>\n<p>This is quite similar to how we answer a second phone call:</p>\n<blockquote>\n<p>Assume there comes a food delivery call, while we are calling a friend for a casual chat.<br>Since a food delivery call is more urgent than a casual chat, we hold the chat and answer the delivery call.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/217071662-a89bd48e-beb5-4a82-ab62-7f36f7ab15fe.png\" alt=\"calls\"></p>\n<p>React does the same thing. It can pause a less prioritized rendering task and yield to more urgent tasks, such as keyboard events. This is implemented as concurrent features since React 18.</p>\n<h3 id=\"Can-you-give-some-examples-about-React-concurrent-features\"><a href=\"#Can-you-give-some-examples-about-React-concurrent-features\" class=\"headerlink\" title=\"Can you give some examples about React concurrent features?\"></a>Can you give some examples about React concurrent features?</h3><p>Concurrent features: startTransition(), useTransition(), useDeferredValue()<br>By using the above APIs, you are telling React to give lower priority to things you put in them. </p>\n<p>1）useDeferredValue(value)</p>\n<ul>\n<li>example: input value of a search bar</li>\n<li>result: updates of the input value will be deferred, just like what “debounce” does</li>\n</ul>\n<p>2）startTransition(callback)</p>\n<ul>\n<li>example: a function to update a large list</li>\n<li>result: When updating the large list, if there comes a keyboard event, React will pause the ongoing update and turn to the user event.</li>\n</ul>\n<h3 id=\"What-enables-React-to-run-the-concurrent-features\"><a href=\"#What-enables-React-to-run-the-concurrent-features\" class=\"headerlink\" title=\"What enables React to run the concurrent features?\"></a>What enables React to run the concurrent features?</h3><p>Time slicing.<br>After V16, React started to embrace time slicing to ensure an interruptible render phase.<br>This means React can insert urgent browser tasks among small tasks from the render phase to avoid stutter.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/217111897-7dacf96a-a574-410b-865b-c5e8ce3c3f5a.png\" alt=\"217070500-dc1bfbcf-31a5-4158-8d19-7870dbf99071\"><br>To understand more about time slicing, go to <a href=\"https://flaming-cl.github.io/post/time-slicing-react\">this post</a></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[1] <a href=\"https://twitter.com/acdlite/status/977291318324948992\">Visualization of async rendering and synchronous rendering in React, Andrew Clark</a><br>[2] <a href=\"https://beta.reactjs.org/reference/react/useTransition\">useTransition, React Docs</a><br>[3] <a href=\"https://beta.reactjs.org/reference/react/useDeferredValue\">useDeferredValue, React Docs</a></p>\n"},{"title":"Single-threaded JavaScript","date":"2023-02-08T19:33:14.000Z","_content":"This article will illustrate why we have synchronous and asynchronous tasks.\n### Synchronous and Asynchronous Tasks\nIn JavaScript, we have synchronous and asynchronous tasks.\n\n**Synchronous Tasks**\nSynchronous tasks are processed immediately, and they can block JavaScript execution until the running task is completed.\n\n**Asynchronous Tasks**\nAsynchronous tasks, such as I/O or network requests, often require interaction with threads other than the JS engine main thread to obtain data for incoming execution.\n\nAs the main thread is not responsible for I/O or network jobs, it really doesn't need to wait for completion of long-running asynchronous tasks. To improve efficiency, JavaScript asks asynchronous tasks to yield the main thread for the next task, and will execute on ready asynchronous callbacks later.\n\n---\n\n#### Illustration for Asynchronous Tasks\n![queuing](https://user-images.githubusercontent.com/51183663/219988659-2f282ff1-2788-49e5-adb1-dae052604aa5.png)\nTo better understand asynchronous tasks, let's look at an example of working as a counter staff at McDonald's. Here is a typical scenario of a counter staff's job:\n1. have customers **waiting in line** before serving them\n2. **serve** customer A to order food at the counter\n3. tell customer A to **wait for food to be cooked**, and start serving customer B\n4. when customer A's meal is ready, notify A to be back, pass meals to A and **complete service**\n\nLet's take a look at how working as a counter staff at McDonald's is similar to task processing in JavaScript:\n- **JavaScript is single-threaded, handling one task at a time.** \nThe counter staff only serves one customer at a time.\n- **JavaScript passes asynchronous tasks to web APIs, let callbacks of async calls to be executed later, and begin processing the next task.**\nFood ordered by customer A is not cooked yet. The counter staff asks the kitchen to prepare the meal, tells customer A to go back later, and start serving customer B.\n- **JavaScript keeps on ready asynchronous tasks waiting in queue before execution.**\nThe way customers wait in queue is quite similar to how on ready asynchronous tasks wait in the task queue, as they all follow a first in first out manner.\n\n#### Illustration for Synchronous Tasks\n**In JavaScript, synchronous tasks are executed immediately and before the execution of async tasks.**\n\nThe counter staff’s analogy can also be used to explain synchronous tasks, as if food ordered by customer B is in the holding cabinet and ready for picking up.   \n\nIn this case, the counter staff can directly pass the meal to and finish service for customer B, while customer A is still waiting for the meal to be ready.\n\nHere, service for customer B is like a synchronous task, and service for customer A is like an asynchronous task. \n\n---\n\n\n### Inside asynchronous tasks: Microtask and Macrotask\n![trainstation](https://user-images.githubusercontent.com/51183663/222218194-453425c4-ea45-4288-94c7-b4b3daeb74f4.png)\n\nTo illustrate this, let's modify our previous story a bit. Now the McDonald's is inside a train station. It is common that some customers have their train leaving soon and ask other customers if they can cut in line to place their order soon.\n\n**This scenario emphasizes the need for having both microtasks and macrotasks:** we want to make it possible for high priority tasks to cut in line and be executed ahead of less prioritized ones.\n\nAs a result, microtasks are designed to be prioritized and executed earlier, while macrotasks are less urgent and can be deferred. In other words, microtasks will be executed before macrotasks in JavaScript.\n\nSo far, we can infer the execution order of the three types of tasks is: \n> synchronous tasks -> microtasks -> macrotasks.\n\n","source":"_posts/single-threaded-javascript.md","raw":"---\ntitle: Single-threaded JavaScript\ndate: 2023-02-08 14:33:14\ntags: JavaScript\n---\nThis article will illustrate why we have synchronous and asynchronous tasks.\n### Synchronous and Asynchronous Tasks\nIn JavaScript, we have synchronous and asynchronous tasks.\n\n**Synchronous Tasks**\nSynchronous tasks are processed immediately, and they can block JavaScript execution until the running task is completed.\n\n**Asynchronous Tasks**\nAsynchronous tasks, such as I/O or network requests, often require interaction with threads other than the JS engine main thread to obtain data for incoming execution.\n\nAs the main thread is not responsible for I/O or network jobs, it really doesn't need to wait for completion of long-running asynchronous tasks. To improve efficiency, JavaScript asks asynchronous tasks to yield the main thread for the next task, and will execute on ready asynchronous callbacks later.\n\n---\n\n#### Illustration for Asynchronous Tasks\n![queuing](https://user-images.githubusercontent.com/51183663/219988659-2f282ff1-2788-49e5-adb1-dae052604aa5.png)\nTo better understand asynchronous tasks, let's look at an example of working as a counter staff at McDonald's. Here is a typical scenario of a counter staff's job:\n1. have customers **waiting in line** before serving them\n2. **serve** customer A to order food at the counter\n3. tell customer A to **wait for food to be cooked**, and start serving customer B\n4. when customer A's meal is ready, notify A to be back, pass meals to A and **complete service**\n\nLet's take a look at how working as a counter staff at McDonald's is similar to task processing in JavaScript:\n- **JavaScript is single-threaded, handling one task at a time.** \nThe counter staff only serves one customer at a time.\n- **JavaScript passes asynchronous tasks to web APIs, let callbacks of async calls to be executed later, and begin processing the next task.**\nFood ordered by customer A is not cooked yet. The counter staff asks the kitchen to prepare the meal, tells customer A to go back later, and start serving customer B.\n- **JavaScript keeps on ready asynchronous tasks waiting in queue before execution.**\nThe way customers wait in queue is quite similar to how on ready asynchronous tasks wait in the task queue, as they all follow a first in first out manner.\n\n#### Illustration for Synchronous Tasks\n**In JavaScript, synchronous tasks are executed immediately and before the execution of async tasks.**\n\nThe counter staff’s analogy can also be used to explain synchronous tasks, as if food ordered by customer B is in the holding cabinet and ready for picking up.   \n\nIn this case, the counter staff can directly pass the meal to and finish service for customer B, while customer A is still waiting for the meal to be ready.\n\nHere, service for customer B is like a synchronous task, and service for customer A is like an asynchronous task. \n\n---\n\n\n### Inside asynchronous tasks: Microtask and Macrotask\n![trainstation](https://user-images.githubusercontent.com/51183663/222218194-453425c4-ea45-4288-94c7-b4b3daeb74f4.png)\n\nTo illustrate this, let's modify our previous story a bit. Now the McDonald's is inside a train station. It is common that some customers have their train leaving soon and ask other customers if they can cut in line to place their order soon.\n\n**This scenario emphasizes the need for having both microtasks and macrotasks:** we want to make it possible for high priority tasks to cut in line and be executed ahead of less prioritized ones.\n\nAs a result, microtasks are designed to be prioritized and executed earlier, while macrotasks are less urgent and can be deferred. In other words, microtasks will be executed before macrotasks in JavaScript.\n\nSo far, we can infer the execution order of the three types of tasks is: \n> synchronous tasks -> microtasks -> macrotasks.\n\n","slug":"single-threaded-javascript","published":1,"updated":"2023-03-01T17:36:46.956Z","_id":"cldwmqq0k000a2epnee4qhy8f","comments":1,"layout":"post","photos":[],"link":"","content":"<p>This article will illustrate why we have synchronous and asynchronous tasks.</p>\n<h3 id=\"Synchronous-and-Asynchronous-Tasks\"><a href=\"#Synchronous-and-Asynchronous-Tasks\" class=\"headerlink\" title=\"Synchronous and Asynchronous Tasks\"></a>Synchronous and Asynchronous Tasks</h3><p>In JavaScript, we have synchronous and asynchronous tasks.</p>\n<p><strong>Synchronous Tasks</strong><br>Synchronous tasks are processed immediately, and they can block JavaScript execution until the running task is completed.</p>\n<p><strong>Asynchronous Tasks</strong><br>Asynchronous tasks, such as I&#x2F;O or network requests, often require interaction with threads other than the JS engine main thread to obtain data for incoming execution.</p>\n<p>As the main thread is not responsible for I&#x2F;O or network jobs, it really doesn’t need to wait for completion of long-running asynchronous tasks. To improve efficiency, JavaScript asks asynchronous tasks to yield the main thread for the next task, and will execute on ready asynchronous callbacks later.</p>\n<hr>\n<h4 id=\"Illustration-for-Asynchronous-Tasks\"><a href=\"#Illustration-for-Asynchronous-Tasks\" class=\"headerlink\" title=\"Illustration for Asynchronous Tasks\"></a>Illustration for Asynchronous Tasks</h4><p><img src=\"https://user-images.githubusercontent.com/51183663/219988659-2f282ff1-2788-49e5-adb1-dae052604aa5.png\" alt=\"queuing\"><br>To better understand asynchronous tasks, let’s look at an example of working as a counter staff at McDonald’s. Here is a typical scenario of a counter staff’s job:</p>\n<ol>\n<li>have customers <strong>waiting in line</strong> before serving them</li>\n<li><strong>serve</strong> customer A to order food at the counter</li>\n<li>tell customer A to <strong>wait for food to be cooked</strong>, and start serving customer B</li>\n<li>when customer A’s meal is ready, notify A to be back, pass meals to A and <strong>complete service</strong></li>\n</ol>\n<p>Let’s take a look at how working as a counter staff at McDonald’s is similar to task processing in JavaScript:</p>\n<ul>\n<li><strong>JavaScript is single-threaded, handling one task at a time.</strong><br>The counter staff only serves one customer at a time.</li>\n<li><strong>JavaScript passes asynchronous tasks to web APIs, let callbacks of async calls to be executed later, and begin processing the next task.</strong><br>Food ordered by customer A is not cooked yet. The counter staff asks the kitchen to prepare the meal, tells customer A to go back later, and start serving customer B.</li>\n<li><strong>JavaScript keeps on ready asynchronous tasks waiting in queue before execution.</strong><br>The way customers wait in queue is quite similar to how on ready asynchronous tasks wait in the task queue, as they all follow a first in first out manner.</li>\n</ul>\n<h4 id=\"Illustration-for-Synchronous-Tasks\"><a href=\"#Illustration-for-Synchronous-Tasks\" class=\"headerlink\" title=\"Illustration for Synchronous Tasks\"></a>Illustration for Synchronous Tasks</h4><p><strong>In JavaScript, synchronous tasks are executed immediately and before the execution of async tasks.</strong></p>\n<p>The counter staff’s analogy can also be used to explain synchronous tasks, as if food ordered by customer B is in the holding cabinet and ready for picking up.   </p>\n<p>In this case, the counter staff can directly pass the meal to and finish service for customer B, while customer A is still waiting for the meal to be ready.</p>\n<p>Here, service for customer B is like a synchronous task, and service for customer A is like an asynchronous task. </p>\n<hr>\n<h3 id=\"Inside-asynchronous-tasks-Microtask-and-Macrotask\"><a href=\"#Inside-asynchronous-tasks-Microtask-and-Macrotask\" class=\"headerlink\" title=\"Inside asynchronous tasks: Microtask and Macrotask\"></a>Inside asynchronous tasks: Microtask and Macrotask</h3><p><img src=\"https://user-images.githubusercontent.com/51183663/222218194-453425c4-ea45-4288-94c7-b4b3daeb74f4.png\" alt=\"trainstation\"></p>\n<p>To illustrate this, let’s modify our previous story a bit. Now the McDonald’s is inside a train station. It is common that some customers have their train leaving soon and ask other customers if they can cut in line to place their order soon.</p>\n<p><strong>This scenario emphasizes the need for having both microtasks and macrotasks:</strong> we want to make it possible for high priority tasks to cut in line and be executed ahead of less prioritized ones.</p>\n<p>As a result, microtasks are designed to be prioritized and executed earlier, while macrotasks are less urgent and can be deferred. In other words, microtasks will be executed before macrotasks in JavaScript.</p>\n<p>So far, we can infer the execution order of the three types of tasks is: </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>synchronous tasks -&gt; microtasks -&gt; macrotasks.</p></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>This article will illustrate why we have synchronous and asynchronous tasks.</p>\n<h3 id=\"Synchronous-and-Asynchronous-Tasks\"><a href=\"#Synchronous-and-Asynchronous-Tasks\" class=\"headerlink\" title=\"Synchronous and Asynchronous Tasks\"></a>Synchronous and Asynchronous Tasks</h3><p>In JavaScript, we have synchronous and asynchronous tasks.</p>\n<p><strong>Synchronous Tasks</strong><br>Synchronous tasks are processed immediately, and they can block JavaScript execution until the running task is completed.</p>\n<p><strong>Asynchronous Tasks</strong><br>Asynchronous tasks, such as I&#x2F;O or network requests, often require interaction with threads other than the JS engine main thread to obtain data for incoming execution.</p>\n<p>As the main thread is not responsible for I&#x2F;O or network jobs, it really doesn’t need to wait for completion of long-running asynchronous tasks. To improve efficiency, JavaScript asks asynchronous tasks to yield the main thread for the next task, and will execute on ready asynchronous callbacks later.</p>\n<hr>\n<h4 id=\"Illustration-for-Asynchronous-Tasks\"><a href=\"#Illustration-for-Asynchronous-Tasks\" class=\"headerlink\" title=\"Illustration for Asynchronous Tasks\"></a>Illustration for Asynchronous Tasks</h4><p><img src=\"https://user-images.githubusercontent.com/51183663/219988659-2f282ff1-2788-49e5-adb1-dae052604aa5.png\" alt=\"queuing\"><br>To better understand asynchronous tasks, let’s look at an example of working as a counter staff at McDonald’s. Here is a typical scenario of a counter staff’s job:</p>\n<ol>\n<li>have customers <strong>waiting in line</strong> before serving them</li>\n<li><strong>serve</strong> customer A to order food at the counter</li>\n<li>tell customer A to <strong>wait for food to be cooked</strong>, and start serving customer B</li>\n<li>when customer A’s meal is ready, notify A to be back, pass meals to A and <strong>complete service</strong></li>\n</ol>\n<p>Let’s take a look at how working as a counter staff at McDonald’s is similar to task processing in JavaScript:</p>\n<ul>\n<li><strong>JavaScript is single-threaded, handling one task at a time.</strong><br>The counter staff only serves one customer at a time.</li>\n<li><strong>JavaScript passes asynchronous tasks to web APIs, let callbacks of async calls to be executed later, and begin processing the next task.</strong><br>Food ordered by customer A is not cooked yet. The counter staff asks the kitchen to prepare the meal, tells customer A to go back later, and start serving customer B.</li>\n<li><strong>JavaScript keeps on ready asynchronous tasks waiting in queue before execution.</strong><br>The way customers wait in queue is quite similar to how on ready asynchronous tasks wait in the task queue, as they all follow a first in first out manner.</li>\n</ul>\n<h4 id=\"Illustration-for-Synchronous-Tasks\"><a href=\"#Illustration-for-Synchronous-Tasks\" class=\"headerlink\" title=\"Illustration for Synchronous Tasks\"></a>Illustration for Synchronous Tasks</h4><p><strong>In JavaScript, synchronous tasks are executed immediately and before the execution of async tasks.</strong></p>\n<p>The counter staff’s analogy can also be used to explain synchronous tasks, as if food ordered by customer B is in the holding cabinet and ready for picking up.   </p>\n<p>In this case, the counter staff can directly pass the meal to and finish service for customer B, while customer A is still waiting for the meal to be ready.</p>\n<p>Here, service for customer B is like a synchronous task, and service for customer A is like an asynchronous task. </p>\n<hr>\n<h3 id=\"Inside-asynchronous-tasks-Microtask-and-Macrotask\"><a href=\"#Inside-asynchronous-tasks-Microtask-and-Macrotask\" class=\"headerlink\" title=\"Inside asynchronous tasks: Microtask and Macrotask\"></a>Inside asynchronous tasks: Microtask and Macrotask</h3><p><img src=\"https://user-images.githubusercontent.com/51183663/222218194-453425c4-ea45-4288-94c7-b4b3daeb74f4.png\" alt=\"trainstation\"></p>\n<p>To illustrate this, let’s modify our previous story a bit. Now the McDonald’s is inside a train station. It is common that some customers have their train leaving soon and ask other customers if they can cut in line to place their order soon.</p>\n<p><strong>This scenario emphasizes the need for having both microtasks and macrotasks:</strong> we want to make it possible for high priority tasks to cut in line and be executed ahead of less prioritized ones.</p>\n<p>As a result, microtasks are designed to be prioritized and executed earlier, while macrotasks are less urgent and can be deferred. In other words, microtasks will be executed before macrotasks in JavaScript.</p>\n<p>So far, we can infer the execution order of the three types of tasks is: </p>\n<blockquote>\n<p>synchronous tasks -&gt; microtasks -&gt; macrotasks.</p>\n</blockquote>\n"},{"title":"React Source Code Little by Little 1 -  Time Slicing","date":"2022-09-28T22:49:47.000Z","_content":"\nYou may have heard people saying \"React is fast\" as it uses virtual DOM.\nBut is virtual DOM the only thing you can think of when talking about React performance?\nIn fact React has done many things to handle performance issues.\n\nToday I will talk about Time Slicing.\nA technique React uses to solve performance bottleneck.\n\n## Event Loop and CPU bottlenecks\n### Event Loop\nModern browsers run a continuous event loop at a certain frequency - e.g. 60Hz (refresh 60 times a second). For smooth and responsive experience, browsers try to complete tasks within each event loop execution, aka a frame.\n\n![event-loop-frame](https://user-images.githubusercontent.com/51183663/209892101-70af523b-4bf5-45ba-9aef-b01ac11f9b70.png)\n\nFor 60Hz refresh rate devices, each execution frame has a budget of 16.66ms (1 second / 60).\n\n### CPU bottlenecks\nWithin such a shoestring budget, browsers have to handle a pipeline of work like this:\n\n![frame_pipeline](https://user-images.githubusercontent.com/51183663/209890234-985a0618-b856-414d-999e-f41823756b9b.png)\n\nIf any step in this pipeline needs more than 16.66ms, no time will be left for the upcoming work in this frame.\nThis means we will not have time for style calculations, layout, paint and compositing, when we spend too much time on JavaScript jobs.\nWhen this lasts for 2 or 3 seconds, users will feel your website is slow.\n\n### How does React avoid this scenario?\nReact sets up an interval for running JavaScript tasks (5ms). \nWhen running out of this interval, React will pause its current tasks and give back control to the main thread, letting it perform high priority tasks (painting or user events).\nAfter the main thread has finished prioritized jobs, React goes back to where it stopped and continues working.\n\nAs you may have noticed, the key here is to make React interruptible.\n\n## Time Slicing and Interruptible React \nAssume we have a large application with 500+ components to render.\n### While rendering these components, how does React ensure responsiveness for keyboard or mouse events?\n\nBefore React 16, the render phase was synchronize and uninterruptible.\nThe browser therefore would be easily occupied by CPU-hungry tasks,\nand unable to give prompt responses to user events.\nTake a look at [this video](https://www.youtube.com/watch?v=nLF0n9SACd4) to see what CPU-heavy tasks could be like.\n\n### So, how did React overcome this?\n\nAnswer: Time Slicing.\n\nHere is a [picture](https://twitter.com/acdlite/status/977291318324948992) of time slicing in React (idea of Andrew Clark from the React core team).\n\n![time_slicing](https://user-images.githubusercontent.com/51183663/211950568-f4b85e7a-91d6-4a5a-9b97-c949a14e4282.png)\n\n### Interruptible render phase\nAfter version 16, React started using Fiber reconciler to ensure the render phase is interruptible. It breaks down the render phase into time slices so that it can pause current work to run more urgent tasks, like user inputs.\nAs shown in the above picture, time slicing enables browser events to cut in line during the render phase. This helps React to avoid \"hiccup\" moments.\n\n### Uninterruptible commit phase\nUnlike the render phase, the commit phase can not be interrupted.\nYou can think of these two like a movie screenplay and a movie on show.\nWhen a movie is on (the commit phase), theatres will not suddenly stop playing or change its order of scenes. Just like React will not draw some semi-calculated UI or suddenly stop the commit phase.\n\n## Interruptible Work Loop\nBefore version 16, React reconciler is implemented by call stack recursion. However, stack Reconciliation will not allow pauses on the running render phase.\nAs mentioned earlier, a high performance render phase is time sliced and interruptible. To implement this, we can change the call stack recursion to conditional while loop recursion:\n```js\nfunction workLoop(deadline) {\n    let shouldYield = false\n    while (workInProgress !== null && !shouldYield) {\n        // next workInprogress is set within performUnitOfWork\n        performUnitOfWork(\n            workInProgress \n        )\n        shouldYield = deadline.timeRemaining() < 1\n    }\n    requestIdleCallback(workLoop)\n}\n```\n- while (workInProgress !== null && !shouldYield)\n> This enables us to stop the workLoop, especially when there is no time left in each frame (shouldYield).  \n- requestIdleCallback\n> Check whether the main thread is idle for running sliced tasks.\n\n## Fiber Reconciler\nThis interruptable reconciler is called Fiber reconciler in React.\nTo know more about React Fiber, take a look at this post first: [React Fiber Tree](https://flaming-cl.github.io/post/react-fiber-tree).\n\n## References\n[1] [Sneak Peek: Beyond React 16, Dan Abramov](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html)\n[1] [Build your own React, Rodrigo Pombo](https://pomb.us/build-your-own-react/)\n[2] [Event loop: microtasks and macrotasks, javascript.info](https://javascript.info/event-loop)\n[3] [Visualization of async rendering and synchronous rendering in React, Andrew Clark](https://twitter.com/acdlite/status/977291318324948992)\n[4] [Reconciliation, React official documents](https://reactjs.org/docs/reconciliation.html)\n[5] [Rendering Performance, Paul Lewis](https://web.dev/rendering-performance/)\n[6] [Frame timing, W3C](https://www.w3.org/TR/frame-timing/)\n","source":"_posts/time-slicing-react.md","raw":"---\ntitle:  React Source Code Little by Little 1 -  Time Slicing\ndate: 2022-09-28 18:49:47\ntags: React\n---\n\nYou may have heard people saying \"React is fast\" as it uses virtual DOM.\nBut is virtual DOM the only thing you can think of when talking about React performance?\nIn fact React has done many things to handle performance issues.\n\nToday I will talk about Time Slicing.\nA technique React uses to solve performance bottleneck.\n\n## Event Loop and CPU bottlenecks\n### Event Loop\nModern browsers run a continuous event loop at a certain frequency - e.g. 60Hz (refresh 60 times a second). For smooth and responsive experience, browsers try to complete tasks within each event loop execution, aka a frame.\n\n![event-loop-frame](https://user-images.githubusercontent.com/51183663/209892101-70af523b-4bf5-45ba-9aef-b01ac11f9b70.png)\n\nFor 60Hz refresh rate devices, each execution frame has a budget of 16.66ms (1 second / 60).\n\n### CPU bottlenecks\nWithin such a shoestring budget, browsers have to handle a pipeline of work like this:\n\n![frame_pipeline](https://user-images.githubusercontent.com/51183663/209890234-985a0618-b856-414d-999e-f41823756b9b.png)\n\nIf any step in this pipeline needs more than 16.66ms, no time will be left for the upcoming work in this frame.\nThis means we will not have time for style calculations, layout, paint and compositing, when we spend too much time on JavaScript jobs.\nWhen this lasts for 2 or 3 seconds, users will feel your website is slow.\n\n### How does React avoid this scenario?\nReact sets up an interval for running JavaScript tasks (5ms). \nWhen running out of this interval, React will pause its current tasks and give back control to the main thread, letting it perform high priority tasks (painting or user events).\nAfter the main thread has finished prioritized jobs, React goes back to where it stopped and continues working.\n\nAs you may have noticed, the key here is to make React interruptible.\n\n## Time Slicing and Interruptible React \nAssume we have a large application with 500+ components to render.\n### While rendering these components, how does React ensure responsiveness for keyboard or mouse events?\n\nBefore React 16, the render phase was synchronize and uninterruptible.\nThe browser therefore would be easily occupied by CPU-hungry tasks,\nand unable to give prompt responses to user events.\nTake a look at [this video](https://www.youtube.com/watch?v=nLF0n9SACd4) to see what CPU-heavy tasks could be like.\n\n### So, how did React overcome this?\n\nAnswer: Time Slicing.\n\nHere is a [picture](https://twitter.com/acdlite/status/977291318324948992) of time slicing in React (idea of Andrew Clark from the React core team).\n\n![time_slicing](https://user-images.githubusercontent.com/51183663/211950568-f4b85e7a-91d6-4a5a-9b97-c949a14e4282.png)\n\n### Interruptible render phase\nAfter version 16, React started using Fiber reconciler to ensure the render phase is interruptible. It breaks down the render phase into time slices so that it can pause current work to run more urgent tasks, like user inputs.\nAs shown in the above picture, time slicing enables browser events to cut in line during the render phase. This helps React to avoid \"hiccup\" moments.\n\n### Uninterruptible commit phase\nUnlike the render phase, the commit phase can not be interrupted.\nYou can think of these two like a movie screenplay and a movie on show.\nWhen a movie is on (the commit phase), theatres will not suddenly stop playing or change its order of scenes. Just like React will not draw some semi-calculated UI or suddenly stop the commit phase.\n\n## Interruptible Work Loop\nBefore version 16, React reconciler is implemented by call stack recursion. However, stack Reconciliation will not allow pauses on the running render phase.\nAs mentioned earlier, a high performance render phase is time sliced and interruptible. To implement this, we can change the call stack recursion to conditional while loop recursion:\n```js\nfunction workLoop(deadline) {\n    let shouldYield = false\n    while (workInProgress !== null && !shouldYield) {\n        // next workInprogress is set within performUnitOfWork\n        performUnitOfWork(\n            workInProgress \n        )\n        shouldYield = deadline.timeRemaining() < 1\n    }\n    requestIdleCallback(workLoop)\n}\n```\n- while (workInProgress !== null && !shouldYield)\n> This enables us to stop the workLoop, especially when there is no time left in each frame (shouldYield).  \n- requestIdleCallback\n> Check whether the main thread is idle for running sliced tasks.\n\n## Fiber Reconciler\nThis interruptable reconciler is called Fiber reconciler in React.\nTo know more about React Fiber, take a look at this post first: [React Fiber Tree](https://flaming-cl.github.io/post/react-fiber-tree).\n\n## References\n[1] [Sneak Peek: Beyond React 16, Dan Abramov](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html)\n[1] [Build your own React, Rodrigo Pombo](https://pomb.us/build-your-own-react/)\n[2] [Event loop: microtasks and macrotasks, javascript.info](https://javascript.info/event-loop)\n[3] [Visualization of async rendering and synchronous rendering in React, Andrew Clark](https://twitter.com/acdlite/status/977291318324948992)\n[4] [Reconciliation, React official documents](https://reactjs.org/docs/reconciliation.html)\n[5] [Rendering Performance, Paul Lewis](https://web.dev/rendering-performance/)\n[6] [Frame timing, W3C](https://www.w3.org/TR/frame-timing/)\n","slug":"time-slicing-react","published":1,"updated":"2023-03-24T22:21:59.736Z","_id":"cldwmqq0l000d2epnawmodznq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>You may have heard people saying “React is fast” as it uses virtual DOM.<br>But is virtual DOM the only thing you can think of when talking about React performance?<br>In fact React has done many things to handle performance issues.</p>\n<p>Today I will talk about Time Slicing.<br>A technique React uses to solve performance bottleneck.</p>\n<h2 id=\"Event-Loop-and-CPU-bottlenecks\"><a href=\"#Event-Loop-and-CPU-bottlenecks\" class=\"headerlink\" title=\"Event Loop and CPU bottlenecks\"></a>Event Loop and CPU bottlenecks</h2><h3 id=\"Event-Loop\"><a href=\"#Event-Loop\" class=\"headerlink\" title=\"Event Loop\"></a>Event Loop</h3><p>Modern browsers run a continuous event loop at a certain frequency - e.g. 60Hz (refresh 60 times a second). For smooth and responsive experience, browsers try to complete tasks within each event loop execution, aka a frame.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/209892101-70af523b-4bf5-45ba-9aef-b01ac11f9b70.png\" alt=\"event-loop-frame\"></p>\n<p>For 60Hz refresh rate devices, each execution frame has a budget of 16.66ms (1 second &#x2F; 60).</p>\n<h3 id=\"CPU-bottlenecks\"><a href=\"#CPU-bottlenecks\" class=\"headerlink\" title=\"CPU bottlenecks\"></a>CPU bottlenecks</h3><p>Within such a shoestring budget, browsers have to handle a pipeline of work like this:</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/209890234-985a0618-b856-414d-999e-f41823756b9b.png\" alt=\"frame_pipeline\"></p>\n<p>If any step in this pipeline needs more than 16.66ms, no time will be left for the upcoming work in this frame.<br>This means we will not have time for style calculations, layout, paint and compositing, when we spend too much time on JavaScript jobs.<br>When this lasts for 2 or 3 seconds, users will feel your website is slow.</p>\n<h3 id=\"How-does-React-avoid-this-scenario\"><a href=\"#How-does-React-avoid-this-scenario\" class=\"headerlink\" title=\"How does React avoid this scenario?\"></a>How does React avoid this scenario?</h3><p>React sets up an interval for running JavaScript tasks (5ms).<br>When running out of this interval, React will pause its current tasks and give back control to the main thread, letting it perform high priority tasks (painting or user events).<br>After the main thread has finished prioritized jobs, React goes back to where it stopped and continues working.</p>\n<p>As you may have noticed, the key here is to make React interruptible.</p>\n<h2 id=\"Time-Slicing-and-Interruptible-React\"><a href=\"#Time-Slicing-and-Interruptible-React\" class=\"headerlink\" title=\"Time Slicing and Interruptible React\"></a>Time Slicing and Interruptible React</h2><p>Assume we have a large application with 500+ components to render.</p>\n<h3 id=\"While-rendering-these-components-how-does-React-ensure-responsiveness-for-keyboard-or-mouse-events\"><a href=\"#While-rendering-these-components-how-does-React-ensure-responsiveness-for-keyboard-or-mouse-events\" class=\"headerlink\" title=\"While rendering these components, how does React ensure responsiveness for keyboard or mouse events?\"></a>While rendering these components, how does React ensure responsiveness for keyboard or mouse events?</h3><p>Before React 16, the render phase was synchronize and uninterruptible.<br>The browser therefore would be easily occupied by CPU-hungry tasks,<br>and unable to give prompt responses to user events.<br>Take a look at <a href=\"https://www.youtube.com/watch?v=nLF0n9SACd4\">this video</a> to see what CPU-heavy tasks could be like.</p>\n<h3 id=\"So-how-did-React-overcome-this\"><a href=\"#So-how-did-React-overcome-this\" class=\"headerlink\" title=\"So, how did React overcome this?\"></a>So, how did React overcome this?</h3><p>Answer: Time Slicing.</p>\n<p>Here is a <a href=\"https://twitter.com/acdlite/status/977291318324948992\">picture</a> of time slicing in React (idea of Andrew Clark from the React core team).</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/211950568-f4b85e7a-91d6-4a5a-9b97-c949a14e4282.png\" alt=\"time_slicing\"></p>\n<h3 id=\"Interruptible-render-phase\"><a href=\"#Interruptible-render-phase\" class=\"headerlink\" title=\"Interruptible render phase\"></a>Interruptible render phase</h3><p>After version 16, React started using Fiber reconciler to ensure the render phase is interruptible. It breaks down the render phase into time slices so that it can pause current work to run more urgent tasks, like user inputs.<br>As shown in the above picture, time slicing enables browser events to cut in line during the render phase. This helps React to avoid “hiccup” moments.</p>\n<h3 id=\"Uninterruptible-commit-phase\"><a href=\"#Uninterruptible-commit-phase\" class=\"headerlink\" title=\"Uninterruptible commit phase\"></a>Uninterruptible commit phase</h3><p>Unlike the render phase, the commit phase can not be interrupted.<br>You can think of these two like a movie screenplay and a movie on show.<br>When a movie is on (the commit phase), theatres will not suddenly stop playing or change its order of scenes. Just like React will not draw some semi-calculated UI or suddenly stop the commit phase.</p>\n<h2 id=\"Interruptible-Work-Loop\"><a href=\"#Interruptible-Work-Loop\" class=\"headerlink\" title=\"Interruptible Work Loop\"></a>Interruptible Work Loop</h2><p>Before version 16, React reconciler is implemented by call stack recursion. However, stack Reconciliation will not allow pauses on the running render phase.<br>As mentioned earlier, a high performance render phase is time sliced and interruptible. To implement this, we can change the call stack recursion to conditional while loop recursion:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deadline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> shouldYield <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>shouldYield<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// next workInprogress is set within performUnitOfWork</span>\n        <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>\n            workInProgress \n        <span class=\"token punctuation\">)</span>\n        shouldYield <span class=\"token operator\">=</span> deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>workLoop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>while (workInProgress !&#x3D;&#x3D; null &amp;&amp; !shouldYield)<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>This enables us to stop the workLoop, especially when there is no time left in each frame (shouldYield).  </p></blockquote>\n</li>\n<li>requestIdleCallback<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Check whether the main thread is idle for running sliced tasks.</p></blockquote>\n</li>\n</ul>\n<h2 id=\"Fiber-Reconciler\"><a href=\"#Fiber-Reconciler\" class=\"headerlink\" title=\"Fiber Reconciler\"></a>Fiber Reconciler</h2><p>This interruptable reconciler is called Fiber reconciler in React.<br>To know more about React Fiber, take a look at this post first: <a href=\"https://flaming-cl.github.io/post/react-fiber-tree\">React Fiber Tree</a>.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[1] <a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\">Sneak Peek: Beyond React 16, Dan Abramov</a><br>[1] <a href=\"https://pomb.us/build-your-own-react/\">Build your own React, Rodrigo Pombo</a><br>[2] <a href=\"https://javascript.info/event-loop\">Event loop: microtasks and macrotasks, javascript.info</a><br>[3] <a href=\"https://twitter.com/acdlite/status/977291318324948992\">Visualization of async rendering and synchronous rendering in React, Andrew Clark</a><br>[4] <a href=\"https://reactjs.org/docs/reconciliation.html\">Reconciliation, React official documents</a><br>[5] <a href=\"https://web.dev/rendering-performance/\">Rendering Performance, Paul Lewis</a><br>[6] <a href=\"https://www.w3.org/TR/frame-timing/\">Frame timing, W3C</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>You may have heard people saying “React is fast” as it uses virtual DOM.<br>But is virtual DOM the only thing you can think of when talking about React performance?<br>In fact React has done many things to handle performance issues.</p>\n<p>Today I will talk about Time Slicing.<br>A technique React uses to solve performance bottleneck.</p>\n<h2 id=\"Event-Loop-and-CPU-bottlenecks\"><a href=\"#Event-Loop-and-CPU-bottlenecks\" class=\"headerlink\" title=\"Event Loop and CPU bottlenecks\"></a>Event Loop and CPU bottlenecks</h2><h3 id=\"Event-Loop\"><a href=\"#Event-Loop\" class=\"headerlink\" title=\"Event Loop\"></a>Event Loop</h3><p>Modern browsers run a continuous event loop at a certain frequency - e.g. 60Hz (refresh 60 times a second). For smooth and responsive experience, browsers try to complete tasks within each event loop execution, aka a frame.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/209892101-70af523b-4bf5-45ba-9aef-b01ac11f9b70.png\" alt=\"event-loop-frame\"></p>\n<p>For 60Hz refresh rate devices, each execution frame has a budget of 16.66ms (1 second &#x2F; 60).</p>\n<h3 id=\"CPU-bottlenecks\"><a href=\"#CPU-bottlenecks\" class=\"headerlink\" title=\"CPU bottlenecks\"></a>CPU bottlenecks</h3><p>Within such a shoestring budget, browsers have to handle a pipeline of work like this:</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/209890234-985a0618-b856-414d-999e-f41823756b9b.png\" alt=\"frame_pipeline\"></p>\n<p>If any step in this pipeline needs more than 16.66ms, no time will be left for the upcoming work in this frame.<br>This means we will not have time for style calculations, layout, paint and compositing, when we spend too much time on JavaScript jobs.<br>When this lasts for 2 or 3 seconds, users will feel your website is slow.</p>\n<h3 id=\"How-does-React-avoid-this-scenario\"><a href=\"#How-does-React-avoid-this-scenario\" class=\"headerlink\" title=\"How does React avoid this scenario?\"></a>How does React avoid this scenario?</h3><p>React sets up an interval for running JavaScript tasks (5ms).<br>When running out of this interval, React will pause its current tasks and give back control to the main thread, letting it perform high priority tasks (painting or user events).<br>After the main thread has finished prioritized jobs, React goes back to where it stopped and continues working.</p>\n<p>As you may have noticed, the key here is to make React interruptible.</p>\n<h2 id=\"Time-Slicing-and-Interruptible-React\"><a href=\"#Time-Slicing-and-Interruptible-React\" class=\"headerlink\" title=\"Time Slicing and Interruptible React\"></a>Time Slicing and Interruptible React</h2><p>Assume we have a large application with 500+ components to render.</p>\n<h3 id=\"While-rendering-these-components-how-does-React-ensure-responsiveness-for-keyboard-or-mouse-events\"><a href=\"#While-rendering-these-components-how-does-React-ensure-responsiveness-for-keyboard-or-mouse-events\" class=\"headerlink\" title=\"While rendering these components, how does React ensure responsiveness for keyboard or mouse events?\"></a>While rendering these components, how does React ensure responsiveness for keyboard or mouse events?</h3><p>Before React 16, the render phase was synchronize and uninterruptible.<br>The browser therefore would be easily occupied by CPU-hungry tasks,<br>and unable to give prompt responses to user events.<br>Take a look at <a href=\"https://www.youtube.com/watch?v=nLF0n9SACd4\">this video</a> to see what CPU-heavy tasks could be like.</p>\n<h3 id=\"So-how-did-React-overcome-this\"><a href=\"#So-how-did-React-overcome-this\" class=\"headerlink\" title=\"So, how did React overcome this?\"></a>So, how did React overcome this?</h3><p>Answer: Time Slicing.</p>\n<p>Here is a <a href=\"https://twitter.com/acdlite/status/977291318324948992\">picture</a> of time slicing in React (idea of Andrew Clark from the React core team).</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/211950568-f4b85e7a-91d6-4a5a-9b97-c949a14e4282.png\" alt=\"time_slicing\"></p>\n<h3 id=\"Interruptible-render-phase\"><a href=\"#Interruptible-render-phase\" class=\"headerlink\" title=\"Interruptible render phase\"></a>Interruptible render phase</h3><p>After version 16, React started using Fiber reconciler to ensure the render phase is interruptible. It breaks down the render phase into time slices so that it can pause current work to run more urgent tasks, like user inputs.<br>As shown in the above picture, time slicing enables browser events to cut in line during the render phase. This helps React to avoid “hiccup” moments.</p>\n<h3 id=\"Uninterruptible-commit-phase\"><a href=\"#Uninterruptible-commit-phase\" class=\"headerlink\" title=\"Uninterruptible commit phase\"></a>Uninterruptible commit phase</h3><p>Unlike the render phase, the commit phase can not be interrupted.<br>You can think of these two like a movie screenplay and a movie on show.<br>When a movie is on (the commit phase), theatres will not suddenly stop playing or change its order of scenes. Just like React will not draw some semi-calculated UI or suddenly stop the commit phase.</p>\n<h2 id=\"Interruptible-Work-Loop\"><a href=\"#Interruptible-Work-Loop\" class=\"headerlink\" title=\"Interruptible Work Loop\"></a>Interruptible Work Loop</h2><p>Before version 16, React reconciler is implemented by call stack recursion. However, stack Reconciliation will not allow pauses on the running render phase.<br>As mentioned earlier, a high performance render phase is time sliced and interruptible. To implement this, we can change the call stack recursion to conditional while loop recursion:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deadline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> shouldYield <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>shouldYield<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// next workInprogress is set within performUnitOfWork</span>\n        <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>\n            workInProgress \n        <span class=\"token punctuation\">)</span>\n        shouldYield <span class=\"token operator\">=</span> deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>workLoop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>while (workInProgress !&#x3D;&#x3D; null &amp;&amp; !shouldYield)<blockquote>\n<p>This enables us to stop the workLoop, especially when there is no time left in each frame (shouldYield).  </p>\n</blockquote>\n</li>\n<li>requestIdleCallback<blockquote>\n<p>Check whether the main thread is idle for running sliced tasks.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Fiber-Reconciler\"><a href=\"#Fiber-Reconciler\" class=\"headerlink\" title=\"Fiber Reconciler\"></a>Fiber Reconciler</h2><p>This interruptable reconciler is called Fiber reconciler in React.<br>To know more about React Fiber, take a look at this post first: <a href=\"https://flaming-cl.github.io/post/react-fiber-tree\">React Fiber Tree</a>.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[1] <a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\">Sneak Peek: Beyond React 16, Dan Abramov</a><br>[1] <a href=\"https://pomb.us/build-your-own-react/\">Build your own React, Rodrigo Pombo</a><br>[2] <a href=\"https://javascript.info/event-loop\">Event loop: microtasks and macrotasks, javascript.info</a><br>[3] <a href=\"https://twitter.com/acdlite/status/977291318324948992\">Visualization of async rendering and synchronous rendering in React, Andrew Clark</a><br>[4] <a href=\"https://reactjs.org/docs/reconciliation.html\">Reconciliation, React official documents</a><br>[5] <a href=\"https://web.dev/rendering-performance/\">Rendering Performance, Paul Lewis</a><br>[6] <a href=\"https://www.w3.org/TR/frame-timing/\">Frame timing, W3C</a></p>\n"},{"title":"Best Practice of using ref in React hooks","date":"2023-02-28T20:54:29.000Z","_content":"\nIn this article, we'll be discussing a best practice for using useRef in React, as well as delving into the reasons behind it.\n\nLet's first look at a piece of code. What will be logged by this code in the end?\n```js\nimport React, { useState, useRef, useEffect } from 'react';\nimport ReactDOM from 'react-dom'\n\nfunction App() {\n  const [show, setShow] = useState(true)\n  return <div>\n    {show && <Child unmount={() => setShow(false)} />}\n  </div>;\n}\n\nfunction Child({ unmount }) {\n  const isMounted = useIsMounted()\n  useEffect(() => {\n    console.log(isMounted)\n    Promise.resolve(true).then(() => {\n      console.log(isMounted)\n    });\n    unmount(); \n  }, []);\n\n  return null;\n};\n\nfunction useIsMounted() {\n  const isMounted = useRef(false);\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => isMounted.current = false;\n  }, []);\n\n  return isMounted.current;\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App/>)\n```\n<details><summary><b>Answer (click me)</b></summary>\n<p>\n\n```js\n// mount \nfalse\n// update\nfalse\n```\n\n```jsx\nfunction Child({ unmount }) {\n  const isMounted = useIsMounted() // mounting\n  useEffect(() => {\n    console.log(isMounted) // mounted\n    Promise.resolve(true).then(() => {\n      console.log(isMounted) // update\n    });\n    unmount(); // called when mounted, cause an update\n  }, []);\n\n  return null;\n};\n\nfunction useIsMounted() {\n  const isMounted = useRef(false); // mounting\n\n  useEffect(() => {\n    isMounted.current = true; // mounted\n    return () => isMounted.current = false; // cleanup function called during next update\n  }, []);\n\n  return isMounted.current; // mounting\n}\n```\n\n</p>\n</details>\n\n## Why the above code does not work as expected?\n### Primitive V.S. Reference Data type in JavaScript\n![image](https://user-images.githubusercontent.com/51183663/221996628-e8465f1a-21ec-4f42-838d-a6b41ad17047.png)\nWhen you create a copy of a primitive value, such as a string or a number, it is completely independent of the original value. In other words, changing the copy will not affect the original value in any way.\n\nHowever, when you make a copy of reference data, such as an object or an array, it's like duplicating a key to a house. If you use this copied key to enter the house and make any changes to the interior, these modifications will be reflected for anyone else who also has access to this house.\n\n### How primitive data affected the `useIsMounted` hook?\nThe value returned by ```useIsMounted``` is a snapshot of a primitive value during mounting, and any changes made to the ref after that moment will not affect this initially returned value.\n\nIt's worth noting that `refs` does not automatically trigger a re-rendering. As a result, the initial value of isMounted```false``` is called twice.\n\n### Closure in hooks\nYou may also be curious about why `console.log(isMounted)` called with `Promise` is still false. To understand this, you need a little background knowledge about the execution context of each effect in React.\n\nYou can think of each render in React as a layer of dreams in the movie \"Inception\": \n*Data that `useEffect` can directly access is not infinite in time and space.*\nIt can only read the execution context that was created, when the `useEffect` was called.\n\nSo, although each update cycle in React will create a new execution context, some hooks might still refer to its old context.\n\nThis is why the Promise `console.log(isMounted)` still showed the initial `isMounted` value, even after `unmount()` triggered a new update cycle.\n\n## How should we modify the above code to make it work as expected?\nBefore answering this question, let's do another quiz:    \nWhat will be printed after runing the below code?\n```js\nimport React, { useState, useRef, useEffect } from \"react\";\nimport ReactDOM from 'react-dom/client';\n\nfunction App() {\n  const [show, setShow] = useState(true);\n  return <div>{show && <Child setShow={setShow} />}</div>;\n}\n\nfunction Child({ setShow }) {\n  const isMounted = useIsMounted();\n\n  useEffect(() => {\n    console.log(isMounted.current);\n    setShow(() => {\n      console.log('update state');\n      return false;\n    });\n  }, []);\n\n  return null;\n}\n\nfunction useIsMounted() {\n  const isMounted = useRef(2);\n\n  useEffect(() => {\n    isMounted.current += 3;\n    return () => {\n      isMounted.current *= 2\n      console.log(isMounted.current);\n    };\n  }, []);\n\n  return isMounted;\n}\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\nroot.render(< App />)\n```\n<details><summary><b>Answer (click me)</b></summary>\n<p>\n\n```js\n// mounted\n5\n\"update state\"\n// after state updated\n10\n```\n\n</p>\n</details>\n\n### Explanation\nInstead of returning the `isMounted.current` value, we are now returning the entire `isMounted object`. This means, although our reference key (the ref object) was created during mounting, we still can refer to an updated version of the `isMounted ref` in the componentDidMount lifecycle.\n\nIn this case, the logged `isMounted.current` values are as expected:\n- **5**: After mounting, the `isMounted.current` value is 5, which is updated by the `useEffect` function in the custom hook.\n- **10**: When `setShow` is triggered, it triggers a re-render of the App component, which causes the Child component to be unmounted and the cleanup function of `useIsMounted` to be called.\n \n(**A tip on useEffect cleanup**: React will call your cleanup function each time before the Effect runs again, before the related component unmount)\n\nAs a result, isMounted.current = 10    \n\n## A secret behind `useRef`\nThe ref returned by `useIsMounted` references the same ref object during each rendering (to understand it, try to log `isMounted` in the above code).\n```typescript jsx\nimport React, { useState, useRef, useEffect } from \"react\";\nimport ReactDOM from 'react-dom/client';\n\nfunction App() {\n  const [show, setShow] = useState(true);\n  return <div>{show && <Child setShow={setShow} />}</div>;\n}\n\nfunction Child({ setShow }) {\n  const isMounted = useIsMounted();\n\n  useEffect(() => {\n    console.log(isMounted);\n    setShow(() => {\n      console.log('update state');\n      return false;\n    });\n  }, []);\n\n  return null;\n}\n\nfunction useIsMounted() {\n  const isMounted = useRef(2);\n\n  useEffect(() => {\n    isMounted.current += 3;\n    return () => {\n      isMounted.current *= 2\n      console.log(isMounted);\n    };\n  }, []);\n\n  return isMounted;\n}\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\nroot.render(< App />)\n```\n\nCan you take a guess on what will be logged by this code?\n<details><summary><b>Answer (click me)</b></summary>\n<p>\n\n```js\n{current: 10}\n'update state' \n{current: 10}\n```\n\n</p>\n</details>\n\n### Explanation\nTo understand this, let's look at the source code of updating refs in React:\n```typescript\nfunction updateRef<T>(initialValue: T): {current: T} {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n```\nAs you can see, the updated ref object always refers to the initial one.\nThis explains why you see `{current: 10}` before 'update state':\n*The ref always points to the same object, and `{content:10}` is showing its most recent value.*\nIf you want a ref to reflect data changes more accurately, you can convert the ref object to a string or call ref.current.\n\n## Recap: best practice of returning a ref in custom hooks\n1. return the ref object itself\n2. call ref.current to access the latest value\n\n","source":"_posts/best-practice-of-useRef-and-why.md","raw":"---\ntitle: Best Practice of using ref in React hooks\ndate: 2023-02-28 15:54:29\ntags: React\n---\n\nIn this article, we'll be discussing a best practice for using useRef in React, as well as delving into the reasons behind it.\n\nLet's first look at a piece of code. What will be logged by this code in the end?\n```js\nimport React, { useState, useRef, useEffect } from 'react';\nimport ReactDOM from 'react-dom'\n\nfunction App() {\n  const [show, setShow] = useState(true)\n  return <div>\n    {show && <Child unmount={() => setShow(false)} />}\n  </div>;\n}\n\nfunction Child({ unmount }) {\n  const isMounted = useIsMounted()\n  useEffect(() => {\n    console.log(isMounted)\n    Promise.resolve(true).then(() => {\n      console.log(isMounted)\n    });\n    unmount(); \n  }, []);\n\n  return null;\n};\n\nfunction useIsMounted() {\n  const isMounted = useRef(false);\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => isMounted.current = false;\n  }, []);\n\n  return isMounted.current;\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App/>)\n```\n<details><summary><b>Answer (click me)</b></summary>\n<p>\n\n```js\n// mount \nfalse\n// update\nfalse\n```\n\n```jsx\nfunction Child({ unmount }) {\n  const isMounted = useIsMounted() // mounting\n  useEffect(() => {\n    console.log(isMounted) // mounted\n    Promise.resolve(true).then(() => {\n      console.log(isMounted) // update\n    });\n    unmount(); // called when mounted, cause an update\n  }, []);\n\n  return null;\n};\n\nfunction useIsMounted() {\n  const isMounted = useRef(false); // mounting\n\n  useEffect(() => {\n    isMounted.current = true; // mounted\n    return () => isMounted.current = false; // cleanup function called during next update\n  }, []);\n\n  return isMounted.current; // mounting\n}\n```\n\n</p>\n</details>\n\n## Why the above code does not work as expected?\n### Primitive V.S. Reference Data type in JavaScript\n![image](https://user-images.githubusercontent.com/51183663/221996628-e8465f1a-21ec-4f42-838d-a6b41ad17047.png)\nWhen you create a copy of a primitive value, such as a string or a number, it is completely independent of the original value. In other words, changing the copy will not affect the original value in any way.\n\nHowever, when you make a copy of reference data, such as an object or an array, it's like duplicating a key to a house. If you use this copied key to enter the house and make any changes to the interior, these modifications will be reflected for anyone else who also has access to this house.\n\n### How primitive data affected the `useIsMounted` hook?\nThe value returned by ```useIsMounted``` is a snapshot of a primitive value during mounting, and any changes made to the ref after that moment will not affect this initially returned value.\n\nIt's worth noting that `refs` does not automatically trigger a re-rendering. As a result, the initial value of isMounted```false``` is called twice.\n\n### Closure in hooks\nYou may also be curious about why `console.log(isMounted)` called with `Promise` is still false. To understand this, you need a little background knowledge about the execution context of each effect in React.\n\nYou can think of each render in React as a layer of dreams in the movie \"Inception\": \n*Data that `useEffect` can directly access is not infinite in time and space.*\nIt can only read the execution context that was created, when the `useEffect` was called.\n\nSo, although each update cycle in React will create a new execution context, some hooks might still refer to its old context.\n\nThis is why the Promise `console.log(isMounted)` still showed the initial `isMounted` value, even after `unmount()` triggered a new update cycle.\n\n## How should we modify the above code to make it work as expected?\nBefore answering this question, let's do another quiz:    \nWhat will be printed after runing the below code?\n```js\nimport React, { useState, useRef, useEffect } from \"react\";\nimport ReactDOM from 'react-dom/client';\n\nfunction App() {\n  const [show, setShow] = useState(true);\n  return <div>{show && <Child setShow={setShow} />}</div>;\n}\n\nfunction Child({ setShow }) {\n  const isMounted = useIsMounted();\n\n  useEffect(() => {\n    console.log(isMounted.current);\n    setShow(() => {\n      console.log('update state');\n      return false;\n    });\n  }, []);\n\n  return null;\n}\n\nfunction useIsMounted() {\n  const isMounted = useRef(2);\n\n  useEffect(() => {\n    isMounted.current += 3;\n    return () => {\n      isMounted.current *= 2\n      console.log(isMounted.current);\n    };\n  }, []);\n\n  return isMounted;\n}\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\nroot.render(< App />)\n```\n<details><summary><b>Answer (click me)</b></summary>\n<p>\n\n```js\n// mounted\n5\n\"update state\"\n// after state updated\n10\n```\n\n</p>\n</details>\n\n### Explanation\nInstead of returning the `isMounted.current` value, we are now returning the entire `isMounted object`. This means, although our reference key (the ref object) was created during mounting, we still can refer to an updated version of the `isMounted ref` in the componentDidMount lifecycle.\n\nIn this case, the logged `isMounted.current` values are as expected:\n- **5**: After mounting, the `isMounted.current` value is 5, which is updated by the `useEffect` function in the custom hook.\n- **10**: When `setShow` is triggered, it triggers a re-render of the App component, which causes the Child component to be unmounted and the cleanup function of `useIsMounted` to be called.\n \n(**A tip on useEffect cleanup**: React will call your cleanup function each time before the Effect runs again, before the related component unmount)\n\nAs a result, isMounted.current = 10    \n\n## A secret behind `useRef`\nThe ref returned by `useIsMounted` references the same ref object during each rendering (to understand it, try to log `isMounted` in the above code).\n```typescript jsx\nimport React, { useState, useRef, useEffect } from \"react\";\nimport ReactDOM from 'react-dom/client';\n\nfunction App() {\n  const [show, setShow] = useState(true);\n  return <div>{show && <Child setShow={setShow} />}</div>;\n}\n\nfunction Child({ setShow }) {\n  const isMounted = useIsMounted();\n\n  useEffect(() => {\n    console.log(isMounted);\n    setShow(() => {\n      console.log('update state');\n      return false;\n    });\n  }, []);\n\n  return null;\n}\n\nfunction useIsMounted() {\n  const isMounted = useRef(2);\n\n  useEffect(() => {\n    isMounted.current += 3;\n    return () => {\n      isMounted.current *= 2\n      console.log(isMounted);\n    };\n  }, []);\n\n  return isMounted;\n}\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\nroot.render(< App />)\n```\n\nCan you take a guess on what will be logged by this code?\n<details><summary><b>Answer (click me)</b></summary>\n<p>\n\n```js\n{current: 10}\n'update state' \n{current: 10}\n```\n\n</p>\n</details>\n\n### Explanation\nTo understand this, let's look at the source code of updating refs in React:\n```typescript\nfunction updateRef<T>(initialValue: T): {current: T} {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n```\nAs you can see, the updated ref object always refers to the initial one.\nThis explains why you see `{current: 10}` before 'update state':\n*The ref always points to the same object, and `{content:10}` is showing its most recent value.*\nIf you want a ref to reflect data changes more accurately, you can convert the ref object to a string or call ref.current.\n\n## Recap: best practice of returning a ref in custom hooks\n1. return the ref object itself\n2. call ref.current to access the latest value\n\n","slug":"best-practice-of-useRef-and-why","published":1,"updated":"2023-03-27T03:41:42.362Z","_id":"cleoqandg0000bfpn44flad8r","comments":1,"layout":"post","photos":[],"link":"","content":"<p>In this article, we’ll be discussing a best practice for using useRef in React, as well as delving into the reasons behind it.</p>\n<p>Let’s first look at a piece of code. What will be logged by this code in the end?</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState<span class=\"token punctuation\">,</span> useRef<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>show<span class=\"token punctuation\">,</span> setShow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#123;</span>show <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>Child unmount<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShow</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> unmount <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> isMounted <span class=\"token operator\">=</span> <span class=\"token function\">useIsMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span>\n    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useIsMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> isMounted <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    isMounted<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> isMounted<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isMounted<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<details><summary><b>Answer (click me)</b></summary>\n<p>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// mount </span>\n<span class=\"token boolean\">false</span>\n<span class=\"token comment\">// update</span>\n<span class=\"token boolean\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">function Child(&#123; unmount &#125;) &#123;\n  const isMounted &#x3D; useIsMounted() &#x2F;&#x2F; mounting\n  useEffect(() &#x3D;&gt; &#123;\n    console.log(isMounted) &#x2F;&#x2F; mounted\n    Promise.resolve(true).then(() &#x3D;&gt; &#123;\n      console.log(isMounted) &#x2F;&#x2F; update\n    &#125;);\n    unmount(); &#x2F;&#x2F; called when mounted, cause an update\n  &#125;, []);\n\n  return null;\n&#125;;\n\nfunction useIsMounted() &#123;\n  const isMounted &#x3D; useRef(false); &#x2F;&#x2F; mounting\n\n  useEffect(() &#x3D;&gt; &#123;\n    isMounted.current &#x3D; true; &#x2F;&#x2F; mounted\n    return () &#x3D;&gt; isMounted.current &#x3D; false; &#x2F;&#x2F; cleanup function called during next update\n  &#125;, []);\n\n  return isMounted.current; &#x2F;&#x2F; mounting\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n\n<h2 id=\"Why-the-above-code-does-not-work-as-expected\"><a href=\"#Why-the-above-code-does-not-work-as-expected\" class=\"headerlink\" title=\"Why the above code does not work as expected?\"></a>Why the above code does not work as expected?</h2><h3 id=\"Primitive-V-S-Reference-Data-type-in-JavaScript\"><a href=\"#Primitive-V-S-Reference-Data-type-in-JavaScript\" class=\"headerlink\" title=\"Primitive V.S. Reference Data type in JavaScript\"></a>Primitive V.S. Reference Data type in JavaScript</h3><p><img src=\"https://user-images.githubusercontent.com/51183663/221996628-e8465f1a-21ec-4f42-838d-a6b41ad17047.png\" alt=\"image\"><br>When you create a copy of a primitive value, such as a string or a number, it is completely independent of the original value. In other words, changing the copy will not affect the original value in any way.</p>\n<p>However, when you make a copy of reference data, such as an object or an array, it’s like duplicating a key to a house. If you use this copied key to enter the house and make any changes to the interior, these modifications will be reflected for anyone else who also has access to this house.</p>\n<h3 id=\"How-primitive-data-affected-the-useIsMounted-hook\"><a href=\"#How-primitive-data-affected-the-useIsMounted-hook\" class=\"headerlink\" title=\"How primitive data affected the useIsMounted hook?\"></a>How primitive data affected the <code>useIsMounted</code> hook?</h3><p>The value returned by <code>useIsMounted</code> is a snapshot of a primitive value during mounting, and any changes made to the ref after that moment will not affect this initially returned value.</p>\n<p>It’s worth noting that <code>refs</code> does not automatically trigger a re-rendering. As a result, the initial value of isMounted<code>false</code> is called twice.</p>\n<h3 id=\"Closure-in-hooks\"><a href=\"#Closure-in-hooks\" class=\"headerlink\" title=\"Closure in hooks\"></a>Closure in hooks</h3><p>You may also be curious about why <code>console.log(isMounted)</code> called with <code>Promise</code> is still false. To understand this, you need a little background knowledge about the execution context of each effect in React.</p>\n<p>You can think of each render in React as a layer of dreams in the movie “Inception”:<br><em>Data that <code>useEffect</code> can directly access is not infinite in time and space.</em><br>It can only read the execution context that was created, when the <code>useEffect</code> was called.</p>\n<p>So, although each update cycle in React will create a new execution context, some hooks might still refer to its old context.</p>\n<p>This is why the Promise <code>console.log(isMounted)</code> still showed the initial <code>isMounted</code> value, even after <code>unmount()</code> triggered a new update cycle.</p>\n<h2 id=\"How-should-we-modify-the-above-code-to-make-it-work-as-expected\"><a href=\"#How-should-we-modify-the-above-code-to-make-it-work-as-expected\" class=\"headerlink\" title=\"How should we modify the above code to make it work as expected?\"></a>How should we modify the above code to make it work as expected?</h2><p>Before answering this question, let’s do another quiz:<br>What will be printed after runing the below code?</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState<span class=\"token punctuation\">,</span> useRef<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>show<span class=\"token punctuation\">,</span> setShow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>show <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>Child setShow<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>setShow<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> setShow <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> isMounted <span class=\"token operator\">=</span> <span class=\"token function\">useIsMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setShow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'update state'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useIsMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> isMounted <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    isMounted<span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      isMounted<span class=\"token punctuation\">.</span>current <span class=\"token operator\">*=</span> <span class=\"token number\">2</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isMounted<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span> App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<details><summary><b>Answer (click me)</b></summary>\n<p>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// mounted</span>\n<span class=\"token number\">5</span>\n<span class=\"token string\">\"update state\"</span>\n<span class=\"token comment\">// after state updated</span>\n<span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n\n<h3 id=\"Explanation\"><a href=\"#Explanation\" class=\"headerlink\" title=\"Explanation\"></a>Explanation</h3><p>Instead of returning the <code>isMounted.current</code> value, we are now returning the entire <code>isMounted object</code>. This means, although our reference key (the ref object) was created during mounting, we still can refer to an updated version of the <code>isMounted ref</code> in the componentDidMount lifecycle.</p>\n<p>In this case, the logged <code>isMounted.current</code> values are as expected:</p>\n<ul>\n<li><strong>5</strong>: After mounting, the <code>isMounted.current</code> value is 5, which is updated by the <code>useEffect</code> function in the custom hook.</li>\n<li><strong>10</strong>: When <code>setShow</code> is triggered, it triggers a re-render of the App component, which causes the Child component to be unmounted and the cleanup function of <code>useIsMounted</code> to be called.</li>\n</ul>\n<p>(<strong>A tip on useEffect cleanup</strong>: React will call your cleanup function each time before the Effect runs again, before the related component unmount)</p>\n<p>As a result, isMounted.current &#x3D; 10    </p>\n<h2 id=\"A-secret-behind-useRef\"><a href=\"#A-secret-behind-useRef\" class=\"headerlink\" title=\"A secret behind useRef\"></a>A secret behind <code>useRef</code></h2><p>The ref returned by <code>useIsMounted</code> references the same ref object during each rendering (to understand it, try to log <code>isMounted</code> in the above code).</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><div class=\"caption\"><span>jsx</span></div><code class=\"language-typescript\">import React, &#123; useState, useRef, useEffect &#125; from &quot;react&quot;;\nimport ReactDOM from &#39;react-dom&#x2F;client&#39;;\n\nfunction App() &#123;\n  const [show, setShow] &#x3D; useState(true);\n  return &lt;div&gt;&#123;show &amp;&amp; &lt;Child setShow&#x3D;&#123;setShow&#125; &#x2F;&gt;&#125;&lt;&#x2F;div&gt;;\n&#125;\n\nfunction Child(&#123; setShow &#125;) &#123;\n  const isMounted &#x3D; useIsMounted();\n\n  useEffect(() &#x3D;&gt; &#123;\n    console.log(isMounted);\n    setShow(() &#x3D;&gt; &#123;\n      console.log(&#39;update state&#39;);\n      return false;\n    &#125;);\n  &#125;, []);\n\n  return null;\n&#125;\n\nfunction useIsMounted() &#123;\n  const isMounted &#x3D; useRef(2);\n\n  useEffect(() &#x3D;&gt; &#123;\n    isMounted.current +&#x3D; 3;\n    return () &#x3D;&gt; &#123;\n      isMounted.current *&#x3D; 2\n      console.log(isMounted);\n    &#125;;\n  &#125;, []);\n\n  return isMounted;\n&#125;\n\nconst root &#x3D; ReactDOM.createRoot(\n  document.getElementById(&#39;root&#39;)\n);\nroot.render(&lt; App &#x2F;&gt;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Can you take a guess on what will be logged by this code?</p>\n<details><summary><b>Answer (click me)</b></summary>\n<p>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">current</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token string\">'update state'</span> \n<span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">current</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n\n<h3 id=\"Explanation-1\"><a href=\"#Explanation-1\" class=\"headerlink\" title=\"Explanation\"></a>Explanation</h3><p>To understand this, let’s look at the source code of updating refs in React:</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function updateRef&lt;T&gt;(initialValue: T): &#123;current: T&#125; &#123;\n  const hook &#x3D; updateWorkInProgressHook();\n  return hook.memoizedState;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>As you can see, the updated ref object always refers to the initial one.<br>This explains why you see <code>&#123;current: 10&#125;</code> before ‘update state’:<br><em>The ref always points to the same object, and <code>&#123;content:10&#125;</code> is showing its most recent value.</em><br>If you want a ref to reflect data changes more accurately, you can convert the ref object to a string or call ref.current.</p>\n<h2 id=\"Recap-best-practice-of-returning-a-ref-in-custom-hooks\"><a href=\"#Recap-best-practice-of-returning-a-ref-in-custom-hooks\" class=\"headerlink\" title=\"Recap: best practice of returning a ref in custom hooks\"></a>Recap: best practice of returning a ref in custom hooks</h2><ol>\n<li>return the ref object itself</li>\n<li>call ref.current to access the latest value</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>In this article, we’ll be discussing a best practice for using useRef in React, as well as delving into the reasons behind it.</p>\n<p>Let’s first look at a piece of code. What will be logged by this code in the end?</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState<span class=\"token punctuation\">,</span> useRef<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>show<span class=\"token punctuation\">,</span> setShow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">&#123;</span>show <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>Child unmount<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShow</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> unmount <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> isMounted <span class=\"token operator\">=</span> <span class=\"token function\">useIsMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span>\n    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useIsMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> isMounted <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    isMounted<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> isMounted<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isMounted<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<details><summary><b>Answer (click me)</b></summary>\n<p>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// mount </span>\n<span class=\"token boolean\">false</span>\n<span class=\"token comment\">// update</span>\n<span class=\"token boolean\">false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">function Child(&#123; unmount &#125;) &#123;\n  const isMounted &#x3D; useIsMounted() &#x2F;&#x2F; mounting\n  useEffect(() &#x3D;&gt; &#123;\n    console.log(isMounted) &#x2F;&#x2F; mounted\n    Promise.resolve(true).then(() &#x3D;&gt; &#123;\n      console.log(isMounted) &#x2F;&#x2F; update\n    &#125;);\n    unmount(); &#x2F;&#x2F; called when mounted, cause an update\n  &#125;, []);\n\n  return null;\n&#125;;\n\nfunction useIsMounted() &#123;\n  const isMounted &#x3D; useRef(false); &#x2F;&#x2F; mounting\n\n  useEffect(() &#x3D;&gt; &#123;\n    isMounted.current &#x3D; true; &#x2F;&#x2F; mounted\n    return () &#x3D;&gt; isMounted.current &#x3D; false; &#x2F;&#x2F; cleanup function called during next update\n  &#125;, []);\n\n  return isMounted.current; &#x2F;&#x2F; mounting\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n\n<h2 id=\"Why-the-above-code-does-not-work-as-expected\"><a href=\"#Why-the-above-code-does-not-work-as-expected\" class=\"headerlink\" title=\"Why the above code does not work as expected?\"></a>Why the above code does not work as expected?</h2><h3 id=\"Primitive-V-S-Reference-Data-type-in-JavaScript\"><a href=\"#Primitive-V-S-Reference-Data-type-in-JavaScript\" class=\"headerlink\" title=\"Primitive V.S. Reference Data type in JavaScript\"></a>Primitive V.S. Reference Data type in JavaScript</h3><p><img src=\"https://user-images.githubusercontent.com/51183663/221996628-e8465f1a-21ec-4f42-838d-a6b41ad17047.png\" alt=\"image\"><br>When you create a copy of a primitive value, such as a string or a number, it is completely independent of the original value. In other words, changing the copy will not affect the original value in any way.</p>\n<p>However, when you make a copy of reference data, such as an object or an array, it’s like duplicating a key to a house. If you use this copied key to enter the house and make any changes to the interior, these modifications will be reflected for anyone else who also has access to this house.</p>\n<h3 id=\"How-primitive-data-affected-the-useIsMounted-hook\"><a href=\"#How-primitive-data-affected-the-useIsMounted-hook\" class=\"headerlink\" title=\"How primitive data affected the useIsMounted hook?\"></a>How primitive data affected the <code>useIsMounted</code> hook?</h3><p>The value returned by <code>useIsMounted</code> is a snapshot of a primitive value during mounting, and any changes made to the ref after that moment will not affect this initially returned value.</p>\n<p>It’s worth noting that <code>refs</code> does not automatically trigger a re-rendering. As a result, the initial value of isMounted<code>false</code> is called twice.</p>\n<h3 id=\"Closure-in-hooks\"><a href=\"#Closure-in-hooks\" class=\"headerlink\" title=\"Closure in hooks\"></a>Closure in hooks</h3><p>You may also be curious about why <code>console.log(isMounted)</code> called with <code>Promise</code> is still false. To understand this, you need a little background knowledge about the execution context of each effect in React.</p>\n<p>You can think of each render in React as a layer of dreams in the movie “Inception”:<br><em>Data that <code>useEffect</code> can directly access is not infinite in time and space.</em><br>It can only read the execution context that was created, when the <code>useEffect</code> was called.</p>\n<p>So, although each update cycle in React will create a new execution context, some hooks might still refer to its old context.</p>\n<p>This is why the Promise <code>console.log(isMounted)</code> still showed the initial <code>isMounted</code> value, even after <code>unmount()</code> triggered a new update cycle.</p>\n<h2 id=\"How-should-we-modify-the-above-code-to-make-it-work-as-expected\"><a href=\"#How-should-we-modify-the-above-code-to-make-it-work-as-expected\" class=\"headerlink\" title=\"How should we modify the above code to make it work as expected?\"></a>How should we modify the above code to make it work as expected?</h2><p>Before answering this question, let’s do another quiz:<br>What will be printed after runing the below code?</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState<span class=\"token punctuation\">,</span> useRef<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>show<span class=\"token punctuation\">,</span> setShow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>show <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>Child setShow<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>setShow<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> setShow <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> isMounted <span class=\"token operator\">=</span> <span class=\"token function\">useIsMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setShow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'update state'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useIsMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> isMounted <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    isMounted<span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      isMounted<span class=\"token punctuation\">.</span>current <span class=\"token operator\">*=</span> <span class=\"token number\">2</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> isMounted<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span> App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<details><summary><b>Answer (click me)</b></summary>\n<p>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// mounted</span>\n<span class=\"token number\">5</span>\n<span class=\"token string\">\"update state\"</span>\n<span class=\"token comment\">// after state updated</span>\n<span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n\n<h3 id=\"Explanation\"><a href=\"#Explanation\" class=\"headerlink\" title=\"Explanation\"></a>Explanation</h3><p>Instead of returning the <code>isMounted.current</code> value, we are now returning the entire <code>isMounted object</code>. This means, although our reference key (the ref object) was created during mounting, we still can refer to an updated version of the <code>isMounted ref</code> in the componentDidMount lifecycle.</p>\n<p>In this case, the logged <code>isMounted.current</code> values are as expected:</p>\n<ul>\n<li><strong>5</strong>: After mounting, the <code>isMounted.current</code> value is 5, which is updated by the <code>useEffect</code> function in the custom hook.</li>\n<li><strong>10</strong>: When <code>setShow</code> is triggered, it triggers a re-render of the App component, which causes the Child component to be unmounted and the cleanup function of <code>useIsMounted</code> to be called.</li>\n</ul>\n<p>(<strong>A tip on useEffect cleanup</strong>: React will call your cleanup function each time before the Effect runs again, before the related component unmount)</p>\n<p>As a result, isMounted.current &#x3D; 10    </p>\n<h2 id=\"A-secret-behind-useRef\"><a href=\"#A-secret-behind-useRef\" class=\"headerlink\" title=\"A secret behind useRef\"></a>A secret behind <code>useRef</code></h2><p>The ref returned by <code>useIsMounted</code> references the same ref object during each rendering (to understand it, try to log <code>isMounted</code> in the above code).</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><div class=\"caption\"><span>jsx</span></div><code class=\"language-typescript\">import React, &#123; useState, useRef, useEffect &#125; from &quot;react&quot;;\nimport ReactDOM from &#39;react-dom&#x2F;client&#39;;\n\nfunction App() &#123;\n  const [show, setShow] &#x3D; useState(true);\n  return &lt;div&gt;&#123;show &amp;&amp; &lt;Child setShow&#x3D;&#123;setShow&#125; &#x2F;&gt;&#125;&lt;&#x2F;div&gt;;\n&#125;\n\nfunction Child(&#123; setShow &#125;) &#123;\n  const isMounted &#x3D; useIsMounted();\n\n  useEffect(() &#x3D;&gt; &#123;\n    console.log(isMounted);\n    setShow(() &#x3D;&gt; &#123;\n      console.log(&#39;update state&#39;);\n      return false;\n    &#125;);\n  &#125;, []);\n\n  return null;\n&#125;\n\nfunction useIsMounted() &#123;\n  const isMounted &#x3D; useRef(2);\n\n  useEffect(() &#x3D;&gt; &#123;\n    isMounted.current +&#x3D; 3;\n    return () &#x3D;&gt; &#123;\n      isMounted.current *&#x3D; 2\n      console.log(isMounted);\n    &#125;;\n  &#125;, []);\n\n  return isMounted;\n&#125;\n\nconst root &#x3D; ReactDOM.createRoot(\n  document.getElementById(&#39;root&#39;)\n);\nroot.render(&lt; App &#x2F;&gt;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Can you take a guess on what will be logged by this code?</p>\n<details><summary><b>Answer (click me)</b></summary>\n<p>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">current</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token string\">'update state'</span> \n<span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">current</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n\n<h3 id=\"Explanation-1\"><a href=\"#Explanation-1\" class=\"headerlink\" title=\"Explanation\"></a>Explanation</h3><p>To understand this, let’s look at the source code of updating refs in React:</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function updateRef&lt;T&gt;(initialValue: T): &#123;current: T&#125; &#123;\n  const hook &#x3D; updateWorkInProgressHook();\n  return hook.memoizedState;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>As you can see, the updated ref object always refers to the initial one.<br>This explains why you see <code>&#123;current: 10&#125;</code> before ‘update state’:<br><em>The ref always points to the same object, and <code>&#123;content:10&#125;</code> is showing its most recent value.</em><br>If you want a ref to reflect data changes more accurately, you can convert the ref object to a string or call ref.current.</p>\n<h2 id=\"Recap-best-practice-of-returning-a-ref-in-custom-hooks\"><a href=\"#Recap-best-practice-of-returning-a-ref-in-custom-hooks\" class=\"headerlink\" title=\"Recap: best practice of returning a ref in custom hooks\"></a>Recap: best practice of returning a ref in custom hooks</h2><ol>\n<li>return the ref object itself</li>\n<li>call ref.current to access the latest value</li>\n</ol>\n"},{"title":"Demystifying Closures through Narratives","date":"2023-03-03T01:30:37.000Z","_content":"\nBefore I explain the concept of closure, let me share a story with you.\n\nThe word \"closure\" evokes a tender memory of my visit to Manchester in 2016.\n\nDuring my stay, I had the pleasure of living in an Airbnb home of an 80-year-old lady. The old lady was living alone, and her best friend was a cat named Mavis. In 2016, she did not have a smartphone, and her favorite form of entertainment was listening to the radio.\n\n![image](https://user-images.githubusercontent.com/51183663/222784849-cb99ee40-673d-4e0f-a5c9-35bc510b6f62.png)\n\nToday, I can still envision her silhouette moving gracefully through the kitchen, preparing breakfast while enjoying her favorite radio program.\n\nTimes have certainly changed, yet this elderly lady held onto habits from decades ago until today. \n\n**Now, you may wonder, what does this have to do with closure?**\nWell, let's take a look at the concept of closure:\n> Closure is when a function is able to remember and access its lexical scope even when that function is executing outside its lexical scope.\n> -- You Don't Know JS (1st edition)\n\n**Have you noticed the similarity between an elderly lady who loves listening to the radio and a closure function remembering its original lexical scope?**\n\nIn the story I shared earlier, the elderly lady *(a closure function)*  was born in the 1930s *(its lexical scope)* and developed the habit of getting news from the radio during the time she was born.\n\nLater, when she entered the 2010s *(another lexical scope)*, smartphones had already invaded the lives of almost everybody, but she still retained the habit that she developed in the 1930s——listening to the radio *(access its lexical scope even when that function is executing outside its lexical scope)*.\n\nNow, let's go back to the concept of closure in JavaScript. A closure often has the following characteristics:\n* A function was born in a lexical scope (i.e., the lexical scope where the function was defined).\n* This function remembers and references variables from the birth scope.\n* When this function runs in other scopes, it still uses certain variables from the birth scope.\n\nTo illustrate this with code, it would look like this:\n```js\nfunction year1930s() {\n  const popularMedia = 'Radio';\n  return function ladyS() {\n    console.log(`${popularMedia} is my favorite way to get news.`);\n  }\n}\n\nconst ladyS = year1930s();\n\nfunction year2010s() {\n  const popularMedia = 'Smart phone';\n  ladyS(); \n}\n\nyear2010s(); // \"Radio is my favorite way to get news.\"\n```\n\nTo delve a bit deeper, as the closure function is still using variables from the birth scope, these variables cannot be destroyed and still occupy memory (like after the function year1930s is called, the variable popularMedia is still there).\n\nYeah, in real life, though it’s already the 2020s, home radios haven’t completely disappeared from this world, due to some people’s love for nostalgia.\n\nOf course, there are many other examples that can illustrate how closure works. For instance, many immigrants still have a strong affinity for their hometown food, no matter how long they have lived abroad.\n\nTo describe this with code, it could look like this:\n```js\nfunction lifeInHometown() {\n  const popularFood = '🌶️ beef noodles';\n  return function kidQ() {\n    console.log(`${popularFood} is my favorite food.`);\n  }\n}\n\nconst kidQ = lifeInHometown();\n\nfunction lifeInUK() {\n  const popularFood = 'Fish and chips';\n  kidQ();\n}\n\nlifeInUK(); // \"🌶️ beef noodles is my favorite food.\"\n```\n\nLet’s recap the concept of closure:\n- When there is a closure, it must involve two different lexical scopes:\n  - one is the birth lexical scope A, where the function was defined.\n  - the other is the lexical scope B, where the function is called later.\n- Even if the function leaves its birthplace closure A and runs in another lexical scope, it still remembers some variables defined in A.\n\nBy now, you should have a grasp of what closure is.\n\nHowever, sometimes when people talk about closure, they are not referring to the precise concept of closure. For instance, you might hear people mentioning the term 'closure,' but what they're actually referring to is:\n\n*They have a function that does not reference data from the lexical scope they expected.*\n\nAn example of this is Stale Closure, which often appears in React hooks and is a pain for many beginners. In the next blog post, I will discuss the Stale Closure issue in React hooks in more detail.\n","source":"_posts/closure_stories.md","raw":"---\ntitle: Demystifying Closures through Narratives\ndate: 2023-03-02 20:30:37\ntags: JavaScript\n---\n\nBefore I explain the concept of closure, let me share a story with you.\n\nThe word \"closure\" evokes a tender memory of my visit to Manchester in 2016.\n\nDuring my stay, I had the pleasure of living in an Airbnb home of an 80-year-old lady. The old lady was living alone, and her best friend was a cat named Mavis. In 2016, she did not have a smartphone, and her favorite form of entertainment was listening to the radio.\n\n![image](https://user-images.githubusercontent.com/51183663/222784849-cb99ee40-673d-4e0f-a5c9-35bc510b6f62.png)\n\nToday, I can still envision her silhouette moving gracefully through the kitchen, preparing breakfast while enjoying her favorite radio program.\n\nTimes have certainly changed, yet this elderly lady held onto habits from decades ago until today. \n\n**Now, you may wonder, what does this have to do with closure?**\nWell, let's take a look at the concept of closure:\n> Closure is when a function is able to remember and access its lexical scope even when that function is executing outside its lexical scope.\n> -- You Don't Know JS (1st edition)\n\n**Have you noticed the similarity between an elderly lady who loves listening to the radio and a closure function remembering its original lexical scope?**\n\nIn the story I shared earlier, the elderly lady *(a closure function)*  was born in the 1930s *(its lexical scope)* and developed the habit of getting news from the radio during the time she was born.\n\nLater, when she entered the 2010s *(another lexical scope)*, smartphones had already invaded the lives of almost everybody, but she still retained the habit that she developed in the 1930s——listening to the radio *(access its lexical scope even when that function is executing outside its lexical scope)*.\n\nNow, let's go back to the concept of closure in JavaScript. A closure often has the following characteristics:\n* A function was born in a lexical scope (i.e., the lexical scope where the function was defined).\n* This function remembers and references variables from the birth scope.\n* When this function runs in other scopes, it still uses certain variables from the birth scope.\n\nTo illustrate this with code, it would look like this:\n```js\nfunction year1930s() {\n  const popularMedia = 'Radio';\n  return function ladyS() {\n    console.log(`${popularMedia} is my favorite way to get news.`);\n  }\n}\n\nconst ladyS = year1930s();\n\nfunction year2010s() {\n  const popularMedia = 'Smart phone';\n  ladyS(); \n}\n\nyear2010s(); // \"Radio is my favorite way to get news.\"\n```\n\nTo delve a bit deeper, as the closure function is still using variables from the birth scope, these variables cannot be destroyed and still occupy memory (like after the function year1930s is called, the variable popularMedia is still there).\n\nYeah, in real life, though it’s already the 2020s, home radios haven’t completely disappeared from this world, due to some people’s love for nostalgia.\n\nOf course, there are many other examples that can illustrate how closure works. For instance, many immigrants still have a strong affinity for their hometown food, no matter how long they have lived abroad.\n\nTo describe this with code, it could look like this:\n```js\nfunction lifeInHometown() {\n  const popularFood = '🌶️ beef noodles';\n  return function kidQ() {\n    console.log(`${popularFood} is my favorite food.`);\n  }\n}\n\nconst kidQ = lifeInHometown();\n\nfunction lifeInUK() {\n  const popularFood = 'Fish and chips';\n  kidQ();\n}\n\nlifeInUK(); // \"🌶️ beef noodles is my favorite food.\"\n```\n\nLet’s recap the concept of closure:\n- When there is a closure, it must involve two different lexical scopes:\n  - one is the birth lexical scope A, where the function was defined.\n  - the other is the lexical scope B, where the function is called later.\n- Even if the function leaves its birthplace closure A and runs in another lexical scope, it still remembers some variables defined in A.\n\nBy now, you should have a grasp of what closure is.\n\nHowever, sometimes when people talk about closure, they are not referring to the precise concept of closure. For instance, you might hear people mentioning the term 'closure,' but what they're actually referring to is:\n\n*They have a function that does not reference data from the lexical scope they expected.*\n\nAn example of this is Stale Closure, which often appears in React hooks and is a pain for many beginners. In the next blog post, I will discuss the Stale Closure issue in React hooks in more detail.\n","slug":"closure_stories","published":1,"updated":"2023-03-27T03:42:33.201Z","_id":"clesw5rpl0000dhpn4x1339i6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Before I explain the concept of closure, let me share a story with you.</p>\n<p>The word “closure” evokes a tender memory of my visit to Manchester in 2016.</p>\n<p>During my stay, I had the pleasure of living in an Airbnb home of an 80-year-old lady. The old lady was living alone, and her best friend was a cat named Mavis. In 2016, she did not have a smartphone, and her favorite form of entertainment was listening to the radio.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/222784849-cb99ee40-673d-4e0f-a5c9-35bc510b6f62.png\" alt=\"image\"></p>\n<p>Today, I can still envision her silhouette moving gracefully through the kitchen, preparing breakfast while enjoying her favorite radio program.</p>\n<p>Times have certainly changed, yet this elderly lady held onto habits from decades ago until today. </p>\n<p><strong>Now, you may wonder, what does this have to do with closure?</strong><br>Well, let’s take a look at the concept of closure:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Closure is when a function is able to remember and access its lexical scope even when that function is executing outside its lexical scope.<br>– You Don’t Know JS (1st edition)</p></blockquote>\n<p><strong>Have you noticed the similarity between an elderly lady who loves listening to the radio and a closure function remembering its original lexical scope?</strong></p>\n<p>In the story I shared earlier, the elderly lady <em>(a closure function)</em>  was born in the 1930s <em>(its lexical scope)</em> and developed the habit of getting news from the radio during the time she was born.</p>\n<p>Later, when she entered the 2010s <em>(another lexical scope)</em>, smartphones had already invaded the lives of almost everybody, but she still retained the habit that she developed in the 1930s——listening to the radio <em>(access its lexical scope even when that function is executing outside its lexical scope)</em>.</p>\n<p>Now, let’s go back to the concept of closure in JavaScript. A closure often has the following characteristics:</p>\n<ul>\n<li>A function was born in a lexical scope (i.e., the lexical scope where the function was defined).</li>\n<li>This function remembers and references variables from the birth scope.</li>\n<li>When this function runs in other scopes, it still uses certain variables from the birth scope.</li>\n</ul>\n<p>To illustrate this with code, it would look like this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">year1930s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> popularMedia <span class=\"token operator\">=</span> <span class=\"token string\">'Radio'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ladyS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>popularMedia<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> is my favorite way to get news.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> ladyS <span class=\"token operator\">=</span> <span class=\"token function\">year1930s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">year2010s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> popularMedia <span class=\"token operator\">=</span> <span class=\"token string\">'Smart phone'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ladyS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">year2010s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Radio is my favorite way to get news.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>To delve a bit deeper, as the closure function is still using variables from the birth scope, these variables cannot be destroyed and still occupy memory (like after the function year1930s is called, the variable popularMedia is still there).</p>\n<p>Yeah, in real life, though it’s already the 2020s, home radios haven’t completely disappeared from this world, due to some people’s love for nostalgia.</p>\n<p>Of course, there are many other examples that can illustrate how closure works. For instance, many immigrants still have a strong affinity for their hometown food, no matter how long they have lived abroad.</p>\n<p>To describe this with code, it could look like this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">lifeInHometown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> popularFood <span class=\"token operator\">=</span> <span class=\"token string\">'🌶️ beef noodles'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">kidQ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>popularFood<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> is my favorite food.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> kidQ <span class=\"token operator\">=</span> <span class=\"token function\">lifeInHometown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">lifeInUK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> popularFood <span class=\"token operator\">=</span> <span class=\"token string\">'Fish and chips'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">kidQ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">lifeInUK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"🌶️ beef noodles is my favorite food.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Let’s recap the concept of closure:</p>\n<ul>\n<li>When there is a closure, it must involve two different lexical scopes:<ul>\n<li>one is the birth lexical scope A, where the function was defined.</li>\n<li>the other is the lexical scope B, where the function is called later.</li>\n</ul>\n</li>\n<li>Even if the function leaves its birthplace closure A and runs in another lexical scope, it still remembers some variables defined in A.</li>\n</ul>\n<p>By now, you should have a grasp of what closure is.</p>\n<p>However, sometimes when people talk about closure, they are not referring to the precise concept of closure. For instance, you might hear people mentioning the term ‘closure,’ but what they’re actually referring to is:</p>\n<p><em>They have a function that does not reference data from the lexical scope they expected.</em></p>\n<p>An example of this is Stale Closure, which often appears in React hooks and is a pain for many beginners. In the next blog post, I will discuss the Stale Closure issue in React hooks in more detail.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Before I explain the concept of closure, let me share a story with you.</p>\n<p>The word “closure” evokes a tender memory of my visit to Manchester in 2016.</p>\n<p>During my stay, I had the pleasure of living in an Airbnb home of an 80-year-old lady. The old lady was living alone, and her best friend was a cat named Mavis. In 2016, she did not have a smartphone, and her favorite form of entertainment was listening to the radio.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/222784849-cb99ee40-673d-4e0f-a5c9-35bc510b6f62.png\" alt=\"image\"></p>\n<p>Today, I can still envision her silhouette moving gracefully through the kitchen, preparing breakfast while enjoying her favorite radio program.</p>\n<p>Times have certainly changed, yet this elderly lady held onto habits from decades ago until today. </p>\n<p><strong>Now, you may wonder, what does this have to do with closure?</strong><br>Well, let’s take a look at the concept of closure:</p>\n<blockquote>\n<p>Closure is when a function is able to remember and access its lexical scope even when that function is executing outside its lexical scope.<br>– You Don’t Know JS (1st edition)</p>\n</blockquote>\n<p><strong>Have you noticed the similarity between an elderly lady who loves listening to the radio and a closure function remembering its original lexical scope?</strong></p>\n<p>In the story I shared earlier, the elderly lady <em>(a closure function)</em>  was born in the 1930s <em>(its lexical scope)</em> and developed the habit of getting news from the radio during the time she was born.</p>\n<p>Later, when she entered the 2010s <em>(another lexical scope)</em>, smartphones had already invaded the lives of almost everybody, but she still retained the habit that she developed in the 1930s——listening to the radio <em>(access its lexical scope even when that function is executing outside its lexical scope)</em>.</p>\n<p>Now, let’s go back to the concept of closure in JavaScript. A closure often has the following characteristics:</p>\n<ul>\n<li>A function was born in a lexical scope (i.e., the lexical scope where the function was defined).</li>\n<li>This function remembers and references variables from the birth scope.</li>\n<li>When this function runs in other scopes, it still uses certain variables from the birth scope.</li>\n</ul>\n<p>To illustrate this with code, it would look like this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">year1930s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> popularMedia <span class=\"token operator\">=</span> <span class=\"token string\">'Radio'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ladyS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>popularMedia<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> is my favorite way to get news.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> ladyS <span class=\"token operator\">=</span> <span class=\"token function\">year1930s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">year2010s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> popularMedia <span class=\"token operator\">=</span> <span class=\"token string\">'Smart phone'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ladyS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">year2010s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Radio is my favorite way to get news.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>To delve a bit deeper, as the closure function is still using variables from the birth scope, these variables cannot be destroyed and still occupy memory (like after the function year1930s is called, the variable popularMedia is still there).</p>\n<p>Yeah, in real life, though it’s already the 2020s, home radios haven’t completely disappeared from this world, due to some people’s love for nostalgia.</p>\n<p>Of course, there are many other examples that can illustrate how closure works. For instance, many immigrants still have a strong affinity for their hometown food, no matter how long they have lived abroad.</p>\n<p>To describe this with code, it could look like this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">lifeInHometown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> popularFood <span class=\"token operator\">=</span> <span class=\"token string\">'🌶️ beef noodles'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">kidQ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>popularFood<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> is my favorite food.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> kidQ <span class=\"token operator\">=</span> <span class=\"token function\">lifeInHometown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">lifeInUK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> popularFood <span class=\"token operator\">=</span> <span class=\"token string\">'Fish and chips'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">kidQ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">lifeInUK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"🌶️ beef noodles is my favorite food.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Let’s recap the concept of closure:</p>\n<ul>\n<li>When there is a closure, it must involve two different lexical scopes:<ul>\n<li>one is the birth lexical scope A, where the function was defined.</li>\n<li>the other is the lexical scope B, where the function is called later.</li>\n</ul>\n</li>\n<li>Even if the function leaves its birthplace closure A and runs in another lexical scope, it still remembers some variables defined in A.</li>\n</ul>\n<p>By now, you should have a grasp of what closure is.</p>\n<p>However, sometimes when people talk about closure, they are not referring to the precise concept of closure. For instance, you might hear people mentioning the term ‘closure,’ but what they’re actually referring to is:</p>\n<p><em>They have a function that does not reference data from the lexical scope they expected.</em></p>\n<p>An example of this is Stale Closure, which often appears in React hooks and is a pain for many beginners. In the next blog post, I will discuss the Stale Closure issue in React hooks in more detail.</p>\n"},{"title":"Grasping UseEffect Stale Closure with Inception","date":"2023-03-19T03:45:30.000Z","_content":"\nThe first time I sought a deeper understanding of useEffect was due to——an unexpected bug in a React project at work. Later, I found this was because I did not grasp the essence of this hook.\n\nAt its core, useEffect is a hook that allows you to perform data operations after each rendering of a component. If you don't want it to be called every time, you can pass an array of dependencies to it:\n- Passing an array with a specific state. This means that **you want your operation to be performed only when a certain state is updated**.\n```js\nuseEffect(() => {}, [someState]);\n```\n- Passing an empty array. This means that **you want certain operations to run after the initial render of the component**.\n```js\nuseEffect(() => {}, []);\n```\n\nBut what I was not aware of was **`useEffect(() => {}, [])` can only access the data produced by the initial render**. It cannot access the updated state from any subsequent renders. In this case, one may encounter what's known as **a stale closure in React useEffect hook**.\n\n### Stale Closure\nStale closure—don't be intimidated by this buzzword. Let's start with something light and fun: movie Inception.\n\n*\"Oops, just a heads-up! I'll be sharing spoilers about the movie's plot. If you'd prefer not to know, feel free to watch the movie first and then return to enjoy this blog post.\"*\n\nInception is one of my favorite movie. Its protagonist can create and navigate multiple layers of dreams using dream manipulation skills, ultimately implanting a belief-like idea into someone's mind.\n\nYou can think of React as a dream scene architect, where each time you call `setState`, it's like pressing a button to construct a new dream layer.\n\nSo if you trigger `setState` after the App's first render, you're signaling React to initiate a new layer of rendering snapshot. \nHowever, **even though a new rendering has been completed, there can still be functions referring to the data from the first rendering**. Here comes in what we called the `useEffect` stale closure pitfall, as seen in this code snippet:\n```js\nexport default function App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      console.log(count);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n  \n  return (\n    <div>\n      <button id=\"btn\" onClick={increment}>\n        click me\n      </button>\n    </div>\n  );\n}\n```\n\nWhat will be logged after clicking the button 3 times?\n`always 0`\n\nIn this code snippet, the callback function in `useEffect` is trapped within the first rendering state snapshot, unable to access data from subsequent renders.\n\n### Explanation with Movie Inception\n**How should we understand this?**\n\nLet's go back to the movie for an explanation.\nAs the story progresses, the movie Inception features 3 scenes of dream simultaneously: \n- In the newest dream layer (the 3rd layer), Cobb has arrived at the latest snowy mountain scene.\n- 2nd layer: Cobb's companion Arthur stays in the second layer to complete his mission.\n- 1st layer: their companion Yusurf remains in the first layer racing against time.\n\n![New Project (1)](https://user-images.githubusercontent.com/51183663/226151016-69e59a76-0f19-41a6-a5b3-45f42e4f8262.png)\n\n**Here are the similarities between Inception's dreamscapes and React's renders** (disclaimer: there are actually many differences, but for now, let's focus on the similarities that help you understand stale closures) are as follows:\n- **React: States in different React renders are independent of one another.**\n- Inception: Each dream has its own independent scene. We can think of each dream layer as a snapshot of the React state. Due to the independence between different dreamscapes, some characters with specific mission requirements can only stay within a specific scene.\n- **React: After the first render in React, a timer triggered by useEffect(() => {}, []) can only use the states related to the first render, and cannot access the latest state.**\n- Inception: Yusurf in the first dream layer remains in that layer, and never access the subsequent dream layers, like the hotel or the snow mountain.\n\nBy drawing this comparison, hopefully you can better understand the concept of stale closures in React hooks: **Stale closure refers to a situation where a callback function inside a useEffect hook cannot capture updated state values.** That callback is like a character trapped in an old dreamscape.\n\n\n### Reasons behind independent rendering states\nInception creates 3 completely different scenes to make the dream experience more immersive and to make the dreamer firmly believe in the implanted idea. \n\n**But why does React make the state of each render independent?**\n\nThis is due to React's functional programming nature. \nBy doing this, React ensures that, at any given moment, a component's state is immutable. This makes it easier for developers to predict the behavior of a React App.\n\nFor example, by using `useEffect(() => {}, [])` to perform a certain operation, you're kind of telling React: \"Hey, this hook's callback is just about the first render\". So React, being a good friend and following the data immutability rule, happily hands over data only from that initial render to you.\n\n\n### Fix stale closure in useEffect\nHow to fix the issue in the timer code snippet, if we want the timer to log the latest count value?\n\n**To solve a problem, let's first understand what the issue is:**\nStale closure occurs when a useEffect callback can never access the updated states.\n\nTherefore, our solution should be to focus on how to provide updated data to this callback.\n\n#### Solutions\n##### Idea 1: allowing the callback to read each updated state snapshots\n- **Action**: include the count state as a dependency of this useEffect hook\n- **Cons**: you are creating and destroying a timer for each new count.\n```js\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      console.log(count);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [count]);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n  return (\n    <div>\n      <button id=\"btn\" onClick={increment}>\n        click me\n      </button>\n    </div>\n  );\n}\n```\n##### Idea 2: keeping the callback in the first state snapshot, but providing it with a ref .\n- **Action**: use a ref to store the count value (Unlike states and effects, refs are objects that are passed into all rendering snapshots, they are mutable)\n- **Pros**: you are not creating and destroying a timer for each new count\n- **Cons**: updates on countRef.current can not be displayed in time to your App (any updates on ref.current will not trigger re-rendering in React).\n```js\nfunction App() {\n  const countRef = useRef(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      console.log(countRef.current);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const increment = () => {\n    countRef.current += 1;\n  };\n  return (\n    <div>\n      <button id=\"btn\" onClick={increment}>\n        click me\n      </button>\n    </div>\n  );\n}\n```\n\n","source":"_posts/Inception-md.md","raw":"---\ntitle: Grasping UseEffect Stale Closure with Inception\ndate: 2023-03-18 23:45:30\ntags: React\n---\n\nThe first time I sought a deeper understanding of useEffect was due to——an unexpected bug in a React project at work. Later, I found this was because I did not grasp the essence of this hook.\n\nAt its core, useEffect is a hook that allows you to perform data operations after each rendering of a component. If you don't want it to be called every time, you can pass an array of dependencies to it:\n- Passing an array with a specific state. This means that **you want your operation to be performed only when a certain state is updated**.\n```js\nuseEffect(() => {}, [someState]);\n```\n- Passing an empty array. This means that **you want certain operations to run after the initial render of the component**.\n```js\nuseEffect(() => {}, []);\n```\n\nBut what I was not aware of was **`useEffect(() => {}, [])` can only access the data produced by the initial render**. It cannot access the updated state from any subsequent renders. In this case, one may encounter what's known as **a stale closure in React useEffect hook**.\n\n### Stale Closure\nStale closure—don't be intimidated by this buzzword. Let's start with something light and fun: movie Inception.\n\n*\"Oops, just a heads-up! I'll be sharing spoilers about the movie's plot. If you'd prefer not to know, feel free to watch the movie first and then return to enjoy this blog post.\"*\n\nInception is one of my favorite movie. Its protagonist can create and navigate multiple layers of dreams using dream manipulation skills, ultimately implanting a belief-like idea into someone's mind.\n\nYou can think of React as a dream scene architect, where each time you call `setState`, it's like pressing a button to construct a new dream layer.\n\nSo if you trigger `setState` after the App's first render, you're signaling React to initiate a new layer of rendering snapshot. \nHowever, **even though a new rendering has been completed, there can still be functions referring to the data from the first rendering**. Here comes in what we called the `useEffect` stale closure pitfall, as seen in this code snippet:\n```js\nexport default function App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      console.log(count);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n  \n  return (\n    <div>\n      <button id=\"btn\" onClick={increment}>\n        click me\n      </button>\n    </div>\n  );\n}\n```\n\nWhat will be logged after clicking the button 3 times?\n`always 0`\n\nIn this code snippet, the callback function in `useEffect` is trapped within the first rendering state snapshot, unable to access data from subsequent renders.\n\n### Explanation with Movie Inception\n**How should we understand this?**\n\nLet's go back to the movie for an explanation.\nAs the story progresses, the movie Inception features 3 scenes of dream simultaneously: \n- In the newest dream layer (the 3rd layer), Cobb has arrived at the latest snowy mountain scene.\n- 2nd layer: Cobb's companion Arthur stays in the second layer to complete his mission.\n- 1st layer: their companion Yusurf remains in the first layer racing against time.\n\n![New Project (1)](https://user-images.githubusercontent.com/51183663/226151016-69e59a76-0f19-41a6-a5b3-45f42e4f8262.png)\n\n**Here are the similarities between Inception's dreamscapes and React's renders** (disclaimer: there are actually many differences, but for now, let's focus on the similarities that help you understand stale closures) are as follows:\n- **React: States in different React renders are independent of one another.**\n- Inception: Each dream has its own independent scene. We can think of each dream layer as a snapshot of the React state. Due to the independence between different dreamscapes, some characters with specific mission requirements can only stay within a specific scene.\n- **React: After the first render in React, a timer triggered by useEffect(() => {}, []) can only use the states related to the first render, and cannot access the latest state.**\n- Inception: Yusurf in the first dream layer remains in that layer, and never access the subsequent dream layers, like the hotel or the snow mountain.\n\nBy drawing this comparison, hopefully you can better understand the concept of stale closures in React hooks: **Stale closure refers to a situation where a callback function inside a useEffect hook cannot capture updated state values.** That callback is like a character trapped in an old dreamscape.\n\n\n### Reasons behind independent rendering states\nInception creates 3 completely different scenes to make the dream experience more immersive and to make the dreamer firmly believe in the implanted idea. \n\n**But why does React make the state of each render independent?**\n\nThis is due to React's functional programming nature. \nBy doing this, React ensures that, at any given moment, a component's state is immutable. This makes it easier for developers to predict the behavior of a React App.\n\nFor example, by using `useEffect(() => {}, [])` to perform a certain operation, you're kind of telling React: \"Hey, this hook's callback is just about the first render\". So React, being a good friend and following the data immutability rule, happily hands over data only from that initial render to you.\n\n\n### Fix stale closure in useEffect\nHow to fix the issue in the timer code snippet, if we want the timer to log the latest count value?\n\n**To solve a problem, let's first understand what the issue is:**\nStale closure occurs when a useEffect callback can never access the updated states.\n\nTherefore, our solution should be to focus on how to provide updated data to this callback.\n\n#### Solutions\n##### Idea 1: allowing the callback to read each updated state snapshots\n- **Action**: include the count state as a dependency of this useEffect hook\n- **Cons**: you are creating and destroying a timer for each new count.\n```js\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      console.log(count);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [count]);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n  return (\n    <div>\n      <button id=\"btn\" onClick={increment}>\n        click me\n      </button>\n    </div>\n  );\n}\n```\n##### Idea 2: keeping the callback in the first state snapshot, but providing it with a ref .\n- **Action**: use a ref to store the count value (Unlike states and effects, refs are objects that are passed into all rendering snapshots, they are mutable)\n- **Pros**: you are not creating and destroying a timer for each new count\n- **Cons**: updates on countRef.current can not be displayed in time to your App (any updates on ref.current will not trigger re-rendering in React).\n```js\nfunction App() {\n  const countRef = useRef(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      console.log(countRef.current);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const increment = () => {\n    countRef.current += 1;\n  };\n  return (\n    <div>\n      <button id=\"btn\" onClick={increment}>\n        click me\n      </button>\n    </div>\n  );\n}\n```\n\n","slug":"Inception-md","published":1,"updated":"2023-03-28T01:14:26.865Z","_id":"clfeuwlv00000prpnhs1w6m5d","comments":1,"layout":"post","photos":[],"link":"","content":"<p>The first time I sought a deeper understanding of useEffect was due to——an unexpected bug in a React project at work. Later, I found this was because I did not grasp the essence of this hook.</p>\n<p>At its core, useEffect is a hook that allows you to perform data operations after each rendering of a component. If you don’t want it to be called every time, you can pass an array of dependencies to it:</p>\n<ul>\n<li>Passing an array with a specific state. This means that <strong>you want your operation to be performed only when a certain state is updated</strong>.<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>someState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>Passing an empty array. This means that <strong>you want certain operations to run after the initial render of the component</strong>.<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<p>But what I was not aware of was <strong><code>useEffect(() =&gt; &#123;&#125;, [])</code> can only access the data produced by the initial render</strong>. It cannot access the updated state from any subsequent renders. In this case, one may encounter what’s known as <strong>a stale closure in React useEffect hook</strong>.</p>\n<h3 id=\"Stale-Closure\"><a href=\"#Stale-Closure\" class=\"headerlink\" title=\"Stale Closure\"></a>Stale Closure</h3><p>Stale closure—don’t be intimidated by this buzzword. Let’s start with something light and fun: movie Inception.</p>\n<p><em>“Oops, just a heads-up! I’ll be sharing spoilers about the movie’s plot. If you’d prefer not to know, feel free to watch the movie first and then return to enjoy this blog post.”</em></p>\n<p>Inception is one of my favorite movie. Its protagonist can create and navigate multiple layers of dreams using dream manipulation skills, ultimately implanting a belief-like idea into someone’s mind.</p>\n<p>You can think of React as a dream scene architect, where each time you call <code>setState</code>, it’s like pressing a button to construct a new dream layer.</p>\n<p>So if you trigger <code>setState</code> after the App’s first render, you’re signaling React to initiate a new layer of rendering snapshot.<br>However, <strong>even though a new rendering has been completed, there can still be functions referring to the data from the first rendering</strong>. Here comes in what we called the <code>useEffect</code> stale closure pitfall, as seen in this code snippet:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        click me\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>What will be logged after clicking the button 3 times?<br><code>always 0</code></p>\n<p>In this code snippet, the callback function in <code>useEffect</code> is trapped within the first rendering state snapshot, unable to access data from subsequent renders.</p>\n<h3 id=\"Explanation-with-Movie-Inception\"><a href=\"#Explanation-with-Movie-Inception\" class=\"headerlink\" title=\"Explanation with Movie Inception\"></a>Explanation with Movie Inception</h3><p><strong>How should we understand this?</strong></p>\n<p>Let’s go back to the movie for an explanation.<br>As the story progresses, the movie Inception features 3 scenes of dream simultaneously: </p>\n<ul>\n<li>In the newest dream layer (the 3rd layer), Cobb has arrived at the latest snowy mountain scene.</li>\n<li>2nd layer: Cobb’s companion Arthur stays in the second layer to complete his mission.</li>\n<li>1st layer: their companion Yusurf remains in the first layer racing against time.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/226151016-69e59a76-0f19-41a6-a5b3-45f42e4f8262.png\" alt=\"New Project (1)\"></p>\n<p><strong>Here are the similarities between Inception’s dreamscapes and React’s renders</strong> (disclaimer: there are actually many differences, but for now, let’s focus on the similarities that help you understand stale closures) are as follows:</p>\n<ul>\n<li><strong>React: States in different React renders are independent of one another.</strong></li>\n<li>Inception: Each dream has its own independent scene. We can think of each dream layer as a snapshot of the React state. Due to the independence between different dreamscapes, some characters with specific mission requirements can only stay within a specific scene.</li>\n<li><strong>React: After the first render in React, a timer triggered by useEffect(() &#x3D;&gt; {}, []) can only use the states related to the first render, and cannot access the latest state.</strong></li>\n<li>Inception: Yusurf in the first dream layer remains in that layer, and never access the subsequent dream layers, like the hotel or the snow mountain.</li>\n</ul>\n<p>By drawing this comparison, hopefully you can better understand the concept of stale closures in React hooks: <strong>Stale closure refers to a situation where a callback function inside a useEffect hook cannot capture updated state values.</strong> That callback is like a character trapped in an old dreamscape.</p>\n<h3 id=\"Reasons-behind-independent-rendering-states\"><a href=\"#Reasons-behind-independent-rendering-states\" class=\"headerlink\" title=\"Reasons behind independent rendering states\"></a>Reasons behind independent rendering states</h3><p>Inception creates 3 completely different scenes to make the dream experience more immersive and to make the dreamer firmly believe in the implanted idea. </p>\n<p><strong>But why does React make the state of each render independent?</strong></p>\n<p>This is due to React’s functional programming nature.<br>By doing this, React ensures that, at any given moment, a component’s state is immutable. This makes it easier for developers to predict the behavior of a React App.</p>\n<p>For example, by using <code>useEffect(() =&gt; &#123;&#125;, [])</code> to perform a certain operation, you’re kind of telling React: “Hey, this hook’s callback is just about the first render”. So React, being a good friend and following the data immutability rule, happily hands over data only from that initial render to you.</p>\n<h3 id=\"Fix-stale-closure-in-useEffect\"><a href=\"#Fix-stale-closure-in-useEffect\" class=\"headerlink\" title=\"Fix stale closure in useEffect\"></a>Fix stale closure in useEffect</h3><p>How to fix the issue in the timer code snippet, if we want the timer to log the latest count value?</p>\n<p><strong>To solve a problem, let’s first understand what the issue is:</strong><br>Stale closure occurs when a useEffect callback can never access the updated states.</p>\n<p>Therefore, our solution should be to focus on how to provide updated data to this callback.</p>\n<h4 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h4><h5 id=\"Idea-1-allowing-the-callback-to-read-each-updated-state-snapshots\"><a href=\"#Idea-1-allowing-the-callback-to-read-each-updated-state-snapshots\" class=\"headerlink\" title=\"Idea 1: allowing the callback to read each updated state snapshots\"></a>Idea 1: allowing the callback to read each updated state snapshots</h5><ul>\n<li><strong>Action</strong>: include the count state as a dependency of this useEffect hook</li>\n<li><strong>Cons</strong>: you are creating and destroying a timer for each new count.<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        click me\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h5 id=\"Idea-2-keeping-the-callback-in-the-first-state-snapshot-but-providing-it-with-a-ref\"><a href=\"#Idea-2-keeping-the-callback-in-the-first-state-snapshot-but-providing-it-with-a-ref\" class=\"headerlink\" title=\"Idea 2: keeping the callback in the first state snapshot, but providing it with a ref .\"></a>Idea 2: keeping the callback in the first state snapshot, but providing it with a ref .</h5><ul>\n<li><strong>Action</strong>: use a ref to store the count value (Unlike states and effects, refs are objects that are passed into all rendering snapshots, they are mutable)</li>\n<li><strong>Pros</strong>: you are not creating and destroying a timer for each new count</li>\n<li><strong>Cons</strong>: updates on countRef.current can not be displayed in time to your App (any updates on ref.current will not trigger re-rendering in React).<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> countRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>countRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    countRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        click me\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>The first time I sought a deeper understanding of useEffect was due to——an unexpected bug in a React project at work. Later, I found this was because I did not grasp the essence of this hook.</p>\n<p>At its core, useEffect is a hook that allows you to perform data operations after each rendering of a component. If you don’t want it to be called every time, you can pass an array of dependencies to it:</p>\n<ul>\n<li>Passing an array with a specific state. This means that <strong>you want your operation to be performed only when a certain state is updated</strong>.<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>someState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>Passing an empty array. This means that <strong>you want certain operations to run after the initial render of the component</strong>.<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<p>But what I was not aware of was <strong><code>useEffect(() =&gt; &#123;&#125;, [])</code> can only access the data produced by the initial render</strong>. It cannot access the updated state from any subsequent renders. In this case, one may encounter what’s known as <strong>a stale closure in React useEffect hook</strong>.</p>\n<h3 id=\"Stale-Closure\"><a href=\"#Stale-Closure\" class=\"headerlink\" title=\"Stale Closure\"></a>Stale Closure</h3><p>Stale closure—don’t be intimidated by this buzzword. Let’s start with something light and fun: movie Inception.</p>\n<p><em>“Oops, just a heads-up! I’ll be sharing spoilers about the movie’s plot. If you’d prefer not to know, feel free to watch the movie first and then return to enjoy this blog post.”</em></p>\n<p>Inception is one of my favorite movie. Its protagonist can create and navigate multiple layers of dreams using dream manipulation skills, ultimately implanting a belief-like idea into someone’s mind.</p>\n<p>You can think of React as a dream scene architect, where each time you call <code>setState</code>, it’s like pressing a button to construct a new dream layer.</p>\n<p>So if you trigger <code>setState</code> after the App’s first render, you’re signaling React to initiate a new layer of rendering snapshot.<br>However, <strong>even though a new rendering has been completed, there can still be functions referring to the data from the first rendering</strong>. Here comes in what we called the <code>useEffect</code> stale closure pitfall, as seen in this code snippet:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        click me\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>What will be logged after clicking the button 3 times?<br><code>always 0</code></p>\n<p>In this code snippet, the callback function in <code>useEffect</code> is trapped within the first rendering state snapshot, unable to access data from subsequent renders.</p>\n<h3 id=\"Explanation-with-Movie-Inception\"><a href=\"#Explanation-with-Movie-Inception\" class=\"headerlink\" title=\"Explanation with Movie Inception\"></a>Explanation with Movie Inception</h3><p><strong>How should we understand this?</strong></p>\n<p>Let’s go back to the movie for an explanation.<br>As the story progresses, the movie Inception features 3 scenes of dream simultaneously: </p>\n<ul>\n<li>In the newest dream layer (the 3rd layer), Cobb has arrived at the latest snowy mountain scene.</li>\n<li>2nd layer: Cobb’s companion Arthur stays in the second layer to complete his mission.</li>\n<li>1st layer: their companion Yusurf remains in the first layer racing against time.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/226151016-69e59a76-0f19-41a6-a5b3-45f42e4f8262.png\" alt=\"New Project (1)\"></p>\n<p><strong>Here are the similarities between Inception’s dreamscapes and React’s renders</strong> (disclaimer: there are actually many differences, but for now, let’s focus on the similarities that help you understand stale closures) are as follows:</p>\n<ul>\n<li><strong>React: States in different React renders are independent of one another.</strong></li>\n<li>Inception: Each dream has its own independent scene. We can think of each dream layer as a snapshot of the React state. Due to the independence between different dreamscapes, some characters with specific mission requirements can only stay within a specific scene.</li>\n<li><strong>React: After the first render in React, a timer triggered by useEffect(() &#x3D;&gt; {}, []) can only use the states related to the first render, and cannot access the latest state.</strong></li>\n<li>Inception: Yusurf in the first dream layer remains in that layer, and never access the subsequent dream layers, like the hotel or the snow mountain.</li>\n</ul>\n<p>By drawing this comparison, hopefully you can better understand the concept of stale closures in React hooks: <strong>Stale closure refers to a situation where a callback function inside a useEffect hook cannot capture updated state values.</strong> That callback is like a character trapped in an old dreamscape.</p>\n<h3 id=\"Reasons-behind-independent-rendering-states\"><a href=\"#Reasons-behind-independent-rendering-states\" class=\"headerlink\" title=\"Reasons behind independent rendering states\"></a>Reasons behind independent rendering states</h3><p>Inception creates 3 completely different scenes to make the dream experience more immersive and to make the dreamer firmly believe in the implanted idea. </p>\n<p><strong>But why does React make the state of each render independent?</strong></p>\n<p>This is due to React’s functional programming nature.<br>By doing this, React ensures that, at any given moment, a component’s state is immutable. This makes it easier for developers to predict the behavior of a React App.</p>\n<p>For example, by using <code>useEffect(() =&gt; &#123;&#125;, [])</code> to perform a certain operation, you’re kind of telling React: “Hey, this hook’s callback is just about the first render”. So React, being a good friend and following the data immutability rule, happily hands over data only from that initial render to you.</p>\n<h3 id=\"Fix-stale-closure-in-useEffect\"><a href=\"#Fix-stale-closure-in-useEffect\" class=\"headerlink\" title=\"Fix stale closure in useEffect\"></a>Fix stale closure in useEffect</h3><p>How to fix the issue in the timer code snippet, if we want the timer to log the latest count value?</p>\n<p><strong>To solve a problem, let’s first understand what the issue is:</strong><br>Stale closure occurs when a useEffect callback can never access the updated states.</p>\n<p>Therefore, our solution should be to focus on how to provide updated data to this callback.</p>\n<h4 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h4><h5 id=\"Idea-1-allowing-the-callback-to-read-each-updated-state-snapshots\"><a href=\"#Idea-1-allowing-the-callback-to-read-each-updated-state-snapshots\" class=\"headerlink\" title=\"Idea 1: allowing the callback to read each updated state snapshots\"></a>Idea 1: allowing the callback to read each updated state snapshots</h5><ul>\n<li><strong>Action</strong>: include the count state as a dependency of this useEffect hook</li>\n<li><strong>Cons</strong>: you are creating and destroying a timer for each new count.<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        click me\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h5 id=\"Idea-2-keeping-the-callback-in-the-first-state-snapshot-but-providing-it-with-a-ref\"><a href=\"#Idea-2-keeping-the-callback-in-the-first-state-snapshot-but-providing-it-with-a-ref\" class=\"headerlink\" title=\"Idea 2: keeping the callback in the first state snapshot, but providing it with a ref .\"></a>Idea 2: keeping the callback in the first state snapshot, but providing it with a ref .</h5><ul>\n<li><strong>Action</strong>: use a ref to store the count value (Unlike states and effects, refs are objects that are passed into all rendering snapshots, they are mutable)</li>\n<li><strong>Pros</strong>: you are not creating and destroying a timer for each new count</li>\n<li><strong>Cons</strong>: updates on countRef.current can not be displayed in time to your App (any updates on ref.current will not trigger re-rendering in React).<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> countRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>countRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    countRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        click me\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n"},{"title":"Recursion, Iteration and Abstraction from SICP","date":"2023-03-26T23:45:35.000Z","_content":"\nI've recently been reading SICP, a book about programming philosophy. I just finished the 1st chapter yesterday and wanted to share some of my thoughts and insights.\n\nThe main points in the 1st chapter that got me thinking were:\n\n1. Difference between Recursion and iteration\n2. How to abstract a function to make it more extensible and reusable\n\n## Recursive or Iterative Processes\nTo make it easier to understand, I'll start by discussing a topic that many frontend developers are familiar with – React.\n\n### Recursive Process\nThe diff algorithm in React prior to version 16 is a prime example of a recursive process.\n \n**Diff Algorithm**: To identify the changes in the Virtual DOM, React starts at the root node and recursively traverses down the tree. This process consists of expansion and contraction phases.\n\n#### Expansion (beginWork)\nIn the expansion phase, we traverse the virtual DOM tree from the root node, exploring child nodes step by step.\n\n#### Contraction (completeWork)\nDuring contraction, we return to the parent node after traversing all child nodes, then proceed to a sibling or parent's parent.\n\n#### A Story to Help You Visualize the Process\nIf the above explanation is still a bit unfamiliar to you, let me tell a story to help you visualize the process:\n\n![image_treasure_hunt](https://user-images.githubusercontent.com/51183663/227833411-f0bd9fd7-5451-4deb-b5fe-1c08484c4091.png)\n- You're playing a game where an unknown number of treasures are hidden within an underground maze's various rooms. \n- Without a map, you venture deeper into each room to explore. \n- At dead-ends, you backtrack to the nearest fork until you eventually return to the maze's entrance to end the game.\n\n![image_treasure_hunt_rooms](https://user-images.githubusercontent.com/51183663/227833542-14ab3954-389c-4c8b-a3a4-8e7ea0ab303c.png)\n\nIn this context, delving into deeper rooms symbolizes an expanding process, akin to exploring new territories. Conversely, backtracking from dead-ends represents a contracting process.\n#### Unaware of Overall Gain\nNow let us discuss another feature of recursion: **before completing the entire recursive process, we are unaware of the overall results, as we only focus on local problems.** \n\nGoing back to the treasure hunting story. \nWhile exploring the maze, you are given a magical pocket to conceal all the treasures collected. Only upon completing the adventure, the pocket reveals your accumulated riches. \n\nIn this case, the uncertainty of your treasure hunting gains mirrors the ambiguity of progress in recursion, where a clear result emerges only upon task completion.\n#### Uninterruptible\n**Another problem with recursion is that it is hard to be interrupted and resumed.**\n\nRecursion can be difficult to interrupt and resume, making it hard to pause a task or prioritize more urgent tasks. To make an expandable and contractible process interruptible, we need to combine recursive and iterative processes.\n\n### Iterative Process\nIterative processes are repeatable and build upon previous results, allowing for interruptions, resumptions, and data recording for continuity.\n\nSince React version 16, iteration has been using to traverse the DOM tree through a conditional loop. This enables prioritized tasks to interrupt and later resume the diff process using stored data. Also, it maintains expandable and contractible approaches to traverse a Fiber tree for detecting changes.\n## Function Abstraction\nI think the most interesting part of this chapter is function abstraction.\n\nTo explore the beauty of it, let's start with a simple example, and gradually improve it upon small initiatives. \n> Create a composite function that takes a number as input, and returns the cube of the number after adding 1.\n```js\nconst incAndCube = (x) => (x + 1) * (x + 1) * (x + 1);\n```\nHere, repeatedly having `x + 1` does not sound good. So let's abstract it into a function. \n```js\nconst inc = (x) => x + 1;\n\nconst incAndCube = (x) => inc(x) * inc(x) * inc(x);\n```\n### Higher-order Function\nRight now, though our code looks a bit better, we are still repeating `inc` 3 times. To improve this, let's pass `inc` as a parameter of `cube`, to make `cube` a higher-order function and avoid repetitiveness. By using a higher-order function in this case, we can create a more flexible and maintainable solution.\n```js\nconst inc = (x) => x + 1;\n\nconst cube = (x) => x * x * x;\n\nconst incAndCube = (x) => cube(inc(x));\n```\nIn this way, if future requirements involve adding 1 then squaring, we can easily switch `cube` to `square` without changing it in three places.\n\nYou might feel like it doesn't make any difference. But don't worry, the process of iterative improvement often starts with small steps that may seem trivial. By continuously refining our code, we can achieve more extensible and reusable solutions.\n\n### Recursion\nYou might feel that the `cube` function does not appear very extensible: what if the requirement changes to multiplying a number by itself 999 times?\n\nTo make the cube function more extensible, we can create a recursive `repeat` function which accepts a parameter representing the number of repetitions.\n\n#### Expansion\n**Let's think about this question: what will happen if we use `repeat` to multiply a number by itself 999 times?** \nWe will first come to the expansion phase, as it will generate a massive expression involving 999 multiplication operations gradually. For example, `x * x` for once, `(x * x) * x` for twice.\n\n#### Contraction\nAfter finished the expansion phase, we start to shrink the large expression to a single number. We can do this by having `(result of each multiplication) * (next number)`.\n\nWith a clear understanding of expansion and contraction phases, now we can write a recursive `repeat` function to achieve greater flexibility and extensibility.\n```js\nconst inc = (x) => x + 1;\n\nconst repeat = (x, n)  => {\n  if (n === 0) {\n    return 1;\n  }\n  return x * repeat(x, n - 1);\n}\n\nconst cube = (x) => repeat(x, 3);\n\nconst incAndCube = (x) => cube(inc(x));\n```\n#### Explanation with Code\n- **Expansion phase**: The `repeat` function, when called with `x` and `n`, will recursively call itself until `n` is reduced to `0`. During this process, it creates an expression that multiplies `x` by itself `n` times, e.g., `x * x` for once, `(x * x) * x` for twice, and so on.\n- **Contraction phase**: When `n` reaches `0`, the base case is met, and the recursion starts unwinding. As it returns from each recursive call, it contracts the expression by successively multiplying the result of each multiplication by the next number. Eventually, it arrives at the final result, which is `x` multiplied by itself `n` times.\n\n#### Explanation with Inception\nIf you want a more intuitive understanding of this process, think of the movie Inception.\n- **Expansion**: main characters delves deeper into dreams, layer by layer.\n- **Base case met**: at the moment the mission is completed, the base case is reached.\n- **Contraction**: everyone employs a 'kick' to sequentially fall through dream layers, ultimately returning to reality (layer 0).\n\nNow we have successfully abstracted the `cube` function and made it more extensible. 🎉🎉\n\n### Currying\nWait, are we finished? It seems like we haven't seen any cool techniques yet. For example, where is currying?\n\nWe definitely can incorporate currying to our existing code. First, let's try a simple currying by making `incAndCube` returns a function.\n```js\nconst incAndCube = () => x => cube(inc(x));\n```\n\nNow, we incorporated currying in `incAndCube`. But sorry that this currying doesn't do anything practical in the first step, nor does it store any temporary variables. It is just for the sake of experiencing the cool currying technique.\n\n🤔 How about we try to split `incAndCube` into 2 steps? \n- The 1st step is to obtain the function expression for the entire calculation of `x`.\n- The 2nd step is to substitute x with a value. \n\n### Function Composition\nFor the 1st step, we need to write a function to compose the `inc` and `cube` functions. \nIts input is two functions, and its output is the combination of these two functions.\n```js\nconst compose = (g, h) => x => g(h(x));\n```\n\nThe above code means that we first calculate `h`, then calculate `g`.\nSo we can write the `incAndCube` function like below, as we need to first calculate `inc` and then calculate `cube`.\n```js\nconst incAndCube = ()  => {\n  const composedFunc = compose(cube, inc);\n  return x => composedFunc(x);\n}\n```\n\n🌇 Now, we finished it! Here is the complete code:\n```js\nconst inc = (x) => x + 1;\n\nconst repeat = (x, n)  => {\n  if (n === 0) {\n    return 1;\n  }\n  return x * repeat(x, n - 1);\n}\n\nconst cube = (x) => repeat(x, 3);\n\nconst compose = (g, h) => x => g(h(x));\n\nconst incAndCube = ()  => {\n  const composedFunc = compose(cube, inc);\n  return x => composedFunc(x);\n}\n\nconsole.log(incAndCube()(2));\n```\n\n### Sing a Different Tune\nFunctional programming offers advantages in some cases, but it's not always the best solution for every situation.\n\nThe original, straightforward definition of incAndCube with three `x + 1` multiplications is already simple and easy to understand. In cases where reusability and extensibility aren't required, this approach saves programming time and remains clear to other developers.\n\nHowever, in large-scale projects with possible shifting requirements, single-purpose and straightforward functions prove more robust. Consider our basic `inc` function: if its logic changed from `x + 1` to `x + 2`, we'd have to modify the original code in three places. If the function were more much complex than `inc`, multiple updates may introduce unforeseen problems.\n\nIn conclusion, each programming method has its strengths. While functional programming might seem more advanced, it's not a one-size-fits-all solution. It's essential to choose the appropriate approach based on the specific situation and project requirements.\n","source":"_posts/recursion-iteration-and-function-abstraction-md.md","raw":"---\ntitle: Recursion, Iteration and Abstraction from SICP\ndate: 2023-03-26 19:45:35\ntags: Functional-Programming\n---\n\nI've recently been reading SICP, a book about programming philosophy. I just finished the 1st chapter yesterday and wanted to share some of my thoughts and insights.\n\nThe main points in the 1st chapter that got me thinking were:\n\n1. Difference between Recursion and iteration\n2. How to abstract a function to make it more extensible and reusable\n\n## Recursive or Iterative Processes\nTo make it easier to understand, I'll start by discussing a topic that many frontend developers are familiar with – React.\n\n### Recursive Process\nThe diff algorithm in React prior to version 16 is a prime example of a recursive process.\n \n**Diff Algorithm**: To identify the changes in the Virtual DOM, React starts at the root node and recursively traverses down the tree. This process consists of expansion and contraction phases.\n\n#### Expansion (beginWork)\nIn the expansion phase, we traverse the virtual DOM tree from the root node, exploring child nodes step by step.\n\n#### Contraction (completeWork)\nDuring contraction, we return to the parent node after traversing all child nodes, then proceed to a sibling or parent's parent.\n\n#### A Story to Help You Visualize the Process\nIf the above explanation is still a bit unfamiliar to you, let me tell a story to help you visualize the process:\n\n![image_treasure_hunt](https://user-images.githubusercontent.com/51183663/227833411-f0bd9fd7-5451-4deb-b5fe-1c08484c4091.png)\n- You're playing a game where an unknown number of treasures are hidden within an underground maze's various rooms. \n- Without a map, you venture deeper into each room to explore. \n- At dead-ends, you backtrack to the nearest fork until you eventually return to the maze's entrance to end the game.\n\n![image_treasure_hunt_rooms](https://user-images.githubusercontent.com/51183663/227833542-14ab3954-389c-4c8b-a3a4-8e7ea0ab303c.png)\n\nIn this context, delving into deeper rooms symbolizes an expanding process, akin to exploring new territories. Conversely, backtracking from dead-ends represents a contracting process.\n#### Unaware of Overall Gain\nNow let us discuss another feature of recursion: **before completing the entire recursive process, we are unaware of the overall results, as we only focus on local problems.** \n\nGoing back to the treasure hunting story. \nWhile exploring the maze, you are given a magical pocket to conceal all the treasures collected. Only upon completing the adventure, the pocket reveals your accumulated riches. \n\nIn this case, the uncertainty of your treasure hunting gains mirrors the ambiguity of progress in recursion, where a clear result emerges only upon task completion.\n#### Uninterruptible\n**Another problem with recursion is that it is hard to be interrupted and resumed.**\n\nRecursion can be difficult to interrupt and resume, making it hard to pause a task or prioritize more urgent tasks. To make an expandable and contractible process interruptible, we need to combine recursive and iterative processes.\n\n### Iterative Process\nIterative processes are repeatable and build upon previous results, allowing for interruptions, resumptions, and data recording for continuity.\n\nSince React version 16, iteration has been using to traverse the DOM tree through a conditional loop. This enables prioritized tasks to interrupt and later resume the diff process using stored data. Also, it maintains expandable and contractible approaches to traverse a Fiber tree for detecting changes.\n## Function Abstraction\nI think the most interesting part of this chapter is function abstraction.\n\nTo explore the beauty of it, let's start with a simple example, and gradually improve it upon small initiatives. \n> Create a composite function that takes a number as input, and returns the cube of the number after adding 1.\n```js\nconst incAndCube = (x) => (x + 1) * (x + 1) * (x + 1);\n```\nHere, repeatedly having `x + 1` does not sound good. So let's abstract it into a function. \n```js\nconst inc = (x) => x + 1;\n\nconst incAndCube = (x) => inc(x) * inc(x) * inc(x);\n```\n### Higher-order Function\nRight now, though our code looks a bit better, we are still repeating `inc` 3 times. To improve this, let's pass `inc` as a parameter of `cube`, to make `cube` a higher-order function and avoid repetitiveness. By using a higher-order function in this case, we can create a more flexible and maintainable solution.\n```js\nconst inc = (x) => x + 1;\n\nconst cube = (x) => x * x * x;\n\nconst incAndCube = (x) => cube(inc(x));\n```\nIn this way, if future requirements involve adding 1 then squaring, we can easily switch `cube` to `square` without changing it in three places.\n\nYou might feel like it doesn't make any difference. But don't worry, the process of iterative improvement often starts with small steps that may seem trivial. By continuously refining our code, we can achieve more extensible and reusable solutions.\n\n### Recursion\nYou might feel that the `cube` function does not appear very extensible: what if the requirement changes to multiplying a number by itself 999 times?\n\nTo make the cube function more extensible, we can create a recursive `repeat` function which accepts a parameter representing the number of repetitions.\n\n#### Expansion\n**Let's think about this question: what will happen if we use `repeat` to multiply a number by itself 999 times?** \nWe will first come to the expansion phase, as it will generate a massive expression involving 999 multiplication operations gradually. For example, `x * x` for once, `(x * x) * x` for twice.\n\n#### Contraction\nAfter finished the expansion phase, we start to shrink the large expression to a single number. We can do this by having `(result of each multiplication) * (next number)`.\n\nWith a clear understanding of expansion and contraction phases, now we can write a recursive `repeat` function to achieve greater flexibility and extensibility.\n```js\nconst inc = (x) => x + 1;\n\nconst repeat = (x, n)  => {\n  if (n === 0) {\n    return 1;\n  }\n  return x * repeat(x, n - 1);\n}\n\nconst cube = (x) => repeat(x, 3);\n\nconst incAndCube = (x) => cube(inc(x));\n```\n#### Explanation with Code\n- **Expansion phase**: The `repeat` function, when called with `x` and `n`, will recursively call itself until `n` is reduced to `0`. During this process, it creates an expression that multiplies `x` by itself `n` times, e.g., `x * x` for once, `(x * x) * x` for twice, and so on.\n- **Contraction phase**: When `n` reaches `0`, the base case is met, and the recursion starts unwinding. As it returns from each recursive call, it contracts the expression by successively multiplying the result of each multiplication by the next number. Eventually, it arrives at the final result, which is `x` multiplied by itself `n` times.\n\n#### Explanation with Inception\nIf you want a more intuitive understanding of this process, think of the movie Inception.\n- **Expansion**: main characters delves deeper into dreams, layer by layer.\n- **Base case met**: at the moment the mission is completed, the base case is reached.\n- **Contraction**: everyone employs a 'kick' to sequentially fall through dream layers, ultimately returning to reality (layer 0).\n\nNow we have successfully abstracted the `cube` function and made it more extensible. 🎉🎉\n\n### Currying\nWait, are we finished? It seems like we haven't seen any cool techniques yet. For example, where is currying?\n\nWe definitely can incorporate currying to our existing code. First, let's try a simple currying by making `incAndCube` returns a function.\n```js\nconst incAndCube = () => x => cube(inc(x));\n```\n\nNow, we incorporated currying in `incAndCube`. But sorry that this currying doesn't do anything practical in the first step, nor does it store any temporary variables. It is just for the sake of experiencing the cool currying technique.\n\n🤔 How about we try to split `incAndCube` into 2 steps? \n- The 1st step is to obtain the function expression for the entire calculation of `x`.\n- The 2nd step is to substitute x with a value. \n\n### Function Composition\nFor the 1st step, we need to write a function to compose the `inc` and `cube` functions. \nIts input is two functions, and its output is the combination of these two functions.\n```js\nconst compose = (g, h) => x => g(h(x));\n```\n\nThe above code means that we first calculate `h`, then calculate `g`.\nSo we can write the `incAndCube` function like below, as we need to first calculate `inc` and then calculate `cube`.\n```js\nconst incAndCube = ()  => {\n  const composedFunc = compose(cube, inc);\n  return x => composedFunc(x);\n}\n```\n\n🌇 Now, we finished it! Here is the complete code:\n```js\nconst inc = (x) => x + 1;\n\nconst repeat = (x, n)  => {\n  if (n === 0) {\n    return 1;\n  }\n  return x * repeat(x, n - 1);\n}\n\nconst cube = (x) => repeat(x, 3);\n\nconst compose = (g, h) => x => g(h(x));\n\nconst incAndCube = ()  => {\n  const composedFunc = compose(cube, inc);\n  return x => composedFunc(x);\n}\n\nconsole.log(incAndCube()(2));\n```\n\n### Sing a Different Tune\nFunctional programming offers advantages in some cases, but it's not always the best solution for every situation.\n\nThe original, straightforward definition of incAndCube with three `x + 1` multiplications is already simple and easy to understand. In cases where reusability and extensibility aren't required, this approach saves programming time and remains clear to other developers.\n\nHowever, in large-scale projects with possible shifting requirements, single-purpose and straightforward functions prove more robust. Consider our basic `inc` function: if its logic changed from `x + 1` to `x + 2`, we'd have to modify the original code in three places. If the function were more much complex than `inc`, multiple updates may introduce unforeseen problems.\n\nIn conclusion, each programming method has its strengths. While functional programming might seem more advanced, it's not a one-size-fits-all solution. It's essential to choose the appropriate approach based on the specific situation and project requirements.\n","slug":"recursion-iteration-and-function-abstraction-md","published":1,"updated":"2023-03-27T14:08:21.291Z","_id":"clfq2apw5000056pn1jkabavb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>I’ve recently been reading SICP, a book about programming philosophy. I just finished the 1st chapter yesterday and wanted to share some of my thoughts and insights.</p>\n<p>The main points in the 1st chapter that got me thinking were:</p>\n<ol>\n<li>Difference between Recursion and iteration</li>\n<li>How to abstract a function to make it more extensible and reusable</li>\n</ol>\n<h2 id=\"Recursive-or-Iterative-Processes\"><a href=\"#Recursive-or-Iterative-Processes\" class=\"headerlink\" title=\"Recursive or Iterative Processes\"></a>Recursive or Iterative Processes</h2><p>To make it easier to understand, I’ll start by discussing a topic that many frontend developers are familiar with – React.</p>\n<h3 id=\"Recursive-Process\"><a href=\"#Recursive-Process\" class=\"headerlink\" title=\"Recursive Process\"></a>Recursive Process</h3><p>The diff algorithm in React prior to version 16 is a prime example of a recursive process.</p>\n<p><strong>Diff Algorithm</strong>: To identify the changes in the Virtual DOM, React starts at the root node and recursively traverses down the tree. This process consists of expansion and contraction phases.</p>\n<h4 id=\"Expansion-beginWork\"><a href=\"#Expansion-beginWork\" class=\"headerlink\" title=\"Expansion (beginWork)\"></a>Expansion (beginWork)</h4><p>In the expansion phase, we traverse the virtual DOM tree from the root node, exploring child nodes step by step.</p>\n<h4 id=\"Contraction-completeWork\"><a href=\"#Contraction-completeWork\" class=\"headerlink\" title=\"Contraction (completeWork)\"></a>Contraction (completeWork)</h4><p>During contraction, we return to the parent node after traversing all child nodes, then proceed to a sibling or parent’s parent.</p>\n<h4 id=\"A-Story-to-Help-You-Visualize-the-Process\"><a href=\"#A-Story-to-Help-You-Visualize-the-Process\" class=\"headerlink\" title=\"A Story to Help You Visualize the Process\"></a>A Story to Help You Visualize the Process</h4><p>If the above explanation is still a bit unfamiliar to you, let me tell a story to help you visualize the process:</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/227833411-f0bd9fd7-5451-4deb-b5fe-1c08484c4091.png\" alt=\"image_treasure_hunt\"></p>\n<ul>\n<li>You’re playing a game where an unknown number of treasures are hidden within an underground maze’s various rooms. </li>\n<li>Without a map, you venture deeper into each room to explore. </li>\n<li>At dead-ends, you backtrack to the nearest fork until you eventually return to the maze’s entrance to end the game.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/227833542-14ab3954-389c-4c8b-a3a4-8e7ea0ab303c.png\" alt=\"image_treasure_hunt_rooms\"></p>\n<p>In this context, delving into deeper rooms symbolizes an expanding process, akin to exploring new territories. Conversely, backtracking from dead-ends represents a contracting process.</p>\n<h4 id=\"Unaware-of-Overall-Gain\"><a href=\"#Unaware-of-Overall-Gain\" class=\"headerlink\" title=\"Unaware of Overall Gain\"></a>Unaware of Overall Gain</h4><p>Now let us discuss another feature of recursion: <strong>before completing the entire recursive process, we are unaware of the overall results, as we only focus on local problems.</strong> </p>\n<p>Going back to the treasure hunting story.<br>While exploring the maze, you are given a magical pocket to conceal all the treasures collected. Only upon completing the adventure, the pocket reveals your accumulated riches. </p>\n<p>In this case, the uncertainty of your treasure hunting gains mirrors the ambiguity of progress in recursion, where a clear result emerges only upon task completion.</p>\n<h4 id=\"Uninterruptible\"><a href=\"#Uninterruptible\" class=\"headerlink\" title=\"Uninterruptible\"></a>Uninterruptible</h4><p><strong>Another problem with recursion is that it is hard to be interrupted and resumed.</strong></p>\n<p>Recursion can be difficult to interrupt and resume, making it hard to pause a task or prioritize more urgent tasks. To make an expandable and contractible process interruptible, we need to combine recursive and iterative processes.</p>\n<h3 id=\"Iterative-Process\"><a href=\"#Iterative-Process\" class=\"headerlink\" title=\"Iterative Process\"></a>Iterative Process</h3><p>Iterative processes are repeatable and build upon previous results, allowing for interruptions, resumptions, and data recording for continuity.</p>\n<p>Since React version 16, iteration has been using to traverse the DOM tree through a conditional loop. This enables prioritized tasks to interrupt and later resume the diff process using stored data. Also, it maintains expandable and contractible approaches to traverse a Fiber tree for detecting changes.</p>\n<h2 id=\"Function-Abstraction\"><a href=\"#Function-Abstraction\" class=\"headerlink\" title=\"Function Abstraction\"></a>Function Abstraction</h2><p>I think the most interesting part of this chapter is function abstraction.</p>\n<p>To explore the beauty of it, let’s start with a simple example, and gradually improve it upon small initiatives. </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Create a composite function that takes a number as input, and returns the cube of the number after adding 1.</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incAndCube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Here, repeatedly having <code>x + 1</code> does not sound good. So let’s abstract it into a function. </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incAndCube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Higher-order-Function\"><a href=\"#Higher-order-Function\" class=\"headerlink\" title=\"Higher-order Function\"></a>Higher-order Function</h3><p>Right now, though our code looks a bit better, we are still repeating <code>inc</code> 3 times. To improve this, let’s pass <code>inc</code> as a parameter of <code>cube</code>, to make <code>cube</code> a higher-order function and avoid repetitiveness. By using a higher-order function in this case, we can create a more flexible and maintainable solution.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incAndCube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">cube</span><span class=\"token punctuation\">(</span><span class=\"token function\">inc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>In this way, if future requirements involve adding 1 then squaring, we can easily switch <code>cube</code> to <code>square</code> without changing it in three places.</p>\n<p>You might feel like it doesn’t make any difference. But don’t worry, the process of iterative improvement often starts with small steps that may seem trivial. By continuously refining our code, we can achieve more extensible and reusable solutions.</p>\n<h3 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h3><p>You might feel that the <code>cube</code> function does not appear very extensible: what if the requirement changes to multiplying a number by itself 999 times?</p>\n<p>To make the cube function more extensible, we can create a recursive <code>repeat</code> function which accepts a parameter representing the number of repetitions.</p>\n<h4 id=\"Expansion\"><a href=\"#Expansion\" class=\"headerlink\" title=\"Expansion\"></a>Expansion</h4><p><strong>Let’s think about this question: what will happen if we use <code>repeat</code> to multiply a number by itself 999 times?</strong><br>We will first come to the expansion phase, as it will generate a massive expression involving 999 multiplication operations gradually. For example, <code>x * x</code> for once, <code>(x * x) * x</code> for twice.</p>\n<h4 id=\"Contraction\"><a href=\"#Contraction\" class=\"headerlink\" title=\"Contraction\"></a>Contraction</h4><p>After finished the expansion phase, we start to shrink the large expression to a single number. We can do this by having <code>(result of each multiplication) * (next number)</code>.</p>\n<p>With a clear understanding of expansion and contraction phases, now we can write a recursive <code>repeat</code> function to achieve greater flexibility and extensibility.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">repeat</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incAndCube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">cube</span><span class=\"token punctuation\">(</span><span class=\"token function\">inc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"Explanation-with-Code\"><a href=\"#Explanation-with-Code\" class=\"headerlink\" title=\"Explanation with Code\"></a>Explanation with Code</h4><ul>\n<li><strong>Expansion phase</strong>: The <code>repeat</code> function, when called with <code>x</code> and <code>n</code>, will recursively call itself until <code>n</code> is reduced to <code>0</code>. During this process, it creates an expression that multiplies <code>x</code> by itself <code>n</code> times, e.g., <code>x * x</code> for once, <code>(x * x) * x</code> for twice, and so on.</li>\n<li><strong>Contraction phase</strong>: When <code>n</code> reaches <code>0</code>, the base case is met, and the recursion starts unwinding. As it returns from each recursive call, it contracts the expression by successively multiplying the result of each multiplication by the next number. Eventually, it arrives at the final result, which is <code>x</code> multiplied by itself <code>n</code> times.</li>\n</ul>\n<h4 id=\"Explanation-with-Inception\"><a href=\"#Explanation-with-Inception\" class=\"headerlink\" title=\"Explanation with Inception\"></a>Explanation with Inception</h4><p>If you want a more intuitive understanding of this process, think of the movie Inception.</p>\n<ul>\n<li><strong>Expansion</strong>: main characters delves deeper into dreams, layer by layer.</li>\n<li><strong>Base case met</strong>: at the moment the mission is completed, the base case is reached.</li>\n<li><strong>Contraction</strong>: everyone employs a ‘kick’ to sequentially fall through dream layers, ultimately returning to reality (layer 0).</li>\n</ul>\n<p>Now we have successfully abstracted the <code>cube</code> function and made it more extensible. 🎉🎉</p>\n<h3 id=\"Currying\"><a href=\"#Currying\" class=\"headerlink\" title=\"Currying\"></a>Currying</h3><p>Wait, are we finished? It seems like we haven’t seen any cool techniques yet. For example, where is currying?</p>\n<p>We definitely can incorporate currying to our existing code. First, let’s try a simple currying by making <code>incAndCube</code> returns a function.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incAndCube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">cube</span><span class=\"token punctuation\">(</span><span class=\"token function\">inc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Now, we incorporated currying in <code>incAndCube</code>. But sorry that this currying doesn’t do anything practical in the first step, nor does it store any temporary variables. It is just for the sake of experiencing the cool currying technique.</p>\n<p>🤔 How about we try to split <code>incAndCube</code> into 2 steps? </p>\n<ul>\n<li>The 1st step is to obtain the function expression for the entire calculation of <code>x</code>.</li>\n<li>The 2nd step is to substitute x with a value.</li>\n</ul>\n<h3 id=\"Function-Composition\"><a href=\"#Function-Composition\" class=\"headerlink\" title=\"Function Composition\"></a>Function Composition</h3><p>For the 1st step, we need to write a function to compose the <code>inc</code> and <code>cube</code> functions.<br>Its input is two functions, and its output is the combination of these two functions.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">g<span class=\"token punctuation\">,</span> h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>The above code means that we first calculate <code>h</code>, then calculate <code>g</code>.<br>So we can write the <code>incAndCube</code> function like below, as we need to first calculate <code>inc</code> and then calculate <code>cube</code>.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incAndCube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> composedFunc <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>cube<span class=\"token punctuation\">,</span> inc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">composedFunc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>🌇 Now, we finished it! Here is the complete code:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">repeat</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">g<span class=\"token punctuation\">,</span> h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incAndCube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> composedFunc <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>cube<span class=\"token punctuation\">,</span> inc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">composedFunc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">incAndCube</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Sing-a-Different-Tune\"><a href=\"#Sing-a-Different-Tune\" class=\"headerlink\" title=\"Sing a Different Tune\"></a>Sing a Different Tune</h3><p>Functional programming offers advantages in some cases, but it’s not always the best solution for every situation.</p>\n<p>The original, straightforward definition of incAndCube with three <code>x + 1</code> multiplications is already simple and easy to understand. In cases where reusability and extensibility aren’t required, this approach saves programming time and remains clear to other developers.</p>\n<p>However, in large-scale projects with possible shifting requirements, single-purpose and straightforward functions prove more robust. Consider our basic <code>inc</code> function: if its logic changed from <code>x + 1</code> to <code>x + 2</code>, we’d have to modify the original code in three places. If the function were more much complex than <code>inc</code>, multiple updates may introduce unforeseen problems.</p>\n<p>In conclusion, each programming method has its strengths. While functional programming might seem more advanced, it’s not a one-size-fits-all solution. It’s essential to choose the appropriate approach based on the specific situation and project requirements.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I’ve recently been reading SICP, a book about programming philosophy. I just finished the 1st chapter yesterday and wanted to share some of my thoughts and insights.</p>\n<p>The main points in the 1st chapter that got me thinking were:</p>\n<ol>\n<li>Difference between Recursion and iteration</li>\n<li>How to abstract a function to make it more extensible and reusable</li>\n</ol>\n<h2 id=\"Recursive-or-Iterative-Processes\"><a href=\"#Recursive-or-Iterative-Processes\" class=\"headerlink\" title=\"Recursive or Iterative Processes\"></a>Recursive or Iterative Processes</h2><p>To make it easier to understand, I’ll start by discussing a topic that many frontend developers are familiar with – React.</p>\n<h3 id=\"Recursive-Process\"><a href=\"#Recursive-Process\" class=\"headerlink\" title=\"Recursive Process\"></a>Recursive Process</h3><p>The diff algorithm in React prior to version 16 is a prime example of a recursive process.</p>\n<p><strong>Diff Algorithm</strong>: To identify the changes in the Virtual DOM, React starts at the root node and recursively traverses down the tree. This process consists of expansion and contraction phases.</p>\n<h4 id=\"Expansion-beginWork\"><a href=\"#Expansion-beginWork\" class=\"headerlink\" title=\"Expansion (beginWork)\"></a>Expansion (beginWork)</h4><p>In the expansion phase, we traverse the virtual DOM tree from the root node, exploring child nodes step by step.</p>\n<h4 id=\"Contraction-completeWork\"><a href=\"#Contraction-completeWork\" class=\"headerlink\" title=\"Contraction (completeWork)\"></a>Contraction (completeWork)</h4><p>During contraction, we return to the parent node after traversing all child nodes, then proceed to a sibling or parent’s parent.</p>\n<h4 id=\"A-Story-to-Help-You-Visualize-the-Process\"><a href=\"#A-Story-to-Help-You-Visualize-the-Process\" class=\"headerlink\" title=\"A Story to Help You Visualize the Process\"></a>A Story to Help You Visualize the Process</h4><p>If the above explanation is still a bit unfamiliar to you, let me tell a story to help you visualize the process:</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/227833411-f0bd9fd7-5451-4deb-b5fe-1c08484c4091.png\" alt=\"image_treasure_hunt\"></p>\n<ul>\n<li>You’re playing a game where an unknown number of treasures are hidden within an underground maze’s various rooms. </li>\n<li>Without a map, you venture deeper into each room to explore. </li>\n<li>At dead-ends, you backtrack to the nearest fork until you eventually return to the maze’s entrance to end the game.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/227833542-14ab3954-389c-4c8b-a3a4-8e7ea0ab303c.png\" alt=\"image_treasure_hunt_rooms\"></p>\n<p>In this context, delving into deeper rooms symbolizes an expanding process, akin to exploring new territories. Conversely, backtracking from dead-ends represents a contracting process.</p>\n<h4 id=\"Unaware-of-Overall-Gain\"><a href=\"#Unaware-of-Overall-Gain\" class=\"headerlink\" title=\"Unaware of Overall Gain\"></a>Unaware of Overall Gain</h4><p>Now let us discuss another feature of recursion: <strong>before completing the entire recursive process, we are unaware of the overall results, as we only focus on local problems.</strong> </p>\n<p>Going back to the treasure hunting story.<br>While exploring the maze, you are given a magical pocket to conceal all the treasures collected. Only upon completing the adventure, the pocket reveals your accumulated riches. </p>\n<p>In this case, the uncertainty of your treasure hunting gains mirrors the ambiguity of progress in recursion, where a clear result emerges only upon task completion.</p>\n<h4 id=\"Uninterruptible\"><a href=\"#Uninterruptible\" class=\"headerlink\" title=\"Uninterruptible\"></a>Uninterruptible</h4><p><strong>Another problem with recursion is that it is hard to be interrupted and resumed.</strong></p>\n<p>Recursion can be difficult to interrupt and resume, making it hard to pause a task or prioritize more urgent tasks. To make an expandable and contractible process interruptible, we need to combine recursive and iterative processes.</p>\n<h3 id=\"Iterative-Process\"><a href=\"#Iterative-Process\" class=\"headerlink\" title=\"Iterative Process\"></a>Iterative Process</h3><p>Iterative processes are repeatable and build upon previous results, allowing for interruptions, resumptions, and data recording for continuity.</p>\n<p>Since React version 16, iteration has been using to traverse the DOM tree through a conditional loop. This enables prioritized tasks to interrupt and later resume the diff process using stored data. Also, it maintains expandable and contractible approaches to traverse a Fiber tree for detecting changes.</p>\n<h2 id=\"Function-Abstraction\"><a href=\"#Function-Abstraction\" class=\"headerlink\" title=\"Function Abstraction\"></a>Function Abstraction</h2><p>I think the most interesting part of this chapter is function abstraction.</p>\n<p>To explore the beauty of it, let’s start with a simple example, and gradually improve it upon small initiatives. </p>\n<blockquote>\n<p>Create a composite function that takes a number as input, and returns the cube of the number after adding 1.</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incAndCube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Here, repeatedly having <code>x + 1</code> does not sound good. So let’s abstract it into a function. </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incAndCube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Higher-order-Function\"><a href=\"#Higher-order-Function\" class=\"headerlink\" title=\"Higher-order Function\"></a>Higher-order Function</h3><p>Right now, though our code looks a bit better, we are still repeating <code>inc</code> 3 times. To improve this, let’s pass <code>inc</code> as a parameter of <code>cube</code>, to make <code>cube</code> a higher-order function and avoid repetitiveness. By using a higher-order function in this case, we can create a more flexible and maintainable solution.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incAndCube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">cube</span><span class=\"token punctuation\">(</span><span class=\"token function\">inc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>In this way, if future requirements involve adding 1 then squaring, we can easily switch <code>cube</code> to <code>square</code> without changing it in three places.</p>\n<p>You might feel like it doesn’t make any difference. But don’t worry, the process of iterative improvement often starts with small steps that may seem trivial. By continuously refining our code, we can achieve more extensible and reusable solutions.</p>\n<h3 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h3><p>You might feel that the <code>cube</code> function does not appear very extensible: what if the requirement changes to multiplying a number by itself 999 times?</p>\n<p>To make the cube function more extensible, we can create a recursive <code>repeat</code> function which accepts a parameter representing the number of repetitions.</p>\n<h4 id=\"Expansion\"><a href=\"#Expansion\" class=\"headerlink\" title=\"Expansion\"></a>Expansion</h4><p><strong>Let’s think about this question: what will happen if we use <code>repeat</code> to multiply a number by itself 999 times?</strong><br>We will first come to the expansion phase, as it will generate a massive expression involving 999 multiplication operations gradually. For example, <code>x * x</code> for once, <code>(x * x) * x</code> for twice.</p>\n<h4 id=\"Contraction\"><a href=\"#Contraction\" class=\"headerlink\" title=\"Contraction\"></a>Contraction</h4><p>After finished the expansion phase, we start to shrink the large expression to a single number. We can do this by having <code>(result of each multiplication) * (next number)</code>.</p>\n<p>With a clear understanding of expansion and contraction phases, now we can write a recursive <code>repeat</code> function to achieve greater flexibility and extensibility.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">repeat</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incAndCube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">cube</span><span class=\"token punctuation\">(</span><span class=\"token function\">inc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"Explanation-with-Code\"><a href=\"#Explanation-with-Code\" class=\"headerlink\" title=\"Explanation with Code\"></a>Explanation with Code</h4><ul>\n<li><strong>Expansion phase</strong>: The <code>repeat</code> function, when called with <code>x</code> and <code>n</code>, will recursively call itself until <code>n</code> is reduced to <code>0</code>. During this process, it creates an expression that multiplies <code>x</code> by itself <code>n</code> times, e.g., <code>x * x</code> for once, <code>(x * x) * x</code> for twice, and so on.</li>\n<li><strong>Contraction phase</strong>: When <code>n</code> reaches <code>0</code>, the base case is met, and the recursion starts unwinding. As it returns from each recursive call, it contracts the expression by successively multiplying the result of each multiplication by the next number. Eventually, it arrives at the final result, which is <code>x</code> multiplied by itself <code>n</code> times.</li>\n</ul>\n<h4 id=\"Explanation-with-Inception\"><a href=\"#Explanation-with-Inception\" class=\"headerlink\" title=\"Explanation with Inception\"></a>Explanation with Inception</h4><p>If you want a more intuitive understanding of this process, think of the movie Inception.</p>\n<ul>\n<li><strong>Expansion</strong>: main characters delves deeper into dreams, layer by layer.</li>\n<li><strong>Base case met</strong>: at the moment the mission is completed, the base case is reached.</li>\n<li><strong>Contraction</strong>: everyone employs a ‘kick’ to sequentially fall through dream layers, ultimately returning to reality (layer 0).</li>\n</ul>\n<p>Now we have successfully abstracted the <code>cube</code> function and made it more extensible. 🎉🎉</p>\n<h3 id=\"Currying\"><a href=\"#Currying\" class=\"headerlink\" title=\"Currying\"></a>Currying</h3><p>Wait, are we finished? It seems like we haven’t seen any cool techniques yet. For example, where is currying?</p>\n<p>We definitely can incorporate currying to our existing code. First, let’s try a simple currying by making <code>incAndCube</code> returns a function.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incAndCube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">cube</span><span class=\"token punctuation\">(</span><span class=\"token function\">inc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Now, we incorporated currying in <code>incAndCube</code>. But sorry that this currying doesn’t do anything practical in the first step, nor does it store any temporary variables. It is just for the sake of experiencing the cool currying technique.</p>\n<p>🤔 How about we try to split <code>incAndCube</code> into 2 steps? </p>\n<ul>\n<li>The 1st step is to obtain the function expression for the entire calculation of <code>x</code>.</li>\n<li>The 2nd step is to substitute x with a value.</li>\n</ul>\n<h3 id=\"Function-Composition\"><a href=\"#Function-Composition\" class=\"headerlink\" title=\"Function Composition\"></a>Function Composition</h3><p>For the 1st step, we need to write a function to compose the <code>inc</code> and <code>cube</code> functions.<br>Its input is two functions, and its output is the combination of these two functions.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">g<span class=\"token punctuation\">,</span> h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>The above code means that we first calculate <code>h</code>, then calculate <code>g</code>.<br>So we can write the <code>incAndCube</code> function like below, as we need to first calculate <code>inc</code> and then calculate <code>cube</code>.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incAndCube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> composedFunc <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>cube<span class=\"token punctuation\">,</span> inc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">composedFunc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>🌇 Now, we finished it! Here is the complete code:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">repeat</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">g<span class=\"token punctuation\">,</span> h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incAndCube</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> composedFunc <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>cube<span class=\"token punctuation\">,</span> inc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">composedFunc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">incAndCube</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Sing-a-Different-Tune\"><a href=\"#Sing-a-Different-Tune\" class=\"headerlink\" title=\"Sing a Different Tune\"></a>Sing a Different Tune</h3><p>Functional programming offers advantages in some cases, but it’s not always the best solution for every situation.</p>\n<p>The original, straightforward definition of incAndCube with three <code>x + 1</code> multiplications is already simple and easy to understand. In cases where reusability and extensibility aren’t required, this approach saves programming time and remains clear to other developers.</p>\n<p>However, in large-scale projects with possible shifting requirements, single-purpose and straightforward functions prove more robust. Consider our basic <code>inc</code> function: if its logic changed from <code>x + 1</code> to <code>x + 2</code>, we’d have to modify the original code in three places. If the function were more much complex than <code>inc</code>, multiple updates may introduce unforeseen problems.</p>\n<p>In conclusion, each programming method has its strengths. While functional programming might seem more advanced, it’s not a one-size-fits-all solution. It’s essential to choose the appropriate approach based on the specific situation and project requirements.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cldwmqq0800002epn1bvn2n15","tag_id":"cldwmqq0e00022epn5k5a8n4e","_id":"cldwmqq0j00072epngjpxawlu"},{"post_id":"cldwmqq0h00052epn293t0lp2","tag_id":"cldwmqq0e00022epn5k5a8n4e","_id":"cldwmqq0k00092epn0i7iegwb"},{"post_id":"cldwmqq0j00082epn59tn69b1","tag_id":"cldwmqq0e00022epn5k5a8n4e","_id":"cldwmqq0l000c2epne6f2b5wp"},{"post_id":"cldwmqq0f00032epne7a5e0ys","tag_id":"cldwmqq0e00022epn5k5a8n4e","_id":"cldwmqq0m000e2epn1q66ca7r"},{"post_id":"cldwmqq0l000d2epnawmodznq","tag_id":"cldwmqq0e00022epn5k5a8n4e","_id":"cldwmqq0m000g2epn1ecm2zu2"},{"post_id":"cldwmqq0g00042epn87mo9kch","tag_id":"cldwmqq0l000b2epn55xe9hka","_id":"cldwmqq0m000h2epnexl5dfvs"},{"post_id":"cldwmqq0k000a2epnee4qhy8f","tag_id":"cldwmqq0m000f2epndx7222dl","_id":"cldwmqq0m000i2epn2jnvaz6x"},{"post_id":"clfeuwlv00000prpnhs1w6m5d","tag_id":"cldwmqq0e00022epn5k5a8n4e","_id":"clfeuwlv40001prpn5r0y9cl1"},{"post_id":"cleoqandg0000bfpn44flad8r","tag_id":"cldwmqq0e00022epn5k5a8n4e","_id":"clfn3xjj30000b9pn750rd5xi"},{"post_id":"cldwmqq0c00012epnhdsh6n5x","tag_id":"clfn42qw90001ejpnhsmleqvh","_id":"clfn42qwb0003ejpn2n6dftba"},{"post_id":"clesw5rpl0000dhpn4x1339i6","tag_id":"cldwmqq0m000f2epndx7222dl","_id":"clfn44vu80000gnpnb8yf655v"},{"post_id":"clfq2apw5000056pn1jkabavb","tag_id":"clfq2bt54000356pn92bhgnhv","_id":"clfq2bt55000456pn7gbl3tmq"}],"Tag":[{"name":"React","_id":"cldwmqq0e00022epn5k5a8n4e"},{"name":"DSA for web dev","_id":"cldwmqq0l000b2epn55xe9hka"},{"name":"JavaScript","_id":"cldwmqq0m000f2epndx7222dl"},{"name":"JavaScript, Closure","_id":"clfn3xjj30001b9pnb33y4xnh"},{"name":"JavaScript Closure","_id":"clfn42qw70000ejpn1w1xdzb8"},{"name":"Memory","_id":"clfn42qw90001ejpnhsmleqvh"},{"name":"SICP Functional-Programming JavaScript Recursion","_id":"clfq2bjmf000156pnb71u6nsz"},{"name":"Functional-Programming","_id":"clfq2bt54000356pn92bhgnhv"}]}}