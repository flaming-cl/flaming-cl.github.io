{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.0cb5c513.jpg","path":"static/img/default-cover.0cb5c513.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.6be4f6ad.js","path":"static/js/404.6be4f6ad.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.cce5f7d2.js","path":"static/js/archives.cce5f7d2.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.22fb1e0f.js","path":"static/js/about.22fb1e0f.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.9555ebf4.js","path":"static/js/categories.9555ebf4.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.f075ccdf.js","path":"static/js/chunk-libs.f075ccdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a7f9c2ed.js","path":"static/js/page.a7f9c2ed.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.5c1774b3.js","path":"static/js/post.5c1774b3.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.bb7c7b68.js","path":"static/js/result.bb7c7b68.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.ef0a903a.js","path":"static/js/tags.ef0a903a.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.0adfb9ab.css","path":"static/css/404.0adfb9ab.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.146e7a5c.css","path":"static/css/about.146e7a5c.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.a51fdfda.css","path":"static/css/archives.a51fdfda.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.0efa1954.css","path":"static/css/categories.0efa1954.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.f7bc5e05.css","path":"static/css/page.f7bc5e05.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.0efa1954.css","path":"static/css/result.0efa1954.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.0efa1954.css","path":"static/css/tags.0efa1954.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.7978b119.js","path":"static/js/app.7978b119.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.81fe2707.css","path":"static/css/app.81fe2707.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/locality.md","hash":"d7017bff336998420ecf915a037321059c5b5103","modified":1675912505303},{"_id":"source/_posts/async-setState.md","hash":"265ec84ef1b8f9bda8d8e883e05298b70b31e53e","modified":1676071643092},{"_id":"source/_posts/dsa_for_web_trie_router.md","hash":"1161f86440a4704a96cd0555270da6f260022760","modified":1675912505303},{"_id":"source/_posts/react-fiber-tree.md","hash":"088d609686c279a65bcdf320089dd90d735fb9c6","modified":1675912505303},{"_id":"source/_posts/simple-ideas-about-React-Concurrent-mode.md","hash":"99b01bf01c488a50e76f25e7a64d2ffd76ecab7c","modified":1675912505304},{"_id":"source/_posts/react-render-phase.md","hash":"33d956f345d4d31aae68f100e1c5f7262d2faf48","modified":1675912505304},{"_id":"source/_posts/single-threaded-javascript.md","hash":"4d49251909391be47933fc0056d80f965183268e","modified":1675963193747},{"_id":"source/_posts/time-slicing-react.md","hash":"f27d2943f0134d81b6c409520cf8ec2b8b72ce3a","modified":1675912505304},{"_id":"node_modules/hexo-theme-aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":1675912502895},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG.md","hash":"e68f3af8af17d326a48e1b317e01d7429193217e","modified":1675912502896},{"_id":"node_modules/hexo-theme-aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":1675912502896},{"_id":"node_modules/hexo-theme-aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":1675893270212},{"_id":"node_modules/hexo-theme-aurora/README.md","hash":"c50f58b08b75780990c18ab85761e3e24aac0d90","modified":1675912502896},{"_id":"node_modules/hexo-theme-aurora/_config.yml","hash":"e6b2335cb393444b8a1fc1ad65331f4a30bc8915","modified":1675912502897},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG_CN.md","hash":"5d13c251e8b77fd86870da50f3be98f8822edc66","modified":1675912502896},{"_id":"node_modules/hexo-theme-aurora/package.json","hash":"1b312a6a2de107ba9dc952614f1078c78664a4e4","modified":1675912502897},{"_id":"node_modules/hexo-theme-aurora/scripts/index.js","hash":"2a3c62a860581ee6813ca4bcaa7c952f614e818c","modified":1675893270217},{"_id":"node_modules/hexo-theme-aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":1675893270215},{"_id":"node_modules/hexo-theme-aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":1675893270215},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/layout/index.ejs","hash":"e08bd3831afd4b54d63d064417378857e42b522a","modified":1676068860649},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":1675893270218},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/index.js","hash":"dfbb0fdbf990bd67684ed891a4aaa1fd8dcd23f2","modified":1675898548957},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/filters/index.js","hash":"5eacff9446dd6c9a7eb0a0c84be9187055440454","modified":1675903576586},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/post.js","hash":"023baeb8d0fd3687c97004f2c73bad0dd207c0f7","modified":1675893270218},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":1675893270219},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":1675893270218},{"_id":"node_modules/hexo-theme-aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":1675912502897},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":1675893270219},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":1675893270219},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/mapper.js","hash":"266a87499af02b7d25a14e88c2c632d2c492b6c3","modified":1675893270220},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":1675893270220},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":1675893270221},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":1675893270219},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/utils.js","hash":"93ff75f0e35a1dc40d5406cc097f5988dd820600","modified":1675893270221},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":1675893270220},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/injector/index.js","hash":"7ca562ea3af3068ee925b5a8afdce0eaa1e15e64","modified":1675893270221},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.0cb5c513.jpg","hash":"bb898310c66d16bf83c919dc297ea4bb019424fb","modified":1675917824431},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.6be4f6ad.js","hash":"5aba99e4a9ca2ac53b23748a432c9fac2c65cb29","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.cce5f7d2.js","hash":"3a125bda03f482c3c0eaa75887364be4b1fab72a","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.22fb1e0f.js","hash":"77c8411564558544ae3d3246e2d14ee34dedf78a","modified":1675917824433},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.9555ebf4.js","hash":"194b26fb6ccaae0fc4f5533617356370036f6601","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.5c1774b3.js","hash":"82a354b7aff0ae9a4bbf8626c9e5157ffc2a103a","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a7f9c2ed.js","hash":"42a3d27f29f7ed33935c972f46ef2fe66be0e1b1","modified":1675917824435},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.bb7c7b68.js","hash":"5fb1bafd40bb515f7c4d15399e6fef4af58a377a","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.0adfb9ab.css","hash":"c6893036083fde17c7aa5c7b616cf2d9b51a0433","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.ef0a903a.js","hash":"7c0355e3f0f469cfee19e5001fcaccf6c229d8a1","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.a51fdfda.css","hash":"24c8cb385ba252456d2334a303a1a0140f0955c2","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.146e7a5c.css","hash":"acdaf33028c3c5e9a5e63cece60e4880e5cb3595","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1675917824435},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.0efa1954.css","hash":"42637609aeb2b772a22723b82e622aae6e57ffd5","modified":1675917824435},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1675917824435},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.f7bc5e05.css","hash":"631109598caa6253c1bef61cfce7a6dfd1407ec7","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.0efa1954.css","hash":"42637609aeb2b772a22723b82e622aae6e57ffd5","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.0efa1954.css","hash":"42637609aeb2b772a22723b82e622aae6e57ffd5","modified":1675917824436},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.ab43a208.css","hash":"d617bdd000c9a3d8f1466048e66be43d1c30ba55","modified":1675917824433},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.9af737dd.js","hash":"c15762a8f15256ed01a3ac7413fc0c310ceed1fc","modified":1675917824434},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.f075ccdf.js","hash":"b788f426d9cef5ecaa3f9eddba9d09c06ac3f6d0","modified":1675917824434},{"_id":"public/api/posts/1.json","hash":"827b3984bd065a48f0368456990147dcc325bd4d","modified":1676069074756},{"_id":"public/api/articles/simple-ideas-about-React-Concurrent-mode.json","hash":"820fa1e167077e716d56ac11c12e459865e34d28","modified":1676069074756},{"_id":"public/api/articles/react-render-phase.json","hash":"c01cffeb24b7c3a8e39d74ec4f17ad00c20576b6","modified":1676067727293},{"_id":"public/api/articles/dsa_for_web_trie_router.json","hash":"dba735c6b2a0547ec3727c3dd9a19f317281eedf","modified":1675918731910},{"_id":"public/api/articles/async-setState.json","hash":"d712b6f3aead42bea9639d81f35ce7557a433def","modified":1676069074756},{"_id":"public/api/articles/react-fiber-tree.json","hash":"01ae3d15dd03494f81c689465d9672f34509cb57","modified":1675918731910},{"_id":"public/api/articles/single-threaded-javascript.json","hash":"2517cf91476f02150c61d8e1acb1f19a4742920a","modified":1676069074756},{"_id":"public/api/articles/locality.json","hash":"4fb95e8024e78dfae2d0b1eb4b19c9a1c3bd436b","modified":1675918731910},{"_id":"public/api/articles/time-slicing-react.json","hash":"f9be378441afa43492ab10284f1fdd488e28a8e1","modified":1675918731910},{"_id":"public/api/features.json","hash":"ab12aca5672368b80e9f9f4fd5b05eeac1ac9115","modified":1676069074756},{"_id":"public/api/authors/flaming-cl.json","hash":"4ca29b28d7c75398433ab164e68ae832be4a3ce3","modified":1676069074756},{"_id":"public/api/site.json","hash":"55e0a5aa16b76207312a2c878489784715844741","modified":1676069082637},{"_id":"public/api/categories.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1675918731910},{"_id":"public/api/tags.json","hash":"95d95731690e210607c447a8aa30f9ac4f0f2f51","modified":1675918731910},{"_id":"public/api/tags/React.json","hash":"a9794bb1452920aae2e36fa3083ccc31f734df8e","modified":1676069074756},{"_id":"public/api/tags/DSA-for-web-dev.json","hash":"f527f7a128685ae9143c6636ed6b026485aaff66","modified":1675918731910},{"_id":"public/api/tags/JavaScript.json","hash":"6fc9c4aa175a0dbbb24d0f4457d01000cf87aa95","modified":1676067727293},{"_id":"public/api/statistic.json","hash":"e8aec47a5b1fc13124431ff91ac851b20cae61fb","modified":1675918731910},{"_id":"public/api/search.json","hash":"1e720b4913fcd4779fbcbdd76482d3bebd16c53d","modified":1676069074756},{"_id":"public/post/single-threaded-javascript","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/post/async-setState","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/post/simple-ideas-about-React-Concurrent-mode","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/post/react-render-phase","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/post/dsa_for_web_trie_router","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/post/react-fiber-tree","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/post/locality","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/post/time-slicing-react","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918731910},{"_id":"public/index.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/tags/index.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/tags/search/index.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/archives/index.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1675918731910},{"_id":"public/static/img/default-cover.0cb5c513.jpg","hash":"bb898310c66d16bf83c919dc297ea4bb019424fb","modified":1675918731910},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1675918731910},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1675918731910},{"_id":"public/static/js/404.6be4f6ad.js","hash":"5aba99e4a9ca2ac53b23748a432c9fac2c65cb29","modified":1675918731910},{"_id":"public/static/js/about.22fb1e0f.js","hash":"77c8411564558544ae3d3246e2d14ee34dedf78a","modified":1675918731910},{"_id":"public/static/js/categories.9555ebf4.js","hash":"194b26fb6ccaae0fc4f5533617356370036f6601","modified":1675918731910},{"_id":"public/static/js/archives.cce5f7d2.js","hash":"3a125bda03f482c3c0eaa75887364be4b1fab72a","modified":1675918731910},{"_id":"public/static/js/page.a7f9c2ed.js","hash":"42a3d27f29f7ed33935c972f46ef2fe66be0e1b1","modified":1675918731910},{"_id":"public/static/js/post.5c1774b3.js","hash":"82a354b7aff0ae9a4bbf8626c9e5157ffc2a103a","modified":1675918731910},{"_id":"public/static/js/tags.ef0a903a.js","hash":"7c0355e3f0f469cfee19e5001fcaccf6c229d8a1","modified":1675918731910},{"_id":"public/static/js/result.bb7c7b68.js","hash":"5fb1bafd40bb515f7c4d15399e6fef4af58a377a","modified":1675918731910},{"_id":"public/static/css/archives.a51fdfda.css","hash":"24c8cb385ba252456d2334a303a1a0140f0955c2","modified":1675918731910},{"_id":"public/static/css/about.146e7a5c.css","hash":"acdaf33028c3c5e9a5e63cece60e4880e5cb3595","modified":1675918731910},{"_id":"public/static/css/categories.0efa1954.css","hash":"42637609aeb2b772a22723b82e622aae6e57ffd5","modified":1675918731910},{"_id":"public/static/css/404.0adfb9ab.css","hash":"c6893036083fde17c7aa5c7b616cf2d9b51a0433","modified":1675918731910},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1675918731910},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1675918731910},{"_id":"public/static/css/result.0efa1954.css","hash":"42637609aeb2b772a22723b82e622aae6e57ffd5","modified":1675918731910},{"_id":"public/static/css/tags.0efa1954.css","hash":"42637609aeb2b772a22723b82e622aae6e57ffd5","modified":1675918731910},{"_id":"public/static/css/page.f7bc5e05.css","hash":"631109598caa6253c1bef61cfce7a6dfd1407ec7","modified":1675918731910},{"_id":"public/static/js/chunk-libs.f075ccdf.js","hash":"b788f426d9cef5ecaa3f9eddba9d09c06ac3f6d0","modified":1675918731910},{"_id":"public/static/css/app.ab43a208.css","hash":"d617bdd000c9a3d8f1466048e66be43d1c30ba55","modified":1675918731910},{"_id":"public/static/js/app.9af737dd.js","hash":"c15762a8f15256ed01a3ac7413fc0c310ceed1fc","modified":1675918731910},{"_id":"source/about/index.md","hash":"6c44fdef696e33c9c5fa77480dc2ed5e65e242c6","modified":1675919380948},{"_id":"public/api/pages/about/index.json","hash":"54b7e1b0f3bf30c55a7e1c487ab469f3b1eaad37","modified":1675919714718},{"_id":"public/page/about/index.html","hash":"235308023d54e92b570f9aed98bd4ecc209a845b","modified":1675918800525},{"_id":"public/about/index.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/single-threaded-javascript.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/async-setState.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/simple-ideas-about-React-Concurrent-mode.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/react-render-phase.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/dsa_for_web_trie_router.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/react-fiber-tree.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/locality.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"public/post/time-slicing-react.html","hash":"840a55c41436c0e9b15e45aca011cb7c2f0b47b3","modified":1676069074756},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.81fe2707.css","hash":"e1f928ef9993f3bbc21b2af42ba52baad0ad6106","modified":1676068860647},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.7978b119.js","hash":"a2f743de50ad834e5b1698c55182b0d9923e67d6","modified":1676068860646},{"_id":"public/static/css/app.81fe2707.css","hash":"e1f928ef9993f3bbc21b2af42ba52baad0ad6106","modified":1676069074756},{"_id":"public/static/js/app.7978b119.js","hash":"a2f743de50ad834e5b1698c55182b0d9923e67d6","modified":1676069074756}],"Category":[],"Data":[],"Page":[{"title":"About","type":"about","_content":"\nDeveloper in 🇨🇦, specialized in React.js web dev.\n\n\n\n[GitHub 🐱](https://github.com/flaming-cl)  |  [Twitter 🐦](https://twitter.com/flaming_cl)\n\n❤️ \n<section style=\"\n    display: grid;\n    width: 164px;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    background: linear-gradient(192deg, rgb(255 255 255), rgb(140, 185, 255) 41.07%, rgb(255, 109, 140) 76.05%);\n    border-radius: 23px;\n    padding: 2px 12px;\">\n    <div>💻</div> \n    <div>🎮</div>\n    <img src=\"https://user-images.githubusercontent.com/51183663/217701653-5f6a9bcc-a0a4-4e35-9d6d-f3c39623b182.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n    <img src=\"https://user-images.githubusercontent.com/51183663/217700781-2377d5e4-9e33-4712-b1da-4de5472e798b.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n</section>\n","source":"about/index.md","raw":"---\ntitle: About\ntype: about\n---\n\nDeveloper in 🇨🇦, specialized in React.js web dev.\n\n\n\n[GitHub 🐱](https://github.com/flaming-cl)  |  [Twitter 🐦](https://twitter.com/flaming_cl)\n\n❤️ \n<section style=\"\n    display: grid;\n    width: 164px;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    background: linear-gradient(192deg, rgb(255 255 255), rgb(140, 185, 255) 41.07%, rgb(255, 109, 140) 76.05%);\n    border-radius: 23px;\n    padding: 2px 12px;\">\n    <div>💻</div> \n    <div>🎮</div>\n    <img src=\"https://user-images.githubusercontent.com/51183663/217701653-5f6a9bcc-a0a4-4e35-9d6d-f3c39623b182.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n    <img src=\"https://user-images.githubusercontent.com/51183663/217700781-2377d5e4-9e33-4712-b1da-4de5472e798b.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n</section>\n","date":"2023-02-09T05:09:40.948Z","updated":"2023-02-09T05:09:40.948Z","path":"about/index.html","_id":"cldwms41h00003hpndzrz3pmp","comments":1,"layout":"page","content":"<p>Developer in 🇨🇦, specialized in React.js web dev.</p>\n<p><a href=\"https://github.com/flaming-cl\">GitHub 🐱</a>  |  <a href=\"https://twitter.com/flaming_cl\">Twitter 🐦</a></p>\n<p>❤️ </p>\n<section style=\"\n    display: grid;\n    width: 164px;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    background: linear-gradient(192deg, rgb(255 255 255), rgb(140, 185, 255) 41.07%, rgb(255, 109, 140) 76.05%);\n    border-radius: 23px;\n    padding: 2px 12px;\">\n    <div>💻</div> \n    <div>🎮</div>\n    <img src=\"https://user-images.githubusercontent.com/51183663/217701653-5f6a9bcc-a0a4-4e35-9d6d-f3c39623b182.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n    <img src=\"https://user-images.githubusercontent.com/51183663/217700781-2377d5e4-9e33-4712-b1da-4de5472e798b.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n</section>\n","site":{"data":{}},"excerpt":"","more":"<p>Developer in 🇨🇦, specialized in React.js web dev.</p>\n<p><a href=\"https://github.com/flaming-cl\">GitHub 🐱</a>  |  <a href=\"https://twitter.com/flaming_cl\">Twitter 🐦</a></p>\n<p>❤️ </p>\n<section style=\"\n    display: grid;\n    width: 164px;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    background: linear-gradient(192deg, rgb(255 255 255), rgb(140, 185, 255) 41.07%, rgb(255, 109, 140) 76.05%);\n    border-radius: 23px;\n    padding: 2px 12px;\">\n    <div>💻</div> \n    <div>🎮</div>\n    <img src=\"https://user-images.githubusercontent.com/51183663/217701653-5f6a9bcc-a0a4-4e35-9d6d-f3c39623b182.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n    <img src=\"https://user-images.githubusercontent.com/51183663/217700781-2377d5e4-9e33-4712-b1da-4de5472e798b.png\" width = \"24\" height = \"24\" alt=\"film\" align=center />\n</section>\n"}],"Post":[{"title":"Is setState asynchronous?","date":"2023-02-07T20:07:27.000Z","_content":"## Ideas of this article \nSetState itself is **not an asynchronous** function, but for some reasons React makes setState **act like an async** function.\n\nThis article will:\n1. summarize why setState() act like an async function.\n2. discuss what makes synchronous setState() to act asynchronously\n3. provide an example to tell why async or sync setState matters  \n\n## Why setState() act like an async function\nWe expect synchronous calls to be executed immediately, while asynchronous calls to be executed after a while.\n\n**In daily life, what kind of things you will do immediately, and what you will do later?**\n\nObviously, things that are done immediately usually have higher priority, and things delayed are usually less important. Similarly, what we trigger with setState is not always with top priority.\n\nHere comes the first reason to make setState act in an asynchronous way: **priority scheduling**. \n\n> React could assign different priorities to setState() calls depending on where they’re coming from: an event handler, a network response, an animation, etc.  \n> -- Dan Abramov\n\n\n### Reason 1: ensures concurrent features\n**Example**\nAssume you are receiving a bunch of notification messages, while editing a post on social media.\n\n**What happens if the notification updates were immediately executed?** \n\nYou may not be annoyed by this when there are only a few messages. But if there are 100+ or even 1000+ new messages, your keyboard input can be very sluggish, as the browser is busy updating new notifications.\n\n**For the above situation, what can you do to ensure smooth text input for users?**\n\nA good practice is: giving low priority to message updates which are not important in this case. And when a message update encounters a high priority event, we will ask the former one to yield the main thread.\n\n**Why asynchronous setState() benefits prioritized rendering (concurrent features) in React?**\nAsynchronous-like setState() makes concurrent features possible. \n\nThis is because async-like setState() makes it easier to delay execution of low priority task and make room for high priority ones.\n\nTo further understand concurrent features, you can go to [this post](https://flaming-cl.github.io/post/simple-ideas-about-React-Concurrent-mode)\n\n### Reason 2: avoid dirty data\nBesides performance optimization, avoiding dirty data is another reason for us to avoid running setState() in an synchronous way.\n\nTo understand this, we need to talk about the core value of React first.\n\n**React In Theory**\n\nFor React, its most fundamental principle evolved from this formula:\n> UI = f(state)\n\nThe idea behind it is simple: **same input states result in same UI**.\n\nHowever, based on Dan Abramov’s explanation, running setState() synchronously may violate React's pure-function-like update processes.\n\n**Why running synchronous setState() may violate the core value of React?**\n\nBecause it is hard to ensure consistency on synchronously updated states and their props.\n\nStates are often not isolated but come with props. To ensure consistent data flow, once you immediately update a state, you also need to update its related props in time.\n\n> However, even though you may immediately update a state, props only update after the reconciliation and flushing.\n\nFor example, although a parent component updates a state immediately, the state related props received by children have to wait until reconciliation or flushing finished.\n\n**Such inconsistency can lead to dirty data.**\n\n## What makes sync setState() act asynchronously\n\n","source":"_posts/async-setState.md","raw":"---\ntitle: Is setState asynchronous?\ndate: 2023-02-07 15:07:27\ntags: React\n---\n## Ideas of this article \nSetState itself is **not an asynchronous** function, but for some reasons React makes setState **act like an async** function.\n\nThis article will:\n1. summarize why setState() act like an async function.\n2. discuss what makes synchronous setState() to act asynchronously\n3. provide an example to tell why async or sync setState matters  \n\n## Why setState() act like an async function\nWe expect synchronous calls to be executed immediately, while asynchronous calls to be executed after a while.\n\n**In daily life, what kind of things you will do immediately, and what you will do later?**\n\nObviously, things that are done immediately usually have higher priority, and things delayed are usually less important. Similarly, what we trigger with setState is not always with top priority.\n\nHere comes the first reason to make setState act in an asynchronous way: **priority scheduling**. \n\n> React could assign different priorities to setState() calls depending on where they’re coming from: an event handler, a network response, an animation, etc.  \n> -- Dan Abramov\n\n\n### Reason 1: ensures concurrent features\n**Example**\nAssume you are receiving a bunch of notification messages, while editing a post on social media.\n\n**What happens if the notification updates were immediately executed?** \n\nYou may not be annoyed by this when there are only a few messages. But if there are 100+ or even 1000+ new messages, your keyboard input can be very sluggish, as the browser is busy updating new notifications.\n\n**For the above situation, what can you do to ensure smooth text input for users?**\n\nA good practice is: giving low priority to message updates which are not important in this case. And when a message update encounters a high priority event, we will ask the former one to yield the main thread.\n\n**Why asynchronous setState() benefits prioritized rendering (concurrent features) in React?**\nAsynchronous-like setState() makes concurrent features possible. \n\nThis is because async-like setState() makes it easier to delay execution of low priority task and make room for high priority ones.\n\nTo further understand concurrent features, you can go to [this post](https://flaming-cl.github.io/post/simple-ideas-about-React-Concurrent-mode)\n\n### Reason 2: avoid dirty data\nBesides performance optimization, avoiding dirty data is another reason for us to avoid running setState() in an synchronous way.\n\nTo understand this, we need to talk about the core value of React first.\n\n**React In Theory**\n\nFor React, its most fundamental principle evolved from this formula:\n> UI = f(state)\n\nThe idea behind it is simple: **same input states result in same UI**.\n\nHowever, based on Dan Abramov’s explanation, running setState() synchronously may violate React's pure-function-like update processes.\n\n**Why running synchronous setState() may violate the core value of React?**\n\nBecause it is hard to ensure consistency on synchronously updated states and their props.\n\nStates are often not isolated but come with props. To ensure consistent data flow, once you immediately update a state, you also need to update its related props in time.\n\n> However, even though you may immediately update a state, props only update after the reconciliation and flushing.\n\nFor example, although a parent component updates a state immediately, the state related props received by children have to wait until reconciliation or flushing finished.\n\n**Such inconsistency can lead to dirty data.**\n\n## What makes sync setState() act asynchronously\n\n","slug":"async-setState","published":1,"updated":"2023-02-10T23:27:23.092Z","_id":"cldwmqq0800002epn1bvn2n15","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Ideas-of-this-article\"><a href=\"#Ideas-of-this-article\" class=\"headerlink\" title=\"Ideas of this article\"></a>Ideas of this article</h2><p>SetState itself is <strong>not an asynchronous</strong> function, but for some reasons React makes setState <strong>act like an async</strong> function.</p>\n<p>This article will:</p>\n<ol>\n<li>summarize why setState() act like an async function.</li>\n<li>discuss what makes synchronous setState() to act asynchronously</li>\n<li>provide an example to tell why async or sync setState matters</li>\n</ol>\n<h2 id=\"Why-setState-act-like-an-async-function\"><a href=\"#Why-setState-act-like-an-async-function\" class=\"headerlink\" title=\"Why setState() act like an async function\"></a>Why setState() act like an async function</h2><p>We expect synchronous calls to be executed immediately, while asynchronous calls to be executed after a while.</p>\n<p><strong>In daily life, what kind of things you will do immediately, and what you will do later?</strong></p>\n<p>Obviously, things that are done immediately usually have higher priority, and things delayed are usually less important. Similarly, what we trigger with setState is not always with top priority.</p>\n<p>Here comes the first reason to make setState act in an asynchronous way: <strong>priority scheduling</strong>. </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>React could assign different priorities to setState() calls depending on where they’re coming from: an event handler, a network response, an animation, etc.<br>– Dan Abramov</p></blockquote>\n<h3 id=\"Reason-1-ensures-concurrent-features\"><a href=\"#Reason-1-ensures-concurrent-features\" class=\"headerlink\" title=\"Reason 1: ensures concurrent features\"></a>Reason 1: ensures concurrent features</h3><p><strong>Example</strong><br>Assume you are receiving a bunch of notification messages, while editing a post on social media.</p>\n<p><strong>What happens if the notification updates were immediately executed?</strong> </p>\n<p>You may not be annoyed by this when there are only a few messages. But if there are 100+ or even 1000+ new messages, your keyboard input can be very sluggish, as the browser is busy updating new notifications.</p>\n<p><strong>For the above situation, what can you do to ensure smooth text input for users?</strong></p>\n<p>A good practice is: giving low priority to message updates which are not important in this case. And when a message update encounters a high priority event, we will ask the former one to yield the main thread.</p>\n<p><strong>Why asynchronous setState() benefits prioritized rendering (concurrent features) in React?</strong><br>Asynchronous-like setState() makes concurrent features possible. </p>\n<p>This is because async-like setState() makes it easier to delay execution of low priority task and make room for high priority ones.</p>\n<p>To further understand concurrent features, you can go to <a href=\"https://flaming-cl.github.io/post/simple-ideas-about-React-Concurrent-mode\">this post</a></p>\n<h3 id=\"Reason-2-avoid-dirty-data\"><a href=\"#Reason-2-avoid-dirty-data\" class=\"headerlink\" title=\"Reason 2: avoid dirty data\"></a>Reason 2: avoid dirty data</h3><p>Besides performance optimization, avoiding dirty data is another reason for us to avoid running setState() in an synchronous way.</p>\n<p>To understand this, we need to talk about the core value of React first.</p>\n<p><strong>React In Theory</strong></p>\n<p>For React, its most fundamental principle evolved from this formula:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>UI &#x3D; f(state)</p></blockquote>\n<p>The idea behind it is simple: <strong>same input states result in same UI</strong>.</p>\n<p>However, based on Dan Abramov’s explanation, running setState() synchronously may violate React’s pure-function-like update processes.</p>\n<p><strong>Why running synchronous setState() may violate the core value of React?</strong></p>\n<p>Because it is hard to ensure consistency on synchronously updated states and their props.</p>\n<p>States are often not isolated but come with props. To ensure consistent data flow, once you immediately update a state, you also need to update its related props in time.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>However, even though you may immediately update a state, props only update after the reconciliation and flushing.</p></blockquote>\n<p>For example, although a parent component updates a state immediately, the state related props received by children have to wait until reconciliation or flushing finished.</p>\n<p><strong>Such inconsistency can lead to dirty data.</strong></p>\n<h2 id=\"What-makes-sync-setState-act-asynchronously\"><a href=\"#What-makes-sync-setState-act-asynchronously\" class=\"headerlink\" title=\"What makes sync setState() act asynchronously\"></a>What makes sync setState() act asynchronously</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Ideas-of-this-article\"><a href=\"#Ideas-of-this-article\" class=\"headerlink\" title=\"Ideas of this article\"></a>Ideas of this article</h2><p>SetState itself is <strong>not an asynchronous</strong> function, but for some reasons React makes setState <strong>act like an async</strong> function.</p>\n<p>This article will:</p>\n<ol>\n<li>summarize why setState() act like an async function.</li>\n<li>discuss what makes synchronous setState() to act asynchronously</li>\n<li>provide an example to tell why async or sync setState matters</li>\n</ol>\n<h2 id=\"Why-setState-act-like-an-async-function\"><a href=\"#Why-setState-act-like-an-async-function\" class=\"headerlink\" title=\"Why setState() act like an async function\"></a>Why setState() act like an async function</h2><p>We expect synchronous calls to be executed immediately, while asynchronous calls to be executed after a while.</p>\n<p><strong>In daily life, what kind of things you will do immediately, and what you will do later?</strong></p>\n<p>Obviously, things that are done immediately usually have higher priority, and things delayed are usually less important. Similarly, what we trigger with setState is not always with top priority.</p>\n<p>Here comes the first reason to make setState act in an asynchronous way: <strong>priority scheduling</strong>. </p>\n<blockquote>\n<p>React could assign different priorities to setState() calls depending on where they’re coming from: an event handler, a network response, an animation, etc.<br>– Dan Abramov</p>\n</blockquote>\n<h3 id=\"Reason-1-ensures-concurrent-features\"><a href=\"#Reason-1-ensures-concurrent-features\" class=\"headerlink\" title=\"Reason 1: ensures concurrent features\"></a>Reason 1: ensures concurrent features</h3><p><strong>Example</strong><br>Assume you are receiving a bunch of notification messages, while editing a post on social media.</p>\n<p><strong>What happens if the notification updates were immediately executed?</strong> </p>\n<p>You may not be annoyed by this when there are only a few messages. But if there are 100+ or even 1000+ new messages, your keyboard input can be very sluggish, as the browser is busy updating new notifications.</p>\n<p><strong>For the above situation, what can you do to ensure smooth text input for users?</strong></p>\n<p>A good practice is: giving low priority to message updates which are not important in this case. And when a message update encounters a high priority event, we will ask the former one to yield the main thread.</p>\n<p><strong>Why asynchronous setState() benefits prioritized rendering (concurrent features) in React?</strong><br>Asynchronous-like setState() makes concurrent features possible. </p>\n<p>This is because async-like setState() makes it easier to delay execution of low priority task and make room for high priority ones.</p>\n<p>To further understand concurrent features, you can go to <a href=\"https://flaming-cl.github.io/post/simple-ideas-about-React-Concurrent-mode\">this post</a></p>\n<h3 id=\"Reason-2-avoid-dirty-data\"><a href=\"#Reason-2-avoid-dirty-data\" class=\"headerlink\" title=\"Reason 2: avoid dirty data\"></a>Reason 2: avoid dirty data</h3><p>Besides performance optimization, avoiding dirty data is another reason for us to avoid running setState() in an synchronous way.</p>\n<p>To understand this, we need to talk about the core value of React first.</p>\n<p><strong>React In Theory</strong></p>\n<p>For React, its most fundamental principle evolved from this formula:</p>\n<blockquote>\n<p>UI &#x3D; f(state)</p>\n</blockquote>\n<p>The idea behind it is simple: <strong>same input states result in same UI</strong>.</p>\n<p>However, based on Dan Abramov’s explanation, running setState() synchronously may violate React’s pure-function-like update processes.</p>\n<p><strong>Why running synchronous setState() may violate the core value of React?</strong></p>\n<p>Because it is hard to ensure consistency on synchronously updated states and their props.</p>\n<p>States are often not isolated but come with props. To ensure consistent data flow, once you immediately update a state, you also need to update its related props in time.</p>\n<blockquote>\n<p>However, even though you may immediately update a state, props only update after the reconciliation and flushing.</p>\n</blockquote>\n<p>For example, although a parent component updates a state immediately, the state related props received by children have to wait until reconciliation or flushing finished.</p>\n<p><strong>Such inconsistency can lead to dirty data.</strong></p>\n<h2 id=\"What-makes-sync-setState-act-asynchronously\"><a href=\"#What-makes-sync-setState-act-asynchronously\" class=\"headerlink\" title=\"What makes sync setState() act asynchronously\"></a>What makes sync setState() act asynchronously</h2>"},{"title":"Exploring the Benefits of Locality in Memory","date":"2022-11-10T18:04:15.000Z","_content":"As stated in Computer Systems: A Programmer's Perspective:\n> Well-written computer programs tend to exhibit good locality\n\n## What is locality\n<details><summary><b>If you haven't heard of locality, click here.</b></summary>\n<div>\n \n> Locality is often described as temporal locality and spatial locality.\n\n## 1. Spatial locality\nGood practice: reference a memory location and then its neighbors\n### Poor spatial locality\n```c\nint sumarraycols (int a[M][N]) {\n  int i, j, sum = 0;\n  for (j = 0; j < N; j++)\n    for (i =0: i < M; i++)\n      sum+ = a[i][j]:\n  return sum;\n}\n```\nThis code jumping through elements of different rows in the matrix.\n\nAssume you are going to buy groceries and books. With poor spatial locality, you  do this:\n- buy tomatoes first, and go to a book store for a Math book.\n- back to the grocery store for milk, and go to the book store again for a comic book.\n\n### Better spatial locality\n```c\nint sumarraycols (int a[M][N]) {\n  int i, j, sum = 0;\n  for (i = 0; i < M; i++)\n    for (j =0: j < N; j++)\n      sum+ = a[i][j]:\n  return sum;\n}\n```\nThis code reads all the elements in a row and then the next row.\n\nBack to our grocery example, this time you buy everything from the grocery store first. \nLater to buy all the books you need from the book store.\n\n## 2. Temporal locality\nGood practice: reference a memory location multiple times\n### Good temporal locality\nOur code above repeatedly reference the same variables (i, j) and enjoy good temporal locality.\n\n</div>\n</details>\n\n## Example in JavaScript\nCan we have good spatial locality if we loop cols before rows like this?\n```javascript\nfunction farAccess(data) {\n  for (let i = 0; i < COLS; i++) {\n    for (let j = 0; j < ROWS; j++) {\n      data[j * ROWS + i].x = 1;\n    }\n  }\n}\n```\nLet's look at an [example](https://codesandbox.io/s/cool-murdock-bnj02z?file=/src/index.js) given by Yonatan Kra:\n\n1/ Create an array of 1,000,000 instances.\n```javascript\nconst ROWS = 1000, COLS = 1000, REPEATS = 1000;\nconst testArray = new Array(ROWS * COLS).fill(0).map((a, i) => new Boom(i));\n\n// testArray:\n0:Boom {id: 0, x: 0}\n1:Boom {id: 1, x: 0}\n2:Boom {id: 2, x: 0}\n3:Boom {id: 3, x: 0}\n...\n999999:Boom {id: 999999, x: 0}\n```\n2/ Create a tricky array.\n```javascript\nconst trickyArray = new Array(ROWS * COLS).fill(0);\nfor (let col = 0; col < COLS; col++) {\n    for (let row = 0; row < ROWS; row++) {\n        trickyArray[row * ROWS + col] = arr[col * COLS + row];\n    }\n}\n```\n3/ Write two functions with good/bad spatial locality. \n```javascript\nfunction runGoodSpatialLocality(arr) {\n  for (let i = 0; i < ROWS; i++) {\n    for (let j = 0; j < COLS; j++) {\n      arr[i * ROWS + j].x = 0;\n    }\n  }\n}\n\nfunction runPoorSpatialLocality(arr) {\n  for (let i = 0; i < COLS; i++) {\n    for (let j = 0; j < ROWS; j++) {\n      arr[j * ROWS + i].x = 0;\n    }\n  }\n}\n```\n4/ Test performance\n```javascript\nfunction timeit(cb, type) {\n    console.log(`Started data ${type}`);\n    const start = performance.now();\n    for (let i = 0; i < repeats; i++) {\n        cb();\n    }\n    const end = performance.now();\n    console.log(\n        `Finished data locality test run in ${((end - start) / 1000).toFixed(\n            4\n        )} seconds`\n    );\n    return end - start;\n}\n\ntimeit(() => runGoodSpatialLocality(testArray), \"good\");\nsetTimeout(() => {\n    timeit(() => runPoorSpatialLocality(testArray), \"bad\");\n    setTimeout(() => {\n        timeit(() => runPoorSpatialLocality(trickyArray), \"tricky\");\n    }, 2000);\n}, 2000);\n```\n5/ Results\nThe second function call with bad locality is more than 2 times slower.\nThis is because it makes the CPU chasing its tail to jump between N (length of a row) stride of memory, during each access.\nBut why the third function call with bad locality and the tricky array is still fast? \n```javascript\nFinished good data locality test in 5.1799 seconds\nFinished bad data locality test in 13.9438 seconds\nFinished tricky data locality test in 5.4242 seconds\n```\nBecause our tricky array still access 1-[stride](https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/) of an array:\nAlthough we access the whole array by index 0, 1000, ... \nour tricky array just put elements with 1-stride of memory on index 0, 1000, 2000, ... like this:\n```javascript\n// trickArray:\n0:Boom {id: 0, x: 0}\n1:Boom {id: 1000, x: 0}\n1000:Boom {id: 1, x: 0}\n1001:Boom {id: 1001, x: 0}\n2000:Boom {id: 2, x: 0}\n...\n\n// testArray:\n0:Boom {id: 0, x: 0}\n1:Boom {id: 1, x: 0}\n1000:Boom {id: 1000, x: 0}\n2000:Boom {id: 1000, x: 0}\n...\n```\nNow we get the answer: Yes. \nEven though we run a COL loop first and a ROW loop later, \nas we still access a memory location and its neighbors in memory,\nwe can have good spatial locality.\n\n### References\n\n[1] [Computer Systems: A Programmer's Perspective](https://csapp.cs.cmu.edu)\n[2] [Memory in Javascript—Beyond Leaks](https://medium.com/walkme-engineering/memory-in-javascript-beyond-leaks-8c1d697c655c)\n[3] [Stride, Caches, CS61C lab12](https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/)\n","source":"_posts/locality.md","raw":"---\ntitle: Exploring the Benefits of Locality in Memory\ndate: 2022-11-10 13:04:15\n---\nAs stated in Computer Systems: A Programmer's Perspective:\n> Well-written computer programs tend to exhibit good locality\n\n## What is locality\n<details><summary><b>If you haven't heard of locality, click here.</b></summary>\n<div>\n \n> Locality is often described as temporal locality and spatial locality.\n\n## 1. Spatial locality\nGood practice: reference a memory location and then its neighbors\n### Poor spatial locality\n```c\nint sumarraycols (int a[M][N]) {\n  int i, j, sum = 0;\n  for (j = 0; j < N; j++)\n    for (i =0: i < M; i++)\n      sum+ = a[i][j]:\n  return sum;\n}\n```\nThis code jumping through elements of different rows in the matrix.\n\nAssume you are going to buy groceries and books. With poor spatial locality, you  do this:\n- buy tomatoes first, and go to a book store for a Math book.\n- back to the grocery store for milk, and go to the book store again for a comic book.\n\n### Better spatial locality\n```c\nint sumarraycols (int a[M][N]) {\n  int i, j, sum = 0;\n  for (i = 0; i < M; i++)\n    for (j =0: j < N; j++)\n      sum+ = a[i][j]:\n  return sum;\n}\n```\nThis code reads all the elements in a row and then the next row.\n\nBack to our grocery example, this time you buy everything from the grocery store first. \nLater to buy all the books you need from the book store.\n\n## 2. Temporal locality\nGood practice: reference a memory location multiple times\n### Good temporal locality\nOur code above repeatedly reference the same variables (i, j) and enjoy good temporal locality.\n\n</div>\n</details>\n\n## Example in JavaScript\nCan we have good spatial locality if we loop cols before rows like this?\n```javascript\nfunction farAccess(data) {\n  for (let i = 0; i < COLS; i++) {\n    for (let j = 0; j < ROWS; j++) {\n      data[j * ROWS + i].x = 1;\n    }\n  }\n}\n```\nLet's look at an [example](https://codesandbox.io/s/cool-murdock-bnj02z?file=/src/index.js) given by Yonatan Kra:\n\n1/ Create an array of 1,000,000 instances.\n```javascript\nconst ROWS = 1000, COLS = 1000, REPEATS = 1000;\nconst testArray = new Array(ROWS * COLS).fill(0).map((a, i) => new Boom(i));\n\n// testArray:\n0:Boom {id: 0, x: 0}\n1:Boom {id: 1, x: 0}\n2:Boom {id: 2, x: 0}\n3:Boom {id: 3, x: 0}\n...\n999999:Boom {id: 999999, x: 0}\n```\n2/ Create a tricky array.\n```javascript\nconst trickyArray = new Array(ROWS * COLS).fill(0);\nfor (let col = 0; col < COLS; col++) {\n    for (let row = 0; row < ROWS; row++) {\n        trickyArray[row * ROWS + col] = arr[col * COLS + row];\n    }\n}\n```\n3/ Write two functions with good/bad spatial locality. \n```javascript\nfunction runGoodSpatialLocality(arr) {\n  for (let i = 0; i < ROWS; i++) {\n    for (let j = 0; j < COLS; j++) {\n      arr[i * ROWS + j].x = 0;\n    }\n  }\n}\n\nfunction runPoorSpatialLocality(arr) {\n  for (let i = 0; i < COLS; i++) {\n    for (let j = 0; j < ROWS; j++) {\n      arr[j * ROWS + i].x = 0;\n    }\n  }\n}\n```\n4/ Test performance\n```javascript\nfunction timeit(cb, type) {\n    console.log(`Started data ${type}`);\n    const start = performance.now();\n    for (let i = 0; i < repeats; i++) {\n        cb();\n    }\n    const end = performance.now();\n    console.log(\n        `Finished data locality test run in ${((end - start) / 1000).toFixed(\n            4\n        )} seconds`\n    );\n    return end - start;\n}\n\ntimeit(() => runGoodSpatialLocality(testArray), \"good\");\nsetTimeout(() => {\n    timeit(() => runPoorSpatialLocality(testArray), \"bad\");\n    setTimeout(() => {\n        timeit(() => runPoorSpatialLocality(trickyArray), \"tricky\");\n    }, 2000);\n}, 2000);\n```\n5/ Results\nThe second function call with bad locality is more than 2 times slower.\nThis is because it makes the CPU chasing its tail to jump between N (length of a row) stride of memory, during each access.\nBut why the third function call with bad locality and the tricky array is still fast? \n```javascript\nFinished good data locality test in 5.1799 seconds\nFinished bad data locality test in 13.9438 seconds\nFinished tricky data locality test in 5.4242 seconds\n```\nBecause our tricky array still access 1-[stride](https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/) of an array:\nAlthough we access the whole array by index 0, 1000, ... \nour tricky array just put elements with 1-stride of memory on index 0, 1000, 2000, ... like this:\n```javascript\n// trickArray:\n0:Boom {id: 0, x: 0}\n1:Boom {id: 1000, x: 0}\n1000:Boom {id: 1, x: 0}\n1001:Boom {id: 1001, x: 0}\n2000:Boom {id: 2, x: 0}\n...\n\n// testArray:\n0:Boom {id: 0, x: 0}\n1:Boom {id: 1, x: 0}\n1000:Boom {id: 1000, x: 0}\n2000:Boom {id: 1000, x: 0}\n...\n```\nNow we get the answer: Yes. \nEven though we run a COL loop first and a ROW loop later, \nas we still access a memory location and its neighbors in memory,\nwe can have good spatial locality.\n\n### References\n\n[1] [Computer Systems: A Programmer's Perspective](https://csapp.cs.cmu.edu)\n[2] [Memory in Javascript—Beyond Leaks](https://medium.com/walkme-engineering/memory-in-javascript-beyond-leaks-8c1d697c655c)\n[3] [Stride, Caches, CS61C lab12](https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/)\n","slug":"locality","published":1,"updated":"2023-02-09T03:15:05.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldwmqq0c00012epnhdsh6n5x","content":"<p>As stated in Computer Systems: A Programmer’s Perspective:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Well-written computer programs tend to exhibit good locality</p></blockquote>\n<h2 id=\"What-is-locality\"><a href=\"#What-is-locality\" class=\"headerlink\" title=\"What is locality\"></a>What is locality</h2><details><summary><b>If you haven't heard of locality, click here.</b></summary>\n<div>\n \n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Locality is often described as temporal locality and spatial locality.</p></blockquote>\n<h2 id=\"1-Spatial-locality\"><a href=\"#1-Spatial-locality\" class=\"headerlink\" title=\"1. Spatial locality\"></a>1. Spatial locality</h2><p>Good practice: reference a memory location and then its neighbors</p>\n<h3 id=\"Poor-spatial-locality\"><a href=\"#Poor-spatial-locality\" class=\"headerlink\" title=\"Poor spatial locality\"></a>Poor spatial locality</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int sumarraycols (int a[M][N]) &#123;\n  int i, j, sum &#x3D; 0;\n  for (j &#x3D; 0; j &lt; N; j++)\n    for (i &#x3D;0: i &lt; M; i++)\n      sum+ &#x3D; a[i][j]:\n  return sum;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>This code jumping through elements of different rows in the matrix.</p>\n<p>Assume you are going to buy groceries and books. With poor spatial locality, you  do this:</p>\n<ul>\n<li>buy tomatoes first, and go to a book store for a Math book.</li>\n<li>back to the grocery store for milk, and go to the book store again for a comic book.</li>\n</ul>\n<h3 id=\"Better-spatial-locality\"><a href=\"#Better-spatial-locality\" class=\"headerlink\" title=\"Better spatial locality\"></a>Better spatial locality</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int sumarraycols (int a[M][N]) &#123;\n  int i, j, sum &#x3D; 0;\n  for (i &#x3D; 0; i &lt; M; i++)\n    for (j &#x3D;0: j &lt; N; j++)\n      sum+ &#x3D; a[i][j]:\n  return sum;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>This code reads all the elements in a row and then the next row.</p>\n<p>Back to our grocery example, this time you buy everything from the grocery store first.<br>Later to buy all the books you need from the book store.</p>\n<h2 id=\"2-Temporal-locality\"><a href=\"#2-Temporal-locality\" class=\"headerlink\" title=\"2. Temporal locality\"></a>2. Temporal locality</h2><p>Good practice: reference a memory location multiple times</p>\n<h3 id=\"Good-temporal-locality\"><a href=\"#Good-temporal-locality\" class=\"headerlink\" title=\"Good temporal locality\"></a>Good temporal locality</h3><p>Our code above repeatedly reference the same variables (i, j) and enjoy good temporal locality.</p>\n</div>\n</details>\n\n<h2 id=\"Example-in-JavaScript\"><a href=\"#Example-in-JavaScript\" class=\"headerlink\" title=\"Example in JavaScript\"></a>Example in JavaScript</h2><p>Can we have good spatial locality if we loop cols before rows like this?</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">farAccess</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      data<span class=\"token punctuation\">[</span>j <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Let’s look at an <a href=\"https://codesandbox.io/s/cool-murdock-bnj02z?file=/src/index.js\">example</a> given by Yonatan Kra:</p>\n<p>1&#x2F; Create an array of 1,000,000 instances.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">COLS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">REPEATS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> testArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ROWS</span> <span class=\"token operator\">*</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boom</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// testArray:</span>\n<span class=\"token number\">0</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">2</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">3</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token number\">999999</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">999999</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2&#x2F; Create a tricky array.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> trickyArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ROWS</span> <span class=\"token operator\">*</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        trickyArray<span class=\"token punctuation\">[</span>row <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>col <span class=\"token operator\">*</span> <span class=\"token constant\">COLS</span> <span class=\"token operator\">+</span> row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3&#x2F; Write two functions with good&#x2F;bad spatial locality. </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">runGoodSpatialLocality</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">runPoorSpatialLocality</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4&#x2F; Test performance</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Started data </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>type<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> repeats<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Finished data locality test run in </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span>\n            <span class=\"token number\">4</span>\n        <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> seconds</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">runGoodSpatialLocality</span><span class=\"token punctuation\">(</span>testArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">runPoorSpatialLocality</span><span class=\"token punctuation\">(</span>testArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bad\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">runPoorSpatialLocality</span><span class=\"token punctuation\">(</span>trickyArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tricky\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>5&#x2F; Results<br>The second function call with bad locality is more than 2 times slower.<br>This is because it makes the CPU chasing its tail to jump between N (length of a row) stride of memory, during each access.<br>But why the third function call with bad locality and the tricky array is still fast? </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Finished good data locality test <span class=\"token keyword\">in</span> <span class=\"token number\">5.1799</span> seconds\nFinished bad data locality test <span class=\"token keyword\">in</span> <span class=\"token number\">13.9438</span> seconds\nFinished tricky data locality test <span class=\"token keyword\">in</span> <span class=\"token number\">5.4242</span> seconds<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>Because our tricky array still access 1-<a href=\"https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/\">stride</a> of an array:<br>Although we access the whole array by index 0, 1000, …<br>our tricky array just put elements with 1-stride of memory on index 0, 1000, 2000, … like this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// trickArray:</span>\n<span class=\"token number\">0</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1001</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">2000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">// testArray:</span>\n<span class=\"token number\">0</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">2000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Now we get the answer: Yes.<br>Even though we run a COL loop first and a ROW loop later,<br>as we still access a memory location and its neighbors in memory,<br>we can have good spatial locality.</p>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p>[1] <a href=\"https://csapp.cs.cmu.edu/\">Computer Systems: A Programmer’s Perspective</a><br>[2] <a href=\"https://medium.com/walkme-engineering/memory-in-javascript-beyond-leaks-8c1d697c655c\">Memory in Javascript—Beyond Leaks</a><br>[3] <a href=\"https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/\">Stride, Caches, CS61C lab12</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>As stated in Computer Systems: A Programmer’s Perspective:</p>\n<blockquote>\n<p>Well-written computer programs tend to exhibit good locality</p>\n</blockquote>\n<h2 id=\"What-is-locality\"><a href=\"#What-is-locality\" class=\"headerlink\" title=\"What is locality\"></a>What is locality</h2><details><summary><b>If you haven't heard of locality, click here.</b></summary>\n<div>\n \n<blockquote>\n<p>Locality is often described as temporal locality and spatial locality.</p>\n</blockquote>\n<h2 id=\"1-Spatial-locality\"><a href=\"#1-Spatial-locality\" class=\"headerlink\" title=\"1. Spatial locality\"></a>1. Spatial locality</h2><p>Good practice: reference a memory location and then its neighbors</p>\n<h3 id=\"Poor-spatial-locality\"><a href=\"#Poor-spatial-locality\" class=\"headerlink\" title=\"Poor spatial locality\"></a>Poor spatial locality</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int sumarraycols (int a[M][N]) &#123;\n  int i, j, sum &#x3D; 0;\n  for (j &#x3D; 0; j &lt; N; j++)\n    for (i &#x3D;0: i &lt; M; i++)\n      sum+ &#x3D; a[i][j]:\n  return sum;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>This code jumping through elements of different rows in the matrix.</p>\n<p>Assume you are going to buy groceries and books. With poor spatial locality, you  do this:</p>\n<ul>\n<li>buy tomatoes first, and go to a book store for a Math book.</li>\n<li>back to the grocery store for milk, and go to the book store again for a comic book.</li>\n</ul>\n<h3 id=\"Better-spatial-locality\"><a href=\"#Better-spatial-locality\" class=\"headerlink\" title=\"Better spatial locality\"></a>Better spatial locality</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int sumarraycols (int a[M][N]) &#123;\n  int i, j, sum &#x3D; 0;\n  for (i &#x3D; 0; i &lt; M; i++)\n    for (j &#x3D;0: j &lt; N; j++)\n      sum+ &#x3D; a[i][j]:\n  return sum;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>This code reads all the elements in a row and then the next row.</p>\n<p>Back to our grocery example, this time you buy everything from the grocery store first.<br>Later to buy all the books you need from the book store.</p>\n<h2 id=\"2-Temporal-locality\"><a href=\"#2-Temporal-locality\" class=\"headerlink\" title=\"2. Temporal locality\"></a>2. Temporal locality</h2><p>Good practice: reference a memory location multiple times</p>\n<h3 id=\"Good-temporal-locality\"><a href=\"#Good-temporal-locality\" class=\"headerlink\" title=\"Good temporal locality\"></a>Good temporal locality</h3><p>Our code above repeatedly reference the same variables (i, j) and enjoy good temporal locality.</p>\n</div>\n</details>\n\n<h2 id=\"Example-in-JavaScript\"><a href=\"#Example-in-JavaScript\" class=\"headerlink\" title=\"Example in JavaScript\"></a>Example in JavaScript</h2><p>Can we have good spatial locality if we loop cols before rows like this?</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">farAccess</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      data<span class=\"token punctuation\">[</span>j <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Let’s look at an <a href=\"https://codesandbox.io/s/cool-murdock-bnj02z?file=/src/index.js\">example</a> given by Yonatan Kra:</p>\n<p>1&#x2F; Create an array of 1,000,000 instances.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">COLS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">REPEATS</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> testArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ROWS</span> <span class=\"token operator\">*</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boom</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// testArray:</span>\n<span class=\"token number\">0</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">2</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">3</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token number\">999999</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">999999</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2&#x2F; Create a tricky array.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> trickyArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ROWS</span> <span class=\"token operator\">*</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        trickyArray<span class=\"token punctuation\">[</span>row <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>col <span class=\"token operator\">*</span> <span class=\"token constant\">COLS</span> <span class=\"token operator\">+</span> row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3&#x2F; Write two functions with good&#x2F;bad spatial locality. </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">runGoodSpatialLocality</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">runPoorSpatialLocality</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">COLS</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ROWS</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">*</span> <span class=\"token constant\">ROWS</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4&#x2F; Test performance</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Started data </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>type<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> repeats<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Finished data locality test run in </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span>\n            <span class=\"token number\">4</span>\n        <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> seconds</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">runGoodSpatialLocality</span><span class=\"token punctuation\">(</span>testArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">runPoorSpatialLocality</span><span class=\"token punctuation\">(</span>testArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bad\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">timeit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">runPoorSpatialLocality</span><span class=\"token punctuation\">(</span>trickyArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tricky\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>5&#x2F; Results<br>The second function call with bad locality is more than 2 times slower.<br>This is because it makes the CPU chasing its tail to jump between N (length of a row) stride of memory, during each access.<br>But why the third function call with bad locality and the tricky array is still fast? </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Finished good data locality test <span class=\"token keyword\">in</span> <span class=\"token number\">5.1799</span> seconds\nFinished bad data locality test <span class=\"token keyword\">in</span> <span class=\"token number\">13.9438</span> seconds\nFinished tricky data locality test <span class=\"token keyword\">in</span> <span class=\"token number\">5.4242</span> seconds<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>Because our tricky array still access 1-<a href=\"https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/\">stride</a> of an array:<br>Although we access the whole array by index 0, 1000, …<br>our tricky array just put elements with 1-stride of memory on index 0, 1000, 2000, … like this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// trickArray:</span>\n<span class=\"token number\">0</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1001</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">2000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">// testArray:</span>\n<span class=\"token number\">0</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">1000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token number\">2000</span><span class=\"token operator\">:</span>Boom <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Now we get the answer: Yes.<br>Even though we run a COL loop first and a ROW loop later,<br>as we still access a memory location and its neighbors in memory,<br>we can have good spatial locality.</p>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p>[1] <a href=\"https://csapp.cs.cmu.edu/\">Computer Systems: A Programmer’s Perspective</a><br>[2] <a href=\"https://medium.com/walkme-engineering/memory-in-javascript-beyond-leaks-8c1d697c655c\">Memory in Javascript—Beyond Leaks</a><br>[3] <a href=\"https://inst.eecs.berkeley.edu/~cs61c/sp08/labs/12/\">Stride, Caches, CS61C lab12</a></p>\n"},{"title":"React little by little 2 - Fiber Tree","date":"2022-11-23T04:40:35.000Z","_content":"> Plato said life is like being chained up in a cave, forced to watch shadows flitting across a stone wall.\n\nWe are not talking about philosophy today, but use [Allegory of the Cave](https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler) to describe the relationship between React applications and what is under the hood:\n\nReact applications we see today are mainly results of the render phase and the commit phase.\nJust like shadows in the eyes of prisoners are results of sun reflection and real world activities.\n\n![allegory_cave_dark](https://user-images.githubusercontent.com/51183663/209894263-18de7386-087f-4a0d-8418-dba2744d016d.png)\n\n### What is under the hood\nBefore we see any changes in an application, React does three things: Scheduling, Rendering and commit. What are these? In plain English, they are just:\n- Scheduling 🗓️: schedule and manage tasks \n- Render 🔎 🌲 🏁: figure out changes made in React applications\n- Commit ☑️ : apply these changes to browser DOM\n\nTo understand React, we will start from the render phase. To understand the render phase, we need to understand the React Fiber data structure.\n\nIn this post, I will cover 2 topics about React Fiber:\n- How does React create the first Fiber node?\n  - What are the main properties of a Fiber node?\n- How does React build a Fiber Tree from the first Fiber node during mounting?\n\n## Inside React Reconciliation: Fiber Trees\nFrequent DOM manipulations are expensive for complicated web applications.\nIn this case, we had better only applies changes to the real DOM during state/props updates. \nBut changes might spread all over the whole tree, to locate them, we can compare two versions (previous & current) of a virtual DOM tree. This process is called Reconciliation in React.\n\n### Question: What is a virtual DOM tree called in React 18?\nFiber tree, a singly linked list tree.\nTo understand Fiber tree, we can start from the most basic unit of it, a Fiber node.\n\n## How does React generate the first Fiber node\nA Fiber node is just a plain JavaScript object.\nBut it may be the object you have never seen before, since it is not exposed to React users.\nLet us start from something we are familiar with—React Components.\n\n### React Components, Elements, Fiber Node\nThe process of building a Fiber node is the process of converting React Component JSX => a React Element => a Fiber node. \n<details><summary><b> JSX </b></summary>\n<p>\n\n> A syntax extension to JavaScript that allows writing HTML in React components\n\n</p>\n</details>\n\n<details><summary><b> React Element </b></summary>\n<p>\n\n> The smallest building blocks of React apps, describing what to render to a React UI environment\n\n</p>\n</details>\n\n<details><summary><b> Fiber node </b></summary>\n<p>\n\n> A basic unit of work to locate or commit changes in React applications\n\n</p>\n</details>\n\n### From React Component to React Element\nWe know that React components return JSX. But what does JSX produces?\n```javascript\nconst App = () => {\n    return (\n        <div>\n            react\n            <span>\n                little by little\n            </span>\n        </div>\n    )\n}\nReactDOM.createRoot(rootElement).render(<App />);\n```\nJSX produces React elements.\nFor example, App is a React component; <App / > is a React element in the form of JSX.\nIf you put <App / > into [Babel](https://babeljs.io/repl), you will get:\n```javascript\n/*#__PURE__*/React.createElement(App, null);\n```\nIt is just a JavaScript object:\n```javascript\nconsole.log(React.createElement(App, null));\n\n/*\n{\ntype: ƒ App(), // e.g. functional component, or HTML tag type like div, p, h1\nkey: null, // e.g. keys you set up in a React component\nref: null,\nprops: {}, // e.g. React component props\n_store: {},\n_owner: null,\n}\n*/\n```\nTake a closer look at this React Element object, and answer this question:\n\n<details><summary><b>Can a React Element be the unit of work to do the Reconciliation job? </b></summary>\n<p>\n\nNo. For Reconciliation, a React element can be too static and isolated:\n- Data stored in it is comparatively static. It mainly explains what this React element looks like.\n> For reconciliation, we need more dynamic data about its state/effect changes or priority scheduling.\n- It does not show connections with its children/sibling/parent Elements.\n> When we have finished processing it, we have no way to find the next unit of work.\n\nFor reconciliation, we need an upgraded version of React Element. That is where Fiber node comes in.\n\n</p>\n</details>\n\n### From React Element to Fiber node\nWe can create a Fiber root node for the React element <App / >, by calling:\n```javascript\nconst rootElement = document.getElementById(\"root\");\nReactDOM.createRoot(rootElement).render(<App />);\n```\n\nTo see what is inside a Fiber node (React 18.2.0), you can try this:\n\n```javascript\nconst reactContainerKey = Object.keys(rootElement)[0]; // __reactContainer$cjvrzgbs4i4 \nconsole.log(rootElement[reactContainerKey]) // Fiber root node\n```\n\n![fiber_node_log](https://user-images.githubusercontent.com/51183663/210151836-ae932fd9-cfbe-424d-85db-f3c9882cd11c.png)\nTo make it easier to understand, I break down properties of a Fiber node object into 4 parts:\n- Basic Fiber node info\n- Tree pointers\n- Effect & reconciliation\n- Scheduling\n\nHere is a cheatsheet for a React Fiber node:\n\n![fiber_node](https://user-images.githubusercontent.com/51183663/212479942-a25a466e-a095-4409-9f9e-70c20139f918.png)\n\nAt this moment, just take a glimpse at this Fiber node.\nKnowing it also tells something about Reconciliation, Scheduling and its neighbor nodes is enough at this moment. \n## How does React build a Fiber tree from the Fiber root node?\nNow we have created a Fiber root node.\nBefore mount (first time rendering), React does three things:\n1) Create a Fiber root node for the whole App.\n2) Create a Host Fiber node for the rootElement DOM element.\n3) Link the Fiber root node with the host Fiber node, using the \"current\" pointer.\n\n![beforeMount](https://user-images.githubusercontent.com/51183663/211693577-4f9e384d-ff4e-414a-8d04-8792cc986bdc.png)\n\nDuring mounting, React will also create an alternative host Fiber node. \nThis is different from our existing one, as its child node is not null but a tree of Fiber nodes, which correspond to each React element listed in the app.\n\n![mounting](https://user-images.githubusercontent.com/51183663/211698358-9ab6c474-e979-4333-a59e-892d7453577d.png)\nThe alternative host Fiber node, along with its descendant Fiber nodes, is called the workInProgress (WIP) Fiber tree.\n\n<details><summary><b>Look at the above pic, you may wonder: Why two host root nodes? What is double buffering? </b></summary>\n<p>\n\nHere is an illustration from [game programming patterns](http://gameprogrammingpatterns.com/):\n> Imagine we are watching a play. \n> When scene 1 is finished, we will have a 5-minute scene transition, leaving the audience in dark and silence. This is normal in a real world theatre play. \n> But if we leave game players in a black screen for a few seconds, this may drive people nuts.\n\nIn both game programming and React, we hope to avoid this blank transition by a technique called [Double Buffering](http://gameprogrammingpatterns.com/double-buffer.html). \nBack to our theatre play example, we avoid the silent transition by running two stages (double buffering): \n- stage A is on show for the current scene \n- stage B is adjusting lights or removing/changing play props for the next scene\n\nOnce the current scene is finished on stage A, we immediately light on stage B to go to the next scene seamlessly. Now stage A is in dark preparing the next scene settings. \n\nSo in React, double buffering means switching between the current fiber tree and a workInProgress fiber tree for seamless transitions between rendering.\n\n---\n</p>\n</details>\n\nWe therefore have finished a simple tour about first time rendering in React.\n\n## References\n[1] [Double Buffering](http://gameprogrammingpatterns.com/double-buffer.html)\n[2] [Allegory of the Cave](https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler)\n","source":"_posts/react-fiber-tree.md","raw":"---\ntitle: React little by little 2 - Fiber Tree\ndate: 2022-11-22 23:40:35\ntags: React\n---\n> Plato said life is like being chained up in a cave, forced to watch shadows flitting across a stone wall.\n\nWe are not talking about philosophy today, but use [Allegory of the Cave](https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler) to describe the relationship between React applications and what is under the hood:\n\nReact applications we see today are mainly results of the render phase and the commit phase.\nJust like shadows in the eyes of prisoners are results of sun reflection and real world activities.\n\n![allegory_cave_dark](https://user-images.githubusercontent.com/51183663/209894263-18de7386-087f-4a0d-8418-dba2744d016d.png)\n\n### What is under the hood\nBefore we see any changes in an application, React does three things: Scheduling, Rendering and commit. What are these? In plain English, they are just:\n- Scheduling 🗓️: schedule and manage tasks \n- Render 🔎 🌲 🏁: figure out changes made in React applications\n- Commit ☑️ : apply these changes to browser DOM\n\nTo understand React, we will start from the render phase. To understand the render phase, we need to understand the React Fiber data structure.\n\nIn this post, I will cover 2 topics about React Fiber:\n- How does React create the first Fiber node?\n  - What are the main properties of a Fiber node?\n- How does React build a Fiber Tree from the first Fiber node during mounting?\n\n## Inside React Reconciliation: Fiber Trees\nFrequent DOM manipulations are expensive for complicated web applications.\nIn this case, we had better only applies changes to the real DOM during state/props updates. \nBut changes might spread all over the whole tree, to locate them, we can compare two versions (previous & current) of a virtual DOM tree. This process is called Reconciliation in React.\n\n### Question: What is a virtual DOM tree called in React 18?\nFiber tree, a singly linked list tree.\nTo understand Fiber tree, we can start from the most basic unit of it, a Fiber node.\n\n## How does React generate the first Fiber node\nA Fiber node is just a plain JavaScript object.\nBut it may be the object you have never seen before, since it is not exposed to React users.\nLet us start from something we are familiar with—React Components.\n\n### React Components, Elements, Fiber Node\nThe process of building a Fiber node is the process of converting React Component JSX => a React Element => a Fiber node. \n<details><summary><b> JSX </b></summary>\n<p>\n\n> A syntax extension to JavaScript that allows writing HTML in React components\n\n</p>\n</details>\n\n<details><summary><b> React Element </b></summary>\n<p>\n\n> The smallest building blocks of React apps, describing what to render to a React UI environment\n\n</p>\n</details>\n\n<details><summary><b> Fiber node </b></summary>\n<p>\n\n> A basic unit of work to locate or commit changes in React applications\n\n</p>\n</details>\n\n### From React Component to React Element\nWe know that React components return JSX. But what does JSX produces?\n```javascript\nconst App = () => {\n    return (\n        <div>\n            react\n            <span>\n                little by little\n            </span>\n        </div>\n    )\n}\nReactDOM.createRoot(rootElement).render(<App />);\n```\nJSX produces React elements.\nFor example, App is a React component; <App / > is a React element in the form of JSX.\nIf you put <App / > into [Babel](https://babeljs.io/repl), you will get:\n```javascript\n/*#__PURE__*/React.createElement(App, null);\n```\nIt is just a JavaScript object:\n```javascript\nconsole.log(React.createElement(App, null));\n\n/*\n{\ntype: ƒ App(), // e.g. functional component, or HTML tag type like div, p, h1\nkey: null, // e.g. keys you set up in a React component\nref: null,\nprops: {}, // e.g. React component props\n_store: {},\n_owner: null,\n}\n*/\n```\nTake a closer look at this React Element object, and answer this question:\n\n<details><summary><b>Can a React Element be the unit of work to do the Reconciliation job? </b></summary>\n<p>\n\nNo. For Reconciliation, a React element can be too static and isolated:\n- Data stored in it is comparatively static. It mainly explains what this React element looks like.\n> For reconciliation, we need more dynamic data about its state/effect changes or priority scheduling.\n- It does not show connections with its children/sibling/parent Elements.\n> When we have finished processing it, we have no way to find the next unit of work.\n\nFor reconciliation, we need an upgraded version of React Element. That is where Fiber node comes in.\n\n</p>\n</details>\n\n### From React Element to Fiber node\nWe can create a Fiber root node for the React element <App / >, by calling:\n```javascript\nconst rootElement = document.getElementById(\"root\");\nReactDOM.createRoot(rootElement).render(<App />);\n```\n\nTo see what is inside a Fiber node (React 18.2.0), you can try this:\n\n```javascript\nconst reactContainerKey = Object.keys(rootElement)[0]; // __reactContainer$cjvrzgbs4i4 \nconsole.log(rootElement[reactContainerKey]) // Fiber root node\n```\n\n![fiber_node_log](https://user-images.githubusercontent.com/51183663/210151836-ae932fd9-cfbe-424d-85db-f3c9882cd11c.png)\nTo make it easier to understand, I break down properties of a Fiber node object into 4 parts:\n- Basic Fiber node info\n- Tree pointers\n- Effect & reconciliation\n- Scheduling\n\nHere is a cheatsheet for a React Fiber node:\n\n![fiber_node](https://user-images.githubusercontent.com/51183663/212479942-a25a466e-a095-4409-9f9e-70c20139f918.png)\n\nAt this moment, just take a glimpse at this Fiber node.\nKnowing it also tells something about Reconciliation, Scheduling and its neighbor nodes is enough at this moment. \n## How does React build a Fiber tree from the Fiber root node?\nNow we have created a Fiber root node.\nBefore mount (first time rendering), React does three things:\n1) Create a Fiber root node for the whole App.\n2) Create a Host Fiber node for the rootElement DOM element.\n3) Link the Fiber root node with the host Fiber node, using the \"current\" pointer.\n\n![beforeMount](https://user-images.githubusercontent.com/51183663/211693577-4f9e384d-ff4e-414a-8d04-8792cc986bdc.png)\n\nDuring mounting, React will also create an alternative host Fiber node. \nThis is different from our existing one, as its child node is not null but a tree of Fiber nodes, which correspond to each React element listed in the app.\n\n![mounting](https://user-images.githubusercontent.com/51183663/211698358-9ab6c474-e979-4333-a59e-892d7453577d.png)\nThe alternative host Fiber node, along with its descendant Fiber nodes, is called the workInProgress (WIP) Fiber tree.\n\n<details><summary><b>Look at the above pic, you may wonder: Why two host root nodes? What is double buffering? </b></summary>\n<p>\n\nHere is an illustration from [game programming patterns](http://gameprogrammingpatterns.com/):\n> Imagine we are watching a play. \n> When scene 1 is finished, we will have a 5-minute scene transition, leaving the audience in dark and silence. This is normal in a real world theatre play. \n> But if we leave game players in a black screen for a few seconds, this may drive people nuts.\n\nIn both game programming and React, we hope to avoid this blank transition by a technique called [Double Buffering](http://gameprogrammingpatterns.com/double-buffer.html). \nBack to our theatre play example, we avoid the silent transition by running two stages (double buffering): \n- stage A is on show for the current scene \n- stage B is adjusting lights or removing/changing play props for the next scene\n\nOnce the current scene is finished on stage A, we immediately light on stage B to go to the next scene seamlessly. Now stage A is in dark preparing the next scene settings. \n\nSo in React, double buffering means switching between the current fiber tree and a workInProgress fiber tree for seamless transitions between rendering.\n\n---\n</p>\n</details>\n\nWe therefore have finished a simple tour about first time rendering in React.\n\n## References\n[1] [Double Buffering](http://gameprogrammingpatterns.com/double-buffer.html)\n[2] [Allegory of the Cave](https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler)\n","slug":"react-fiber-tree","published":1,"updated":"2023-02-09T03:15:05.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldwmqq0f00032epne7a5e0ys","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Plato said life is like being chained up in a cave, forced to watch shadows flitting across a stone wall.</p></blockquote>\n<p>We are not talking about philosophy today, but use <a href=\"https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler\">Allegory of the Cave</a> to describe the relationship between React applications and what is under the hood:</p>\n<p>React applications we see today are mainly results of the render phase and the commit phase.<br>Just like shadows in the eyes of prisoners are results of sun reflection and real world activities.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/209894263-18de7386-087f-4a0d-8418-dba2744d016d.png\" alt=\"allegory_cave_dark\"></p>\n<h3 id=\"What-is-under-the-hood\"><a href=\"#What-is-under-the-hood\" class=\"headerlink\" title=\"What is under the hood\"></a>What is under the hood</h3><p>Before we see any changes in an application, React does three things: Scheduling, Rendering and commit. What are these? In plain English, they are just:</p>\n<ul>\n<li>Scheduling 🗓️: schedule and manage tasks </li>\n<li>Render 🔎 🌲 🏁: figure out changes made in React applications</li>\n<li>Commit ☑️ : apply these changes to browser DOM</li>\n</ul>\n<p>To understand React, we will start from the render phase. To understand the render phase, we need to understand the React Fiber data structure.</p>\n<p>In this post, I will cover 2 topics about React Fiber:</p>\n<ul>\n<li>How does React create the first Fiber node?<ul>\n<li>What are the main properties of a Fiber node?</li>\n</ul>\n</li>\n<li>How does React build a Fiber Tree from the first Fiber node during mounting?</li>\n</ul>\n<h2 id=\"Inside-React-Reconciliation-Fiber-Trees\"><a href=\"#Inside-React-Reconciliation-Fiber-Trees\" class=\"headerlink\" title=\"Inside React Reconciliation: Fiber Trees\"></a>Inside React Reconciliation: Fiber Trees</h2><p>Frequent DOM manipulations are expensive for complicated web applications.<br>In this case, we had better only applies changes to the real DOM during state&#x2F;props updates.<br>But changes might spread all over the whole tree, to locate them, we can compare two versions (previous &amp; current) of a virtual DOM tree. This process is called Reconciliation in React.</p>\n<h3 id=\"Question-What-is-a-virtual-DOM-tree-called-in-React-18\"><a href=\"#Question-What-is-a-virtual-DOM-tree-called-in-React-18\" class=\"headerlink\" title=\"Question: What is a virtual DOM tree called in React 18?\"></a>Question: What is a virtual DOM tree called in React 18?</h3><p>Fiber tree, a singly linked list tree.<br>To understand Fiber tree, we can start from the most basic unit of it, a Fiber node.</p>\n<h2 id=\"How-does-React-generate-the-first-Fiber-node\"><a href=\"#How-does-React-generate-the-first-Fiber-node\" class=\"headerlink\" title=\"How does React generate the first Fiber node\"></a>How does React generate the first Fiber node</h2><p>A Fiber node is just a plain JavaScript object.<br>But it may be the object you have never seen before, since it is not exposed to React users.<br>Let us start from something we are familiar with—React Components.</p>\n<h3 id=\"React-Components-Elements-Fiber-Node\"><a href=\"#React-Components-Elements-Fiber-Node\" class=\"headerlink\" title=\"React Components, Elements, Fiber Node\"></a>React Components, Elements, Fiber Node</h3><p>The process of building a Fiber node is the process of converting React Component JSX &#x3D;&gt; a React Element &#x3D;&gt; a Fiber node. </p>\n<details><summary><b> JSX </b></summary>\n<p>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>A syntax extension to JavaScript that allows writing HTML in React components</p></blockquote>\n</p>\n</details>\n\n<details><summary><b> React Element </b></summary>\n<p>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>The smallest building blocks of React apps, describing what to render to a React UI environment</p></blockquote>\n</p>\n</details>\n\n<details><summary><b> Fiber node </b></summary>\n<p>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>A basic unit of work to locate or commit changes in React applications</p></blockquote>\n</p>\n</details>\n\n<h3 id=\"From-React-Component-to-React-Element\"><a href=\"#From-React-Component-to-React-Element\" class=\"headerlink\" title=\"From React Component to React Element\"></a>From React Component to React Element</h3><p>We know that React components return JSX. But what does JSX produces?</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            react\n            <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>\n                little by little\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>JSX produces React elements.<br>For example, App is a React component; &lt;App &#x2F; &gt; is a React element in the form of JSX.<br>If you put &lt;App &#x2F; &gt; into <a href=\"https://babeljs.io/repl\">Babel</a>, you will get:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*#__PURE__*/</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>It is just a JavaScript object:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n&#123;\ntype: ƒ App(), // e.g. functional component, or HTML tag type like div, p, h1\nkey: null, // e.g. keys you set up in a React component\nref: null,\nprops: &#123;&#125;, // e.g. React component props\n_store: &#123;&#125;,\n_owner: null,\n&#125;\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Take a closer look at this React Element object, and answer this question:</p>\n<details><summary><b>Can a React Element be the unit of work to do the Reconciliation job? </b></summary>\n<p>\n\n<p>No. For Reconciliation, a React element can be too static and isolated:</p>\n<ul>\n<li>Data stored in it is comparatively static. It mainly explains what this React element looks like.<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>For reconciliation, we need more dynamic data about its state&#x2F;effect changes or priority scheduling.</p></blockquote>\n</li>\n<li>It does not show connections with its children&#x2F;sibling&#x2F;parent Elements.<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>When we have finished processing it, we have no way to find the next unit of work.</p></blockquote>\n</li>\n</ul>\n<p>For reconciliation, we need an upgraded version of React Element. That is where Fiber node comes in.</p>\n</p>\n</details>\n\n<h3 id=\"From-React-Element-to-Fiber-node\"><a href=\"#From-React-Element-to-Fiber-node\" class=\"headerlink\" title=\"From React Element to Fiber node\"></a>From React Element to Fiber node</h3><p>We can create a Fiber root node for the React element &lt;App &#x2F; &gt;, by calling:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>To see what is inside a Fiber node (React 18.2.0), you can try this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> reactContainerKey <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// __reactContainer$cjvrzgbs4i4 </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">[</span>reactContainerKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fiber root node</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://user-images.githubusercontent.com/51183663/210151836-ae932fd9-cfbe-424d-85db-f3c9882cd11c.png\" alt=\"fiber_node_log\"><br>To make it easier to understand, I break down properties of a Fiber node object into 4 parts:</p>\n<ul>\n<li>Basic Fiber node info</li>\n<li>Tree pointers</li>\n<li>Effect &amp; reconciliation</li>\n<li>Scheduling</li>\n</ul>\n<p>Here is a cheatsheet for a React Fiber node:</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/212479942-a25a466e-a095-4409-9f9e-70c20139f918.png\" alt=\"fiber_node\"></p>\n<p>At this moment, just take a glimpse at this Fiber node.<br>Knowing it also tells something about Reconciliation, Scheduling and its neighbor nodes is enough at this moment. </p>\n<h2 id=\"How-does-React-build-a-Fiber-tree-from-the-Fiber-root-node\"><a href=\"#How-does-React-build-a-Fiber-tree-from-the-Fiber-root-node\" class=\"headerlink\" title=\"How does React build a Fiber tree from the Fiber root node?\"></a>How does React build a Fiber tree from the Fiber root node?</h2><p>Now we have created a Fiber root node.<br>Before mount (first time rendering), React does three things:</p>\n<ol>\n<li>Create a Fiber root node for the whole App.</li>\n<li>Create a Host Fiber node for the rootElement DOM element.</li>\n<li>Link the Fiber root node with the host Fiber node, using the “current” pointer.</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/211693577-4f9e384d-ff4e-414a-8d04-8792cc986bdc.png\" alt=\"beforeMount\"></p>\n<p>During mounting, React will also create an alternative host Fiber node.<br>This is different from our existing one, as its child node is not null but a tree of Fiber nodes, which correspond to each React element listed in the app.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/211698358-9ab6c474-e979-4333-a59e-892d7453577d.png\" alt=\"mounting\"><br>The alternative host Fiber node, along with its descendant Fiber nodes, is called the workInProgress (WIP) Fiber tree.</p>\n<details><summary><b>Look at the above pic, you may wonder: Why two host root nodes? What is double buffering? </b></summary>\n<p>\n\n<p>Here is an illustration from <a href=\"http://gameprogrammingpatterns.com/\">game programming patterns</a>:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Imagine we are watching a play.<br>When scene 1 is finished, we will have a 5-minute scene transition, leaving the audience in dark and silence. This is normal in a real world theatre play.<br>But if we leave game players in a black screen for a few seconds, this may drive people nuts.</p></blockquote>\n<p>In both game programming and React, we hope to avoid this blank transition by a technique called <a href=\"http://gameprogrammingpatterns.com/double-buffer.html\">Double Buffering</a>.<br>Back to our theatre play example, we avoid the silent transition by running two stages (double buffering): </p>\n<ul>\n<li>stage A is on show for the current scene </li>\n<li>stage B is adjusting lights or removing&#x2F;changing play props for the next scene</li>\n</ul>\n<p>Once the current scene is finished on stage A, we immediately light on stage B to go to the next scene seamlessly. Now stage A is in dark preparing the next scene settings. </p>\n<p>So in React, double buffering means switching between the current fiber tree and a workInProgress fiber tree for seamless transitions between rendering.</p>\n<hr>\n</p>\n</details>\n\n<p>We therefore have finished a simple tour about first time rendering in React.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[1] <a href=\"http://gameprogrammingpatterns.com/double-buffer.html\">Double Buffering</a><br>[2] <a href=\"https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler\">Allegory of the Cave</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Plato said life is like being chained up in a cave, forced to watch shadows flitting across a stone wall.</p>\n</blockquote>\n<p>We are not talking about philosophy today, but use <a href=\"https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler\">Allegory of the Cave</a> to describe the relationship between React applications and what is under the hood:</p>\n<p>React applications we see today are mainly results of the render phase and the commit phase.<br>Just like shadows in the eyes of prisoners are results of sun reflection and real world activities.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/209894263-18de7386-087f-4a0d-8418-dba2744d016d.png\" alt=\"allegory_cave_dark\"></p>\n<h3 id=\"What-is-under-the-hood\"><a href=\"#What-is-under-the-hood\" class=\"headerlink\" title=\"What is under the hood\"></a>What is under the hood</h3><p>Before we see any changes in an application, React does three things: Scheduling, Rendering and commit. What are these? In plain English, they are just:</p>\n<ul>\n<li>Scheduling 🗓️: schedule and manage tasks </li>\n<li>Render 🔎 🌲 🏁: figure out changes made in React applications</li>\n<li>Commit ☑️ : apply these changes to browser DOM</li>\n</ul>\n<p>To understand React, we will start from the render phase. To understand the render phase, we need to understand the React Fiber data structure.</p>\n<p>In this post, I will cover 2 topics about React Fiber:</p>\n<ul>\n<li>How does React create the first Fiber node?<ul>\n<li>What are the main properties of a Fiber node?</li>\n</ul>\n</li>\n<li>How does React build a Fiber Tree from the first Fiber node during mounting?</li>\n</ul>\n<h2 id=\"Inside-React-Reconciliation-Fiber-Trees\"><a href=\"#Inside-React-Reconciliation-Fiber-Trees\" class=\"headerlink\" title=\"Inside React Reconciliation: Fiber Trees\"></a>Inside React Reconciliation: Fiber Trees</h2><p>Frequent DOM manipulations are expensive for complicated web applications.<br>In this case, we had better only applies changes to the real DOM during state&#x2F;props updates.<br>But changes might spread all over the whole tree, to locate them, we can compare two versions (previous &amp; current) of a virtual DOM tree. This process is called Reconciliation in React.</p>\n<h3 id=\"Question-What-is-a-virtual-DOM-tree-called-in-React-18\"><a href=\"#Question-What-is-a-virtual-DOM-tree-called-in-React-18\" class=\"headerlink\" title=\"Question: What is a virtual DOM tree called in React 18?\"></a>Question: What is a virtual DOM tree called in React 18?</h3><p>Fiber tree, a singly linked list tree.<br>To understand Fiber tree, we can start from the most basic unit of it, a Fiber node.</p>\n<h2 id=\"How-does-React-generate-the-first-Fiber-node\"><a href=\"#How-does-React-generate-the-first-Fiber-node\" class=\"headerlink\" title=\"How does React generate the first Fiber node\"></a>How does React generate the first Fiber node</h2><p>A Fiber node is just a plain JavaScript object.<br>But it may be the object you have never seen before, since it is not exposed to React users.<br>Let us start from something we are familiar with—React Components.</p>\n<h3 id=\"React-Components-Elements-Fiber-Node\"><a href=\"#React-Components-Elements-Fiber-Node\" class=\"headerlink\" title=\"React Components, Elements, Fiber Node\"></a>React Components, Elements, Fiber Node</h3><p>The process of building a Fiber node is the process of converting React Component JSX &#x3D;&gt; a React Element &#x3D;&gt; a Fiber node. </p>\n<details><summary><b> JSX </b></summary>\n<p>\n\n<blockquote>\n<p>A syntax extension to JavaScript that allows writing HTML in React components</p>\n</blockquote>\n</p>\n</details>\n\n<details><summary><b> React Element </b></summary>\n<p>\n\n<blockquote>\n<p>The smallest building blocks of React apps, describing what to render to a React UI environment</p>\n</blockquote>\n</p>\n</details>\n\n<details><summary><b> Fiber node </b></summary>\n<p>\n\n<blockquote>\n<p>A basic unit of work to locate or commit changes in React applications</p>\n</blockquote>\n</p>\n</details>\n\n<h3 id=\"From-React-Component-to-React-Element\"><a href=\"#From-React-Component-to-React-Element\" class=\"headerlink\" title=\"From React Component to React Element\"></a>From React Component to React Element</h3><p>We know that React components return JSX. But what does JSX produces?</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            react\n            <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>\n                little by little\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>JSX produces React elements.<br>For example, App is a React component; &lt;App &#x2F; &gt; is a React element in the form of JSX.<br>If you put &lt;App &#x2F; &gt; into <a href=\"https://babeljs.io/repl\">Babel</a>, you will get:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*#__PURE__*/</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>It is just a JavaScript object:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n&#123;\ntype: ƒ App(), // e.g. functional component, or HTML tag type like div, p, h1\nkey: null, // e.g. keys you set up in a React component\nref: null,\nprops: &#123;&#125;, // e.g. React component props\n_store: &#123;&#125;,\n_owner: null,\n&#125;\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Take a closer look at this React Element object, and answer this question:</p>\n<details><summary><b>Can a React Element be the unit of work to do the Reconciliation job? </b></summary>\n<p>\n\n<p>No. For Reconciliation, a React element can be too static and isolated:</p>\n<ul>\n<li>Data stored in it is comparatively static. It mainly explains what this React element looks like.<blockquote>\n<p>For reconciliation, we need more dynamic data about its state&#x2F;effect changes or priority scheduling.</p>\n</blockquote>\n</li>\n<li>It does not show connections with its children&#x2F;sibling&#x2F;parent Elements.<blockquote>\n<p>When we have finished processing it, we have no way to find the next unit of work.</p>\n</blockquote>\n</li>\n</ul>\n<p>For reconciliation, we need an upgraded version of React Element. That is where Fiber node comes in.</p>\n</p>\n</details>\n\n<h3 id=\"From-React-Element-to-Fiber-node\"><a href=\"#From-React-Element-to-Fiber-node\" class=\"headerlink\" title=\"From React Element to Fiber node\"></a>From React Element to Fiber node</h3><p>We can create a Fiber root node for the React element &lt;App &#x2F; &gt;, by calling:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>To see what is inside a Fiber node (React 18.2.0), you can try this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> reactContainerKey <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// __reactContainer$cjvrzgbs4i4 </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">[</span>reactContainerKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Fiber root node</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://user-images.githubusercontent.com/51183663/210151836-ae932fd9-cfbe-424d-85db-f3c9882cd11c.png\" alt=\"fiber_node_log\"><br>To make it easier to understand, I break down properties of a Fiber node object into 4 parts:</p>\n<ul>\n<li>Basic Fiber node info</li>\n<li>Tree pointers</li>\n<li>Effect &amp; reconciliation</li>\n<li>Scheduling</li>\n</ul>\n<p>Here is a cheatsheet for a React Fiber node:</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/212479942-a25a466e-a095-4409-9f9e-70c20139f918.png\" alt=\"fiber_node\"></p>\n<p>At this moment, just take a glimpse at this Fiber node.<br>Knowing it also tells something about Reconciliation, Scheduling and its neighbor nodes is enough at this moment. </p>\n<h2 id=\"How-does-React-build-a-Fiber-tree-from-the-Fiber-root-node\"><a href=\"#How-does-React-build-a-Fiber-tree-from-the-Fiber-root-node\" class=\"headerlink\" title=\"How does React build a Fiber tree from the Fiber root node?\"></a>How does React build a Fiber tree from the Fiber root node?</h2><p>Now we have created a Fiber root node.<br>Before mount (first time rendering), React does three things:</p>\n<ol>\n<li>Create a Fiber root node for the whole App.</li>\n<li>Create a Host Fiber node for the rootElement DOM element.</li>\n<li>Link the Fiber root node with the host Fiber node, using the “current” pointer.</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/211693577-4f9e384d-ff4e-414a-8d04-8792cc986bdc.png\" alt=\"beforeMount\"></p>\n<p>During mounting, React will also create an alternative host Fiber node.<br>This is different from our existing one, as its child node is not null but a tree of Fiber nodes, which correspond to each React element listed in the app.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/211698358-9ab6c474-e979-4333-a59e-892d7453577d.png\" alt=\"mounting\"><br>The alternative host Fiber node, along with its descendant Fiber nodes, is called the workInProgress (WIP) Fiber tree.</p>\n<details><summary><b>Look at the above pic, you may wonder: Why two host root nodes? What is double buffering? </b></summary>\n<p>\n\n<p>Here is an illustration from <a href=\"http://gameprogrammingpatterns.com/\">game programming patterns</a>:</p>\n<blockquote>\n<p>Imagine we are watching a play.<br>When scene 1 is finished, we will have a 5-minute scene transition, leaving the audience in dark and silence. This is normal in a real world theatre play.<br>But if we leave game players in a black screen for a few seconds, this may drive people nuts.</p>\n</blockquote>\n<p>In both game programming and React, we hope to avoid this blank transition by a technique called <a href=\"http://gameprogrammingpatterns.com/double-buffer.html\">Double Buffering</a>.<br>Back to our theatre play example, we avoid the silent transition by running two stages (double buffering): </p>\n<ul>\n<li>stage A is on show for the current scene </li>\n<li>stage B is adjusting lights or removing&#x2F;changing play props for the next scene</li>\n</ul>\n<p>Once the current scene is finished on stage A, we immediately light on stage B to go to the next scene seamlessly. Now stage A is in dark preparing the next scene settings. </p>\n<p>So in React, double buffering means switching between the current fiber tree and a workInProgress fiber tree for seamless transitions between rendering.</p>\n<hr>\n</p>\n</details>\n\n<p>We therefore have finished a simple tour about first time rendering in React.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[1] <a href=\"http://gameprogrammingpatterns.com/double-buffer.html\">Double Buffering</a><br>[2] <a href=\"https://ed.ted.com/lessons/plato-s-allegory-of-the-cave-alex-gendler\">Allegory of the Cave</a></p>\n"},{"title":"Trie based router","date":"2022-12-21T18:04:15.000Z","_content":"## Why trie based router\nIf you do not have performance issues, adopting a trie based router might become a premature optimization. In this case, Regex based routing is fast enough, as Regex are compiled down to native code in modern browsers, like Chrome.\n\nHowever, if you feel tradition MVC routing results in performance pressure on your web App, you can take a look at trie based router. Here is an [example](https://ayende.com/blog/173313/trie-based-routing) from Ayende Rahien.   \n> Traditional MVC routing infrastructure can consume a significant amount of time,\nleaving little time for handling actual requests.\nBy using a trie based router, it is possible to reduce time spent on routing infrastructure,\nand increase time spent on actual request handling.\n\n## How to implement Router trie\nA route mainly does two things: registering a route with a function; matching a route.\nHere we use trie to register and match routes.\n### 1. Register a route\nFirst, split the route into an array of routes.\ne.g. \"/courses/:id\" => [\"courses\", \":id\"]\n```javascript\nconst add = (route) => {\n    if (typeof route !== 'string') {\n        throw TypeError('route should be string');\n    }\n    this.currentRoutes = splitRoute(route);\n    return this.createTrieNode(0, this.trie);\n}\n```\nNext, recursively add each segment of the route array to our trie.\n- 1/ Handle \":\" for dynamic values, \"*\" for wildcard (any value)\n- 2/ If a segment is found in our trie, check the next one\n  - \"courses\" is shared in the trie, if we have both courses/:id and courses/ranking \n- 3/ If not found, create a trie node for this segment \n```javascript\nconst createTrieNode = (index, trie) => {\n    const thisRoute = this.currentRoutes[index];\n    if (thisRoute === undefined) return trie;\n        \n    let node = null;\n    if (HAS_SPECIAL_SYMBOL) {\n        handleSpecialSymbol();\n    } else if (trie.nodes.has(thisRoute)) {\n        node = trie.nodes[thisRoute];\n    } else {\n        node = this.createNewNodes();\n        trie.nodes[thisRoute] = node;     \n    }\n\n    return this.createTrieNode(index + 1, node);\n}\n```\n### 2. Match a route\nLogics for match() a route is quite similar to add().\nThe main difference is in match() we also handle params for a route (if found).\n```javascript\nconst match = (route) => {\n    this.currentRoutes = splitRoute(route);\n    this.currentParams = {};\n        \n    const node = search(0, this.trie);\n    if (!node) return undefined;\n        \n    node = new Map(node);\n    node.params = this.currentParams;\n    return node;\n}\n```\nWhat does search() do?\nIf a node is found, search() recursively calls itself, with the next segment and the matching node as arguments.\n```javascript\nconst search = (index, trie) => {\n    if (trie === undefined) return trie;\n    const thisRoute = this.currentRoutes[index];\n    if (thisRoute === undefined) return trie;\n\n    if (trie.nodes.has(thisRoute)) {\n        return search(index + 1, trie.nodes[thisRoute]);\n    }\n\n    if (trie.name) {\n        // add params\n    }\n\n    if (trie.wildCard) {\n        // add params\n    }\n\n    return search(index + 1);\n}\n```\nFor full implementation, check [here](https://github.com/choojs/wayfarer/blob/master/trie.js).\n\n### References\n\n[1] [Trie based routing, Ayende Rahien](https://ayende.com/blog/173313/trie-based-routing)\n[2] [A composable trie based router, Wayfarer](https://github.com/choojs/wayfarer/blob/master/trie.js)\n[3] [Trie based routing instead of Regex based routing, React router](https://github.com/remix-run/react-router/issues/6627)\n","source":"_posts/dsa_for_web_trie_router.md","raw":"---\ntitle: Trie based router\ndate: 2022-12-21 13:04:15\ntag: DSA for web dev\n---\n## Why trie based router\nIf you do not have performance issues, adopting a trie based router might become a premature optimization. In this case, Regex based routing is fast enough, as Regex are compiled down to native code in modern browsers, like Chrome.\n\nHowever, if you feel tradition MVC routing results in performance pressure on your web App, you can take a look at trie based router. Here is an [example](https://ayende.com/blog/173313/trie-based-routing) from Ayende Rahien.   \n> Traditional MVC routing infrastructure can consume a significant amount of time,\nleaving little time for handling actual requests.\nBy using a trie based router, it is possible to reduce time spent on routing infrastructure,\nand increase time spent on actual request handling.\n\n## How to implement Router trie\nA route mainly does two things: registering a route with a function; matching a route.\nHere we use trie to register and match routes.\n### 1. Register a route\nFirst, split the route into an array of routes.\ne.g. \"/courses/:id\" => [\"courses\", \":id\"]\n```javascript\nconst add = (route) => {\n    if (typeof route !== 'string') {\n        throw TypeError('route should be string');\n    }\n    this.currentRoutes = splitRoute(route);\n    return this.createTrieNode(0, this.trie);\n}\n```\nNext, recursively add each segment of the route array to our trie.\n- 1/ Handle \":\" for dynamic values, \"*\" for wildcard (any value)\n- 2/ If a segment is found in our trie, check the next one\n  - \"courses\" is shared in the trie, if we have both courses/:id and courses/ranking \n- 3/ If not found, create a trie node for this segment \n```javascript\nconst createTrieNode = (index, trie) => {\n    const thisRoute = this.currentRoutes[index];\n    if (thisRoute === undefined) return trie;\n        \n    let node = null;\n    if (HAS_SPECIAL_SYMBOL) {\n        handleSpecialSymbol();\n    } else if (trie.nodes.has(thisRoute)) {\n        node = trie.nodes[thisRoute];\n    } else {\n        node = this.createNewNodes();\n        trie.nodes[thisRoute] = node;     \n    }\n\n    return this.createTrieNode(index + 1, node);\n}\n```\n### 2. Match a route\nLogics for match() a route is quite similar to add().\nThe main difference is in match() we also handle params for a route (if found).\n```javascript\nconst match = (route) => {\n    this.currentRoutes = splitRoute(route);\n    this.currentParams = {};\n        \n    const node = search(0, this.trie);\n    if (!node) return undefined;\n        \n    node = new Map(node);\n    node.params = this.currentParams;\n    return node;\n}\n```\nWhat does search() do?\nIf a node is found, search() recursively calls itself, with the next segment and the matching node as arguments.\n```javascript\nconst search = (index, trie) => {\n    if (trie === undefined) return trie;\n    const thisRoute = this.currentRoutes[index];\n    if (thisRoute === undefined) return trie;\n\n    if (trie.nodes.has(thisRoute)) {\n        return search(index + 1, trie.nodes[thisRoute]);\n    }\n\n    if (trie.name) {\n        // add params\n    }\n\n    if (trie.wildCard) {\n        // add params\n    }\n\n    return search(index + 1);\n}\n```\nFor full implementation, check [here](https://github.com/choojs/wayfarer/blob/master/trie.js).\n\n### References\n\n[1] [Trie based routing, Ayende Rahien](https://ayende.com/blog/173313/trie-based-routing)\n[2] [A composable trie based router, Wayfarer](https://github.com/choojs/wayfarer/blob/master/trie.js)\n[3] [Trie based routing instead of Regex based routing, React router](https://github.com/remix-run/react-router/issues/6627)\n","slug":"dsa_for_web_trie_router","published":1,"updated":"2023-02-09T03:15:05.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldwmqq0g00042epn87mo9kch","content":"<h2 id=\"Why-trie-based-router\"><a href=\"#Why-trie-based-router\" class=\"headerlink\" title=\"Why trie based router\"></a>Why trie based router</h2><p>If you do not have performance issues, adopting a trie based router might become a premature optimization. In this case, Regex based routing is fast enough, as Regex are compiled down to native code in modern browsers, like Chrome.</p>\n<p>However, if you feel tradition MVC routing results in performance pressure on your web App, you can take a look at trie based router. Here is an <a href=\"https://ayende.com/blog/173313/trie-based-routing\">example</a> from Ayende Rahien.   </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Traditional MVC routing infrastructure can consume a significant amount of time,<br>leaving little time for handling actual requests.<br>By using a trie based router, it is possible to reduce time spent on routing infrastructure,<br>and increase time spent on actual request handling.</p></blockquote>\n<h2 id=\"How-to-implement-Router-trie\"><a href=\"#How-to-implement-Router-trie\" class=\"headerlink\" title=\"How to implement Router trie\"></a>How to implement Router trie</h2><p>A route mainly does two things: registering a route with a function; matching a route.<br>Here we use trie to register and match routes.</p>\n<h3 id=\"1-Register-a-route\"><a href=\"#1-Register-a-route\" class=\"headerlink\" title=\"1. Register a route\"></a>1. Register a route</h3><p>First, split the route into an array of routes.<br>e.g. “&#x2F;courses&#x2F;:id” &#x3D;&gt; [“courses”, “:id”]</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> route <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'route should be string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes <span class=\"token operator\">=</span> <span class=\"token function\">splitRoute</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTrieNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>trie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Next, recursively add each segment of the route array to our trie.</p>\n<ul>\n<li>1&#x2F; Handle “:” for dynamic values, “*” for wildcard (any value)</li>\n<li>2&#x2F; If a segment is found in our trie, check the next one<ul>\n<li>“courses” is shared in the trie, if we have both courses&#x2F;:id and courses&#x2F;ranking</li>\n</ul>\n</li>\n<li>3&#x2F; If not found, create a trie node for this segment <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createTrieNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> trie</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> thisRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thisRoute <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> trie<span class=\"token punctuation\">;</span>\n        \n    <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">HAS_SPECIAL_SYMBOL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">handleSpecialSymbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>thisRoute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        node <span class=\"token operator\">=</span> trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>thisRoute<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createNewNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>thisRoute<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>     \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTrieNode</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"2-Match-a-route\"><a href=\"#2-Match-a-route\" class=\"headerlink\" title=\"2. Match a route\"></a>2. Match a route</h3><p>Logics for match() a route is quite similar to add().<br>The main difference is in match() we also handle params for a route (if found).</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">match</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes <span class=\"token operator\">=</span> <span class=\"token function\">splitRoute</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentParams <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>trie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n        \n    node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentParams<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>What does search() do?<br>If a node is found, search() recursively calls itself, with the next segment and the matching node as arguments.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> trie</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> trie<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> thisRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thisRoute <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> trie<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>thisRoute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>thisRoute<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// add params</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>wildCard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// add params</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>For full implementation, check <a href=\"https://github.com/choojs/wayfarer/blob/master/trie.js\">here</a>.</p>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p>[1] <a href=\"https://ayende.com/blog/173313/trie-based-routing\">Trie based routing, Ayende Rahien</a><br>[2] <a href=\"https://github.com/choojs/wayfarer/blob/master/trie.js\">A composable trie based router, Wayfarer</a><br>[3] <a href=\"https://github.com/remix-run/react-router/issues/6627\">Trie based routing instead of Regex based routing, React router</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Why-trie-based-router\"><a href=\"#Why-trie-based-router\" class=\"headerlink\" title=\"Why trie based router\"></a>Why trie based router</h2><p>If you do not have performance issues, adopting a trie based router might become a premature optimization. In this case, Regex based routing is fast enough, as Regex are compiled down to native code in modern browsers, like Chrome.</p>\n<p>However, if you feel tradition MVC routing results in performance pressure on your web App, you can take a look at trie based router. Here is an <a href=\"https://ayende.com/blog/173313/trie-based-routing\">example</a> from Ayende Rahien.   </p>\n<blockquote>\n<p>Traditional MVC routing infrastructure can consume a significant amount of time,<br>leaving little time for handling actual requests.<br>By using a trie based router, it is possible to reduce time spent on routing infrastructure,<br>and increase time spent on actual request handling.</p>\n</blockquote>\n<h2 id=\"How-to-implement-Router-trie\"><a href=\"#How-to-implement-Router-trie\" class=\"headerlink\" title=\"How to implement Router trie\"></a>How to implement Router trie</h2><p>A route mainly does two things: registering a route with a function; matching a route.<br>Here we use trie to register and match routes.</p>\n<h3 id=\"1-Register-a-route\"><a href=\"#1-Register-a-route\" class=\"headerlink\" title=\"1. Register a route\"></a>1. Register a route</h3><p>First, split the route into an array of routes.<br>e.g. “&#x2F;courses&#x2F;:id” &#x3D;&gt; [“courses”, “:id”]</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> route <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'route should be string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes <span class=\"token operator\">=</span> <span class=\"token function\">splitRoute</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTrieNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>trie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Next, recursively add each segment of the route array to our trie.</p>\n<ul>\n<li>1&#x2F; Handle “:” for dynamic values, “*” for wildcard (any value)</li>\n<li>2&#x2F; If a segment is found in our trie, check the next one<ul>\n<li>“courses” is shared in the trie, if we have both courses&#x2F;:id and courses&#x2F;ranking</li>\n</ul>\n</li>\n<li>3&#x2F; If not found, create a trie node for this segment <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createTrieNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> trie</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> thisRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thisRoute <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> trie<span class=\"token punctuation\">;</span>\n        \n    <span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">HAS_SPECIAL_SYMBOL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">handleSpecialSymbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>thisRoute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        node <span class=\"token operator\">=</span> trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>thisRoute<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createNewNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>thisRoute<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>     \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTrieNode</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"2-Match-a-route\"><a href=\"#2-Match-a-route\" class=\"headerlink\" title=\"2. Match a route\"></a>2. Match a route</h3><p>Logics for match() a route is quite similar to add().<br>The main difference is in match() we also handle params for a route (if found).</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">match</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes <span class=\"token operator\">=</span> <span class=\"token function\">splitRoute</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentParams <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>trie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n        \n    node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentParams<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>What does search() do?<br>If a node is found, search() recursively calls itself, with the next segment and the matching node as arguments.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> trie</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> trie<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> thisRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRoutes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thisRoute <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> trie<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>thisRoute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> trie<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>thisRoute<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// add params</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trie<span class=\"token punctuation\">.</span>wildCard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// add params</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>For full implementation, check <a href=\"https://github.com/choojs/wayfarer/blob/master/trie.js\">here</a>.</p>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p>[1] <a href=\"https://ayende.com/blog/173313/trie-based-routing\">Trie based routing, Ayende Rahien</a><br>[2] <a href=\"https://github.com/choojs/wayfarer/blob/master/trie.js\">A composable trie based router, Wayfarer</a><br>[3] <a href=\"https://github.com/remix-run/react-router/issues/6627\">Trie based routing instead of Regex based routing, React router</a></p>\n"},{"title":"React little by little 3 - Render Phase","date":"2023-01-13T13:41:00.000Z","_content":"## Recap: Time Sliced Work Loop\nFrom the [time slicing](https://flaming-cl.github.io/bits-refinery/2022/09/28/time_slicing_react/) post, we have known React implements an interruptible render phase by a conditional while loop: once <abbr>shouldYield</abbr> turns True, the current reconciliation job can be paused, leaving the main thread to more prioritized jobs, like a user event.\n```js\nfunction workLoop(deadline) {\n    let shouldYield = false\n    while (workInProgress !== null && !shouldYield) {\n        // next workInprogress is set within performUnitOfWork\n        performUnitOfWork(\n            workInProgress \n        )\n        shouldYield = deadline.timeRemaining() < 1\n    }\n    requestIdleCallback(workLoop)\n}\n```\nToday we are going to talk about the render phase of React, which is implemented via <abbr>performUnitOfWork</abbr> inside each work loop.\n<details><summary><b>Question: Do you think where we should put our code for the commit phase?</b></summary>\n<p>\nWe should put it outside the breakable while loop.      \nThis is because the commit phase can not be paused: we do not want to see our App rendered with some half updated states.\n\n```js\nfunction workLoop(deadline) {\n    let shouldYield = false\n    while (workInProgress !== null && !shouldYield) {\n        performUnitOfWork(\n            workInProgress\n        )\n        shouldYield = deadline.timeRemaining() < 1\n    }\n    commitWork(); // the commit phase\n    requestIdleCallback(workLoop)\n}\n```\n</p>\n</details>\n\n---\n\n## The Render Phase\n<abbr>PerformUnitOfWork</abbr> (the render phase) mainly does two things: beginWork and completeWork. Its code could be written like this:\n```javascript\nlet workInProgress = null;\n\nfunction performUnitOfWork(fiber: FiberNode) {\n    const next = beginWork(fiber);\n    fiber.memorizedProps = fiber.pendingProps;\n\n    if (next === null) {\n        completeUnitOfWork(fiber);\n    } else {\n        workInProgress = next;\n    }\n}\n```\n### An Overview of PerformUnitOfWork\nBefore understanding key responsibilities of <abbr>performUnitOfWork</abbr>, we first have an overview about how React calls <abbr>performUnitOfWork</abbr> to reconcile a Fiber tree.\n\n![punitofwork](https://user-images.githubusercontent.com/51183663/213318797-f18c1fa2-6c65-4ed7-aa29-bd7eea58ff9e.png)\n\n### beginWork\n### What does beginWork do?\nEach time, <abbr>performUnitOfWork</abbr> calls <abbr>beginWork</abbr> with the WIP (work in progress) fiber node to do the reconciliation job and return a reconciled child Fiber node (return null if no child). \n### Execution order of beginWork calls\n\n  The execution order of beginWork calls is similar to a preorder traversal of a tree, like succession to a monarchy's throne:\n  \n  > 1st kid ➡ 1st grandchildren ➡ 1st great-grandchildren ➡ ... ➡ the 1st no-kid offspring\n  > ➡ second in line sibling ➡ 1st kid of second in line sibling ➡ ...\n\n  <details><summary><b>True or False: The 1st Fiber node enters <abbr>completeWork</abbr> is the deepest node in a Fiber tree. </b></summary>\n          <p>\n          False. The first Fiber node enters <abbr>completeWork</abbr> is the left most leaf node in an App.\n          </p>\n  </details>   \n\n### After beginWork\nWhen <abbr>beginWork</abbr> finishes its work, we update the current props in the Fiber node.\nThe next step depends on whether the current Fiber node has a child node:\n- child ✅, <abbr>performUnitOfWork</abbr> will pass the child to the next <abbr>performUnitOfWork</abbr> call.\n- child ❌, <abbr>performUnitOfWork</abbr> will leave the current node to <abbr>completeUnitOfWork</abbr>.\n\n### completeUnitOfWork\nThen, <abbr>performUnitOfWork</abbr> calls <abbr>completeUnitOfWork</abbr>:\n```js\nfunction completeUnitOfWork(fiber: FiberNode) {\n    let node: FiberNode | null = fiber;\n\n    do {\n        completeWork(node); \n        const sibling = node.sibling;\n\n        if (sibling !== null) {\n            workInProgress = sibling;\n            return;\n        }\n\n        node = node.return;\n        workInProgress = node;\n    } while (node !== null);\n}\n```\nInside <abbr>completeUnitOfWork</abbr>, we first call <abbr>completeWork</abbr> to create a DOM instance for the WIP fiber node and handle its effects/flags. After that, the while loop has 3 options:\n- Option 1, the WIP node has a sibling node ✅: <abbr>beginWork(sibling)</abbr>\n- Option 2, sibling node ❌ , parent node ✅ : <abbr>completeWork(parent)</abbr>\n- Option 3, sibling node ❌ , parent node ❌ : stop the work loop \n  \n### Test your understanding\nNow we have had an overview of the reconciliation work loop.\nTo test how you understand what we have learned, give it a whirl on the following question.\n```javascript\nconst App = () => {\n    return (\n        <div>\n            react\n            <span>\n                little by little\n            </span>\n        </div>\n    )\n}\nReactDOM.createRoot(rootElement).render(<App />);\n```\n<summary>\n<b>Question: Please list all the beginWork and completeWork calls of this App during a render phase in sequence.</b>\nFor example, 1. beginWork(hostFiberRoot) 2. beginWork(App) 3. beginWork(div)\n</summary>\n\n\n![render_path](https://user-images.githubusercontent.com/51183663/212486682-a1a58b17-0206-419a-9d7c-945eb9918afc.png)\n\n\n\nNote: DIV is a host component. \"little by little\" is a text component.\n\n### Interview Trick\nYou may wonder why we spend so much time on a general understanding of the render phase. By understanding it, you can solve many interview questions on the rendering path of an APP.\n\nLet us look at an interview question:\n```javascript\nimport React, { useEffect } from \"react\";\n\nfunction A() {\n  useEffect(() => {\n    console.log(\"Mount A\");\n  }, []);\n  console.log(\"A\");\n  return <B />;\n}\n\nfunction B() {\n  useEffect(() => {\n    console.log(\"Mount B\");\n  }, []);\n  console.log(\"B\");\n  return <C />;\n}\n\nfunction C() {\n  useEffect(() => {\n    console.log(\"Mount C\");\n  }, []);\n  console.log(\"C\");\n  return null;\n}\n\nfunction D() {\n  useEffect(() => {\n    console.log(\"Mount D\");\n  }, []);\n  console.log(\"D\");\n  return null;\n}\n\nfunction App() {\n  useEffect(() => {\n    console.log(\"Mount App\");\n  }, []);\n  console.log(\"App\");\n  return (\n    <div>\n      <A />\n      <D />\n    </div>\n  );\n}\n\nexport default App;\n```\n### What does the above code snippet output by calling console.log?\n\n```\nApp    \nA    \nB    \nC    \nD     \nMount C    \nMount B     \nMount A    \nMount D   \nMount App  \n```\n\n- Console.log(\"X\") is called when we enter a component. \n> Orders of entering a component are the same as how we call beginWork (like a preorder traversal).\n- Console.log(\"Mount X\") inside useEffect(() => {}, []) is called after a component is rendered. \n> Orders of rendering a component are the same as how we call completeWork (like a postorder traversal).\n\n\nBut can you tell the reasons for your answer? It is time to take a closer look at beginWork and completeWork.\n","source":"_posts/react-render-phase.md","raw":"---\ntitle: React little by little 3 - Render Phase\ndate: 2023-01-13 08:41:00\ntags: React\n---\n## Recap: Time Sliced Work Loop\nFrom the [time slicing](https://flaming-cl.github.io/bits-refinery/2022/09/28/time_slicing_react/) post, we have known React implements an interruptible render phase by a conditional while loop: once <abbr>shouldYield</abbr> turns True, the current reconciliation job can be paused, leaving the main thread to more prioritized jobs, like a user event.\n```js\nfunction workLoop(deadline) {\n    let shouldYield = false\n    while (workInProgress !== null && !shouldYield) {\n        // next workInprogress is set within performUnitOfWork\n        performUnitOfWork(\n            workInProgress \n        )\n        shouldYield = deadline.timeRemaining() < 1\n    }\n    requestIdleCallback(workLoop)\n}\n```\nToday we are going to talk about the render phase of React, which is implemented via <abbr>performUnitOfWork</abbr> inside each work loop.\n<details><summary><b>Question: Do you think where we should put our code for the commit phase?</b></summary>\n<p>\nWe should put it outside the breakable while loop.      \nThis is because the commit phase can not be paused: we do not want to see our App rendered with some half updated states.\n\n```js\nfunction workLoop(deadline) {\n    let shouldYield = false\n    while (workInProgress !== null && !shouldYield) {\n        performUnitOfWork(\n            workInProgress\n        )\n        shouldYield = deadline.timeRemaining() < 1\n    }\n    commitWork(); // the commit phase\n    requestIdleCallback(workLoop)\n}\n```\n</p>\n</details>\n\n---\n\n## The Render Phase\n<abbr>PerformUnitOfWork</abbr> (the render phase) mainly does two things: beginWork and completeWork. Its code could be written like this:\n```javascript\nlet workInProgress = null;\n\nfunction performUnitOfWork(fiber: FiberNode) {\n    const next = beginWork(fiber);\n    fiber.memorizedProps = fiber.pendingProps;\n\n    if (next === null) {\n        completeUnitOfWork(fiber);\n    } else {\n        workInProgress = next;\n    }\n}\n```\n### An Overview of PerformUnitOfWork\nBefore understanding key responsibilities of <abbr>performUnitOfWork</abbr>, we first have an overview about how React calls <abbr>performUnitOfWork</abbr> to reconcile a Fiber tree.\n\n![punitofwork](https://user-images.githubusercontent.com/51183663/213318797-f18c1fa2-6c65-4ed7-aa29-bd7eea58ff9e.png)\n\n### beginWork\n### What does beginWork do?\nEach time, <abbr>performUnitOfWork</abbr> calls <abbr>beginWork</abbr> with the WIP (work in progress) fiber node to do the reconciliation job and return a reconciled child Fiber node (return null if no child). \n### Execution order of beginWork calls\n\n  The execution order of beginWork calls is similar to a preorder traversal of a tree, like succession to a monarchy's throne:\n  \n  > 1st kid ➡ 1st grandchildren ➡ 1st great-grandchildren ➡ ... ➡ the 1st no-kid offspring\n  > ➡ second in line sibling ➡ 1st kid of second in line sibling ➡ ...\n\n  <details><summary><b>True or False: The 1st Fiber node enters <abbr>completeWork</abbr> is the deepest node in a Fiber tree. </b></summary>\n          <p>\n          False. The first Fiber node enters <abbr>completeWork</abbr> is the left most leaf node in an App.\n          </p>\n  </details>   \n\n### After beginWork\nWhen <abbr>beginWork</abbr> finishes its work, we update the current props in the Fiber node.\nThe next step depends on whether the current Fiber node has a child node:\n- child ✅, <abbr>performUnitOfWork</abbr> will pass the child to the next <abbr>performUnitOfWork</abbr> call.\n- child ❌, <abbr>performUnitOfWork</abbr> will leave the current node to <abbr>completeUnitOfWork</abbr>.\n\n### completeUnitOfWork\nThen, <abbr>performUnitOfWork</abbr> calls <abbr>completeUnitOfWork</abbr>:\n```js\nfunction completeUnitOfWork(fiber: FiberNode) {\n    let node: FiberNode | null = fiber;\n\n    do {\n        completeWork(node); \n        const sibling = node.sibling;\n\n        if (sibling !== null) {\n            workInProgress = sibling;\n            return;\n        }\n\n        node = node.return;\n        workInProgress = node;\n    } while (node !== null);\n}\n```\nInside <abbr>completeUnitOfWork</abbr>, we first call <abbr>completeWork</abbr> to create a DOM instance for the WIP fiber node and handle its effects/flags. After that, the while loop has 3 options:\n- Option 1, the WIP node has a sibling node ✅: <abbr>beginWork(sibling)</abbr>\n- Option 2, sibling node ❌ , parent node ✅ : <abbr>completeWork(parent)</abbr>\n- Option 3, sibling node ❌ , parent node ❌ : stop the work loop \n  \n### Test your understanding\nNow we have had an overview of the reconciliation work loop.\nTo test how you understand what we have learned, give it a whirl on the following question.\n```javascript\nconst App = () => {\n    return (\n        <div>\n            react\n            <span>\n                little by little\n            </span>\n        </div>\n    )\n}\nReactDOM.createRoot(rootElement).render(<App />);\n```\n<summary>\n<b>Question: Please list all the beginWork and completeWork calls of this App during a render phase in sequence.</b>\nFor example, 1. beginWork(hostFiberRoot) 2. beginWork(App) 3. beginWork(div)\n</summary>\n\n\n![render_path](https://user-images.githubusercontent.com/51183663/212486682-a1a58b17-0206-419a-9d7c-945eb9918afc.png)\n\n\n\nNote: DIV is a host component. \"little by little\" is a text component.\n\n### Interview Trick\nYou may wonder why we spend so much time on a general understanding of the render phase. By understanding it, you can solve many interview questions on the rendering path of an APP.\n\nLet us look at an interview question:\n```javascript\nimport React, { useEffect } from \"react\";\n\nfunction A() {\n  useEffect(() => {\n    console.log(\"Mount A\");\n  }, []);\n  console.log(\"A\");\n  return <B />;\n}\n\nfunction B() {\n  useEffect(() => {\n    console.log(\"Mount B\");\n  }, []);\n  console.log(\"B\");\n  return <C />;\n}\n\nfunction C() {\n  useEffect(() => {\n    console.log(\"Mount C\");\n  }, []);\n  console.log(\"C\");\n  return null;\n}\n\nfunction D() {\n  useEffect(() => {\n    console.log(\"Mount D\");\n  }, []);\n  console.log(\"D\");\n  return null;\n}\n\nfunction App() {\n  useEffect(() => {\n    console.log(\"Mount App\");\n  }, []);\n  console.log(\"App\");\n  return (\n    <div>\n      <A />\n      <D />\n    </div>\n  );\n}\n\nexport default App;\n```\n### What does the above code snippet output by calling console.log?\n\n```\nApp    \nA    \nB    \nC    \nD     \nMount C    \nMount B     \nMount A    \nMount D   \nMount App  \n```\n\n- Console.log(\"X\") is called when we enter a component. \n> Orders of entering a component are the same as how we call beginWork (like a preorder traversal).\n- Console.log(\"Mount X\") inside useEffect(() => {}, []) is called after a component is rendered. \n> Orders of rendering a component are the same as how we call completeWork (like a postorder traversal).\n\n\nBut can you tell the reasons for your answer? It is time to take a closer look at beginWork and completeWork.\n","slug":"react-render-phase","published":1,"updated":"2023-02-09T03:15:05.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldwmqq0h00052epn293t0lp2","content":"<h2 id=\"Recap-Time-Sliced-Work-Loop\"><a href=\"#Recap-Time-Sliced-Work-Loop\" class=\"headerlink\" title=\"Recap: Time Sliced Work Loop\"></a>Recap: Time Sliced Work Loop</h2><p>From the <a href=\"https://flaming-cl.github.io/bits-refinery/2022/09/28/time_slicing_react/\">time slicing</a> post, we have known React implements an interruptible render phase by a conditional while loop: once <abbr>shouldYield</abbr> turns True, the current reconciliation job can be paused, leaving the main thread to more prioritized jobs, like a user event.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deadline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> shouldYield <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>shouldYield<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// next workInprogress is set within performUnitOfWork</span>\n        <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>\n            workInProgress \n        <span class=\"token punctuation\">)</span>\n        shouldYield <span class=\"token operator\">=</span> deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>workLoop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Today we are going to talk about the render phase of React, which is implemented via <abbr>performUnitOfWork</abbr> inside each work loop.</p>\n<details><summary><b>Question: Do you think where we should put our code for the commit phase?</b></summary>\n<p>\nWe should put it outside the breakable while loop.      \nThis is because the commit phase can not be paused: we do not want to see our App rendered with some half updated states.\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deadline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> shouldYield <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>shouldYield<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>\n            workInProgress\n        <span class=\"token punctuation\">)</span>\n        shouldYield <span class=\"token operator\">=</span> deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">commitWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the commit phase</span>\n    <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>workLoop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</p>\n</details>\n\n<hr>\n<h2 id=\"The-Render-Phase\"><a href=\"#The-Render-Phase\" class=\"headerlink\" title=\"The Render Phase\"></a>The Render Phase</h2><p><abbr>PerformUnitOfWork</abbr> (the render phase) mainly does two things: beginWork and completeWork. Its code could be written like this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> workInProgress <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">fiber</span><span class=\"token operator\">:</span> FiberNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fiber<span class=\"token punctuation\">.</span>memorizedProps <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span>pendingProps<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        workInProgress <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"An-Overview-of-PerformUnitOfWork\"><a href=\"#An-Overview-of-PerformUnitOfWork\" class=\"headerlink\" title=\"An Overview of PerformUnitOfWork\"></a>An Overview of PerformUnitOfWork</h3><p>Before understanding key responsibilities of <abbr>performUnitOfWork</abbr>, we first have an overview about how React calls <abbr>performUnitOfWork</abbr> to reconcile a Fiber tree.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/213318797-f18c1fa2-6c65-4ed7-aa29-bd7eea58ff9e.png\" alt=\"punitofwork\"></p>\n<h3 id=\"beginWork\"><a href=\"#beginWork\" class=\"headerlink\" title=\"beginWork\"></a>beginWork</h3><h3 id=\"What-does-beginWork-do\"><a href=\"#What-does-beginWork-do\" class=\"headerlink\" title=\"What does beginWork do?\"></a>What does beginWork do?</h3><p>Each time, <abbr>performUnitOfWork</abbr> calls <abbr>beginWork</abbr> with the WIP (work in progress) fiber node to do the reconciliation job and return a reconciled child Fiber node (return null if no child). </p>\n<h3 id=\"Execution-order-of-beginWork-calls\"><a href=\"#Execution-order-of-beginWork-calls\" class=\"headerlink\" title=\"Execution order of beginWork calls\"></a>Execution order of beginWork calls</h3><p>  The execution order of beginWork calls is similar to a preorder traversal of a tree, like succession to a monarchy’s throne:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1st kid ➡ 1st grandchildren ➡ 1st great-grandchildren ➡ … ➡ the 1st no-kid offspring<br>➡ second in line sibling ➡ 1st kid of second in line sibling ➡ …</p></blockquote>\n  <details><summary><b>True or False: The 1st Fiber node enters <abbr>completeWork</abbr> is the deepest node in a Fiber tree. </b></summary>\n          <p>\n          False. The first Fiber node enters <abbr>completeWork</abbr> is the left most leaf node in an App.\n          </p>\n  </details>   \n\n<h3 id=\"After-beginWork\"><a href=\"#After-beginWork\" class=\"headerlink\" title=\"After beginWork\"></a>After beginWork</h3><p>When <abbr>beginWork</abbr> finishes its work, we update the current props in the Fiber node.<br>The next step depends on whether the current Fiber node has a child node:</p>\n<ul>\n<li>child ✅, <abbr>performUnitOfWork</abbr> will pass the child to the next <abbr>performUnitOfWork</abbr> call.</li>\n<li>child ❌, <abbr>performUnitOfWork</abbr> will leave the current node to <abbr>completeUnitOfWork</abbr>.</li>\n</ul>\n<h3 id=\"completeUnitOfWork\"><a href=\"#completeUnitOfWork\" class=\"headerlink\" title=\"completeUnitOfWork\"></a>completeUnitOfWork</h3><p>Then, <abbr>performUnitOfWork</abbr> calls <abbr>completeUnitOfWork</abbr>:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">fiber</span><span class=\"token operator\">:</span> FiberNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> FiberNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">completeWork</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">const</span> sibling <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sibling <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            workInProgress <span class=\"token operator\">=</span> sibling<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>return<span class=\"token punctuation\">;</span>\n        workInProgress <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Inside <abbr>completeUnitOfWork</abbr>, we first call <abbr>completeWork</abbr> to create a DOM instance for the WIP fiber node and handle its effects&#x2F;flags. After that, the while loop has 3 options:</p>\n<ul>\n<li>Option 1, the WIP node has a sibling node ✅: <abbr>beginWork(sibling)</abbr></li>\n<li>Option 2, sibling node ❌ , parent node ✅ : <abbr>completeWork(parent)</abbr></li>\n<li>Option 3, sibling node ❌ , parent node ❌ : stop the work loop</li>\n</ul>\n<h3 id=\"Test-your-understanding\"><a href=\"#Test-your-understanding\" class=\"headerlink\" title=\"Test your understanding\"></a>Test your understanding</h3><p>Now we have had an overview of the reconciliation work loop.<br>To test how you understand what we have learned, give it a whirl on the following question.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            react\n            <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>\n                little by little\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<summary>\n<b>Question: Please list all the beginWork and completeWork calls of this App during a render phase in sequence.</b>\nFor example, 1. beginWork(hostFiberRoot) 2. beginWork(App) 3. beginWork(div)\n</summary>\n\n\n<p><img src=\"https://user-images.githubusercontent.com/51183663/212486682-a1a58b17-0206-419a-9d7c-945eb9918afc.png\" alt=\"render_path\"></p>\n<p>Note: DIV is a host component. “little by little” is a text component.</p>\n<h3 id=\"Interview-Trick\"><a href=\"#Interview-Trick\" class=\"headerlink\" title=\"Interview Trick\"></a>Interview Trick</h3><p>You may wonder why we spend so much time on a general understanding of the render phase. By understanding it, you can solve many interview questions on the rendering path of an APP.</p>\n<p>Let us look at an interview question:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount App\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"App\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"What-does-the-above-code-snippet-output-by-calling-console-log\"><a href=\"#What-does-the-above-code-snippet-output-by-calling-console-log\" class=\"headerlink\" title=\"What does the above code snippet output by calling console.log?\"></a>What does the above code snippet output by calling console.log?</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">App    \nA    \nB    \nC    \nD     \nMount C    \nMount B     \nMount A    \nMount D   \nMount App  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>Console.log(“X”) is called when we enter a component. <blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Orders of entering a component are the same as how we call beginWork (like a preorder traversal).</p></blockquote>\n</li>\n<li>Console.log(“Mount X”) inside useEffect(() &#x3D;&gt; {}, []) is called after a component is rendered. <blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Orders of rendering a component are the same as how we call completeWork (like a postorder traversal).</p></blockquote>\n</li>\n</ul>\n<p>But can you tell the reasons for your answer? It is time to take a closer look at beginWork and completeWork.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Recap-Time-Sliced-Work-Loop\"><a href=\"#Recap-Time-Sliced-Work-Loop\" class=\"headerlink\" title=\"Recap: Time Sliced Work Loop\"></a>Recap: Time Sliced Work Loop</h2><p>From the <a href=\"https://flaming-cl.github.io/bits-refinery/2022/09/28/time_slicing_react/\">time slicing</a> post, we have known React implements an interruptible render phase by a conditional while loop: once <abbr>shouldYield</abbr> turns True, the current reconciliation job can be paused, leaving the main thread to more prioritized jobs, like a user event.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deadline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> shouldYield <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>shouldYield<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// next workInprogress is set within performUnitOfWork</span>\n        <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>\n            workInProgress \n        <span class=\"token punctuation\">)</span>\n        shouldYield <span class=\"token operator\">=</span> deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>workLoop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Today we are going to talk about the render phase of React, which is implemented via <abbr>performUnitOfWork</abbr> inside each work loop.</p>\n<details><summary><b>Question: Do you think where we should put our code for the commit phase?</b></summary>\n<p>\nWe should put it outside the breakable while loop.      \nThis is because the commit phase can not be paused: we do not want to see our App rendered with some half updated states.\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deadline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> shouldYield <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>shouldYield<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>\n            workInProgress\n        <span class=\"token punctuation\">)</span>\n        shouldYield <span class=\"token operator\">=</span> deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">commitWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the commit phase</span>\n    <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>workLoop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</p>\n</details>\n\n<hr>\n<h2 id=\"The-Render-Phase\"><a href=\"#The-Render-Phase\" class=\"headerlink\" title=\"The Render Phase\"></a>The Render Phase</h2><p><abbr>PerformUnitOfWork</abbr> (the render phase) mainly does two things: beginWork and completeWork. Its code could be written like this:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> workInProgress <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">fiber</span><span class=\"token operator\">:</span> FiberNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> <span class=\"token function\">beginWork</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fiber<span class=\"token punctuation\">.</span>memorizedProps <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">.</span>pendingProps<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span>fiber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        workInProgress <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"An-Overview-of-PerformUnitOfWork\"><a href=\"#An-Overview-of-PerformUnitOfWork\" class=\"headerlink\" title=\"An Overview of PerformUnitOfWork\"></a>An Overview of PerformUnitOfWork</h3><p>Before understanding key responsibilities of <abbr>performUnitOfWork</abbr>, we first have an overview about how React calls <abbr>performUnitOfWork</abbr> to reconcile a Fiber tree.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/213318797-f18c1fa2-6c65-4ed7-aa29-bd7eea58ff9e.png\" alt=\"punitofwork\"></p>\n<h3 id=\"beginWork\"><a href=\"#beginWork\" class=\"headerlink\" title=\"beginWork\"></a>beginWork</h3><h3 id=\"What-does-beginWork-do\"><a href=\"#What-does-beginWork-do\" class=\"headerlink\" title=\"What does beginWork do?\"></a>What does beginWork do?</h3><p>Each time, <abbr>performUnitOfWork</abbr> calls <abbr>beginWork</abbr> with the WIP (work in progress) fiber node to do the reconciliation job and return a reconciled child Fiber node (return null if no child). </p>\n<h3 id=\"Execution-order-of-beginWork-calls\"><a href=\"#Execution-order-of-beginWork-calls\" class=\"headerlink\" title=\"Execution order of beginWork calls\"></a>Execution order of beginWork calls</h3><p>  The execution order of beginWork calls is similar to a preorder traversal of a tree, like succession to a monarchy’s throne:</p>\n<blockquote>\n<p>1st kid ➡ 1st grandchildren ➡ 1st great-grandchildren ➡ … ➡ the 1st no-kid offspring<br>➡ second in line sibling ➡ 1st kid of second in line sibling ➡ …</p>\n</blockquote>\n  <details><summary><b>True or False: The 1st Fiber node enters <abbr>completeWork</abbr> is the deepest node in a Fiber tree. </b></summary>\n          <p>\n          False. The first Fiber node enters <abbr>completeWork</abbr> is the left most leaf node in an App.\n          </p>\n  </details>   \n\n<h3 id=\"After-beginWork\"><a href=\"#After-beginWork\" class=\"headerlink\" title=\"After beginWork\"></a>After beginWork</h3><p>When <abbr>beginWork</abbr> finishes its work, we update the current props in the Fiber node.<br>The next step depends on whether the current Fiber node has a child node:</p>\n<ul>\n<li>child ✅, <abbr>performUnitOfWork</abbr> will pass the child to the next <abbr>performUnitOfWork</abbr> call.</li>\n<li>child ❌, <abbr>performUnitOfWork</abbr> will leave the current node to <abbr>completeUnitOfWork</abbr>.</li>\n</ul>\n<h3 id=\"completeUnitOfWork\"><a href=\"#completeUnitOfWork\" class=\"headerlink\" title=\"completeUnitOfWork\"></a>completeUnitOfWork</h3><p>Then, <abbr>performUnitOfWork</abbr> calls <abbr>completeUnitOfWork</abbr>:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">completeUnitOfWork</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">fiber</span><span class=\"token operator\">:</span> FiberNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> FiberNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> fiber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">completeWork</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">const</span> sibling <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sibling <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            workInProgress <span class=\"token operator\">=</span> sibling<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>return<span class=\"token punctuation\">;</span>\n        workInProgress <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Inside <abbr>completeUnitOfWork</abbr>, we first call <abbr>completeWork</abbr> to create a DOM instance for the WIP fiber node and handle its effects&#x2F;flags. After that, the while loop has 3 options:</p>\n<ul>\n<li>Option 1, the WIP node has a sibling node ✅: <abbr>beginWork(sibling)</abbr></li>\n<li>Option 2, sibling node ❌ , parent node ✅ : <abbr>completeWork(parent)</abbr></li>\n<li>Option 3, sibling node ❌ , parent node ❌ : stop the work loop</li>\n</ul>\n<h3 id=\"Test-your-understanding\"><a href=\"#Test-your-understanding\" class=\"headerlink\" title=\"Test your understanding\"></a>Test your understanding</h3><p>Now we have had an overview of the reconciliation work loop.<br>To test how you understand what we have learned, give it a whirl on the following question.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            react\n            <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>\n                little by little\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<summary>\n<b>Question: Please list all the beginWork and completeWork calls of this App during a render phase in sequence.</b>\nFor example, 1. beginWork(hostFiberRoot) 2. beginWork(App) 3. beginWork(div)\n</summary>\n\n\n<p><img src=\"https://user-images.githubusercontent.com/51183663/212486682-a1a58b17-0206-419a-9d7c-945eb9918afc.png\" alt=\"render_path\"></p>\n<p>Note: DIV is a host component. “little by little” is a text component.</p>\n<h3 id=\"Interview-Trick\"><a href=\"#Interview-Trick\" class=\"headerlink\" title=\"Interview Trick\"></a>Interview Trick</h3><p>You may wonder why we spend so much time on a general understanding of the render phase. By understanding it, you can solve many interview questions on the rendering path of an APP.</p>\n<p>Let us look at an interview question:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mount App\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"App\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"What-does-the-above-code-snippet-output-by-calling-console-log\"><a href=\"#What-does-the-above-code-snippet-output-by-calling-console-log\" class=\"headerlink\" title=\"What does the above code snippet output by calling console.log?\"></a>What does the above code snippet output by calling console.log?</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">App    \nA    \nB    \nC    \nD     \nMount C    \nMount B     \nMount A    \nMount D   \nMount App  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>Console.log(“X”) is called when we enter a component. <blockquote>\n<p>Orders of entering a component are the same as how we call beginWork (like a preorder traversal).</p>\n</blockquote>\n</li>\n<li>Console.log(“Mount X”) inside useEffect(() &#x3D;&gt; {}, []) is called after a component is rendered. <blockquote>\n<p>Orders of rendering a component are the same as how we call completeWork (like a postorder traversal).</p>\n</blockquote>\n</li>\n</ul>\n<p>But can you tell the reasons for your answer? It is time to take a closer look at beginWork and completeWork.</p>\n"},{"title":"Questions About React concurrent features","date":"2023-02-06T17:21:10.000Z","_content":"\n<summary>Do React concurrent features mean multitasking?</summary>\nNo. React concurrent features are not about multitasking.\nThis is because the JavaScript engine is single-threaded (can only do one thing at one time).\nSo there is no magic for React to simultaneously handle user events while rendering a large list.\n\n### If so, what does React do to avoid stutters when running CPU heavy tasks?\nIn fact, React tries to avoid CPU bottlenecks by running one task, stopping it, running another, and so forth.\nSounds like a micro operating system, right?\nBut concurrent features will not allow tasks to freely compete for sources, instead they will label some tasks with low priority. This means these low priority tasks will yield the main thread to more urgent tasks to ensure performance.\n\nThis is quite similar to how we answer a second phone call:\n\n> Assume there comes a food delivery call, while we are calling a friend for a casual chat.\nSince a food delivery call is more urgent than a casual chat, we hold the chat and answer the delivery call.\n\n![calls](https://user-images.githubusercontent.com/51183663/217071662-a89bd48e-beb5-4a82-ab62-7f36f7ab15fe.png)\n\nReact does the same thing. It can pause a less prioritized rendering task and yield to more urgent tasks, such as keyboard events which need immediate responds.\n\n### Can you give some examples about React concurrent features?\nConcurrent features: startTransition(), useTransition(), useDeferredValue()\nBy using the above APIs, you are telling React to give lower priority to things you put in them. \n\n1）useDeferredValue(value)\n- example: input value of a search bar\n- result: updates of the input value will be deferred, just like what \"debounce\" does\n\n2）startTransition(callback)\n- example: a function to update a large list\n- result: When updating the large list, if there comes a keyboard event, React will pause the ongoing update and turn to the user event.\n\n### What enables React to run the concurrent features?\nTime slicing.\nAfter V16, React started to embrace time slicing to ensure an interruptible render phase. \nThis means React can insert urgent browser tasks among small tasks from the render phase to avoid stutter.\n\n![217070500-dc1bfbcf-31a5-4158-8d19-7870dbf99071](https://user-images.githubusercontent.com/51183663/217111897-7dacf96a-a574-410b-865b-c5e8ce3c3f5a.png)\nTo understand more about time slicing, go to [this post](https://flaming-cl.github.io/bits-refinery/bits-refinery/2022/09/28/time-slicing-react/)\n\n## References\n[1] [Visualization of async rendering and synchronous rendering in React, Andrew Clark](https://twitter.com/acdlite/status/977291318324948992)\n[2] [useTransition, React Docs](https://beta.reactjs.org/reference/react/useTransition)\n[3] [useDeferredValue, React Docs](https://beta.reactjs.org/reference/react/useDeferredValue)\n","source":"_posts/simple-ideas-about-React-Concurrent-mode.md","raw":"---\ntitle: Questions About React concurrent features\ndate: 2023-02-06 12:21:10\ntags: React\n---\n\n<summary>Do React concurrent features mean multitasking?</summary>\nNo. React concurrent features are not about multitasking.\nThis is because the JavaScript engine is single-threaded (can only do one thing at one time).\nSo there is no magic for React to simultaneously handle user events while rendering a large list.\n\n### If so, what does React do to avoid stutters when running CPU heavy tasks?\nIn fact, React tries to avoid CPU bottlenecks by running one task, stopping it, running another, and so forth.\nSounds like a micro operating system, right?\nBut concurrent features will not allow tasks to freely compete for sources, instead they will label some tasks with low priority. This means these low priority tasks will yield the main thread to more urgent tasks to ensure performance.\n\nThis is quite similar to how we answer a second phone call:\n\n> Assume there comes a food delivery call, while we are calling a friend for a casual chat.\nSince a food delivery call is more urgent than a casual chat, we hold the chat and answer the delivery call.\n\n![calls](https://user-images.githubusercontent.com/51183663/217071662-a89bd48e-beb5-4a82-ab62-7f36f7ab15fe.png)\n\nReact does the same thing. It can pause a less prioritized rendering task and yield to more urgent tasks, such as keyboard events which need immediate responds.\n\n### Can you give some examples about React concurrent features?\nConcurrent features: startTransition(), useTransition(), useDeferredValue()\nBy using the above APIs, you are telling React to give lower priority to things you put in them. \n\n1）useDeferredValue(value)\n- example: input value of a search bar\n- result: updates of the input value will be deferred, just like what \"debounce\" does\n\n2）startTransition(callback)\n- example: a function to update a large list\n- result: When updating the large list, if there comes a keyboard event, React will pause the ongoing update and turn to the user event.\n\n### What enables React to run the concurrent features?\nTime slicing.\nAfter V16, React started to embrace time slicing to ensure an interruptible render phase. \nThis means React can insert urgent browser tasks among small tasks from the render phase to avoid stutter.\n\n![217070500-dc1bfbcf-31a5-4158-8d19-7870dbf99071](https://user-images.githubusercontent.com/51183663/217111897-7dacf96a-a574-410b-865b-c5e8ce3c3f5a.png)\nTo understand more about time slicing, go to [this post](https://flaming-cl.github.io/bits-refinery/bits-refinery/2022/09/28/time-slicing-react/)\n\n## References\n[1] [Visualization of async rendering and synchronous rendering in React, Andrew Clark](https://twitter.com/acdlite/status/977291318324948992)\n[2] [useTransition, React Docs](https://beta.reactjs.org/reference/react/useTransition)\n[3] [useDeferredValue, React Docs](https://beta.reactjs.org/reference/react/useDeferredValue)\n","slug":"simple-ideas-about-React-Concurrent-mode","published":1,"updated":"2023-02-09T03:15:05.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldwmqq0j00082epn59tn69b1","content":"<summary>Do React concurrent features mean multitasking?</summary>\nNo. React concurrent features are not about multitasking.\nThis is because the JavaScript engine is single-threaded (can only do one thing at one time).\nSo there is no magic for React to simultaneously handle user events while rendering a large list.\n\n<h3 id=\"If-so-what-does-React-do-to-avoid-stutters-when-running-CPU-heavy-tasks\"><a href=\"#If-so-what-does-React-do-to-avoid-stutters-when-running-CPU-heavy-tasks\" class=\"headerlink\" title=\"If so, what does React do to avoid stutters when running CPU heavy tasks?\"></a>If so, what does React do to avoid stutters when running CPU heavy tasks?</h3><p>In fact, React tries to avoid CPU bottlenecks by running one task, stopping it, running another, and so forth.<br>Sounds like a micro operating system, right?<br>But concurrent features will not allow tasks to freely compete for sources, instead they will label some tasks with low priority. This means these low priority tasks will yield the main thread to more urgent tasks to ensure performance.</p>\n<p>This is quite similar to how we answer a second phone call:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Assume there comes a food delivery call, while we are calling a friend for a casual chat.<br>Since a food delivery call is more urgent than a casual chat, we hold the chat and answer the delivery call.</p></blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/217071662-a89bd48e-beb5-4a82-ab62-7f36f7ab15fe.png\" alt=\"calls\"></p>\n<p>React does the same thing. It can pause a less prioritized rendering task and yield to more urgent tasks, such as keyboard events which need immediate responds.</p>\n<h3 id=\"Can-you-give-some-examples-about-React-concurrent-features\"><a href=\"#Can-you-give-some-examples-about-React-concurrent-features\" class=\"headerlink\" title=\"Can you give some examples about React concurrent features?\"></a>Can you give some examples about React concurrent features?</h3><p>Concurrent features: startTransition(), useTransition(), useDeferredValue()<br>By using the above APIs, you are telling React to give lower priority to things you put in them. </p>\n<p>1）useDeferredValue(value)</p>\n<ul>\n<li>example: input value of a search bar</li>\n<li>result: updates of the input value will be deferred, just like what “debounce” does</li>\n</ul>\n<p>2）startTransition(callback)</p>\n<ul>\n<li>example: a function to update a large list</li>\n<li>result: When updating the large list, if there comes a keyboard event, React will pause the ongoing update and turn to the user event.</li>\n</ul>\n<h3 id=\"What-enables-React-to-run-the-concurrent-features\"><a href=\"#What-enables-React-to-run-the-concurrent-features\" class=\"headerlink\" title=\"What enables React to run the concurrent features?\"></a>What enables React to run the concurrent features?</h3><p>Time slicing.<br>After V16, React started to embrace time slicing to ensure an interruptible render phase.<br>This means React can insert urgent browser tasks among small tasks from the render phase to avoid stutter.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/217111897-7dacf96a-a574-410b-865b-c5e8ce3c3f5a.png\" alt=\"217070500-dc1bfbcf-31a5-4158-8d19-7870dbf99071\"><br>To understand more about time slicing, go to <a href=\"https://flaming-cl.github.io/bits-refinery/bits-refinery/2022/09/28/time-slicing-react/\">this post</a></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[1] <a href=\"https://twitter.com/acdlite/status/977291318324948992\">Visualization of async rendering and synchronous rendering in React, Andrew Clark</a><br>[2] <a href=\"https://beta.reactjs.org/reference/react/useTransition\">useTransition, React Docs</a><br>[3] <a href=\"https://beta.reactjs.org/reference/react/useDeferredValue\">useDeferredValue, React Docs</a></p>\n","site":{"data":{}},"excerpt":"","more":"<summary>Do React concurrent features mean multitasking?</summary>\nNo. React concurrent features are not about multitasking.\nThis is because the JavaScript engine is single-threaded (can only do one thing at one time).\nSo there is no magic for React to simultaneously handle user events while rendering a large list.\n\n<h3 id=\"If-so-what-does-React-do-to-avoid-stutters-when-running-CPU-heavy-tasks\"><a href=\"#If-so-what-does-React-do-to-avoid-stutters-when-running-CPU-heavy-tasks\" class=\"headerlink\" title=\"If so, what does React do to avoid stutters when running CPU heavy tasks?\"></a>If so, what does React do to avoid stutters when running CPU heavy tasks?</h3><p>In fact, React tries to avoid CPU bottlenecks by running one task, stopping it, running another, and so forth.<br>Sounds like a micro operating system, right?<br>But concurrent features will not allow tasks to freely compete for sources, instead they will label some tasks with low priority. This means these low priority tasks will yield the main thread to more urgent tasks to ensure performance.</p>\n<p>This is quite similar to how we answer a second phone call:</p>\n<blockquote>\n<p>Assume there comes a food delivery call, while we are calling a friend for a casual chat.<br>Since a food delivery call is more urgent than a casual chat, we hold the chat and answer the delivery call.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/217071662-a89bd48e-beb5-4a82-ab62-7f36f7ab15fe.png\" alt=\"calls\"></p>\n<p>React does the same thing. It can pause a less prioritized rendering task and yield to more urgent tasks, such as keyboard events which need immediate responds.</p>\n<h3 id=\"Can-you-give-some-examples-about-React-concurrent-features\"><a href=\"#Can-you-give-some-examples-about-React-concurrent-features\" class=\"headerlink\" title=\"Can you give some examples about React concurrent features?\"></a>Can you give some examples about React concurrent features?</h3><p>Concurrent features: startTransition(), useTransition(), useDeferredValue()<br>By using the above APIs, you are telling React to give lower priority to things you put in them. </p>\n<p>1）useDeferredValue(value)</p>\n<ul>\n<li>example: input value of a search bar</li>\n<li>result: updates of the input value will be deferred, just like what “debounce” does</li>\n</ul>\n<p>2）startTransition(callback)</p>\n<ul>\n<li>example: a function to update a large list</li>\n<li>result: When updating the large list, if there comes a keyboard event, React will pause the ongoing update and turn to the user event.</li>\n</ul>\n<h3 id=\"What-enables-React-to-run-the-concurrent-features\"><a href=\"#What-enables-React-to-run-the-concurrent-features\" class=\"headerlink\" title=\"What enables React to run the concurrent features?\"></a>What enables React to run the concurrent features?</h3><p>Time slicing.<br>After V16, React started to embrace time slicing to ensure an interruptible render phase.<br>This means React can insert urgent browser tasks among small tasks from the render phase to avoid stutter.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/217111897-7dacf96a-a574-410b-865b-c5e8ce3c3f5a.png\" alt=\"217070500-dc1bfbcf-31a5-4158-8d19-7870dbf99071\"><br>To understand more about time slicing, go to <a href=\"https://flaming-cl.github.io/bits-refinery/bits-refinery/2022/09/28/time-slicing-react/\">this post</a></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[1] <a href=\"https://twitter.com/acdlite/status/977291318324948992\">Visualization of async rendering and synchronous rendering in React, Andrew Clark</a><br>[2] <a href=\"https://beta.reactjs.org/reference/react/useTransition\">useTransition, React Docs</a><br>[3] <a href=\"https://beta.reactjs.org/reference/react/useDeferredValue\">useDeferredValue, React Docs</a></p>\n"},{"title":"Single-threaded JavaScript","date":"2023-02-08T19:33:14.000Z","_content":"### Single-threaded JavaScript\nThe JavaScript engine is single threaded.\n\nThis means it only does one thing at a time in the call stack, like the only phone booth in town that only allows one person to make phone calls.\n\nAlso, function calls that are waiting to be executed are like people who are waiting outside a booth for phone calls.\n\n![image](https://pbs.twimg.com/media/FoeFDZfX0AA1Fqn?format=jpg&name=medium)\n### Sync and Aysnc Events\nIn JavaScript, we have sync and async calls.\n\nWhen it comes to our phone booth story, we also have two kinds of people:\n- People who can start their phone call immediately (sync)\n- People who just stay in the booth , and wait for others to be ready and start a call (async)\n\nNo one would like to be kept waiting outside of a phone booth, but only to see someone stay in the booth doing nothing.\n\nAn efficient JavaScript engine also does not allow async functions to occupy the call stack and have sync ones to wait.\n\n### Callback Queue and Call Stack\nSo the JavaScript engine will let the sync calls to stay in the call stack, and puts async calls aside for a while.\n\nFor those async calls, once they are ready to be executed, they will be pushed into a callback queue, waiting to be back to the call stack.\nRight, they are not pushed into the call stack immediately. Instead, they will be back until the call stack has finished its existing sync calls.\n\nI think this makes sense, because we do not want to messed up async calls and sync calls.\n\nWhen an async callback is ready, it is possible that there are still some sync tasks waiting to be execuated in the call stack. At this moment, if we allow a ready async task to jump the queue, you may get confused why a async call is execuated before your sync calls.\n![image](https://pbs.twimg.com/media/FoeFEsiXgAE7PxT?format=png&name=900x900)\n\n### Microtask and Macrotask\n\nMicrotask\n","source":"_posts/single-threaded-javascript.md","raw":"---\ntitle: Single-threaded JavaScript\ndate: 2023-02-08 14:33:14\ntags: JavaScript\n---\n### Single-threaded JavaScript\nThe JavaScript engine is single threaded.\n\nThis means it only does one thing at a time in the call stack, like the only phone booth in town that only allows one person to make phone calls.\n\nAlso, function calls that are waiting to be executed are like people who are waiting outside a booth for phone calls.\n\n![image](https://pbs.twimg.com/media/FoeFDZfX0AA1Fqn?format=jpg&name=medium)\n### Sync and Aysnc Events\nIn JavaScript, we have sync and async calls.\n\nWhen it comes to our phone booth story, we also have two kinds of people:\n- People who can start their phone call immediately (sync)\n- People who just stay in the booth , and wait for others to be ready and start a call (async)\n\nNo one would like to be kept waiting outside of a phone booth, but only to see someone stay in the booth doing nothing.\n\nAn efficient JavaScript engine also does not allow async functions to occupy the call stack and have sync ones to wait.\n\n### Callback Queue and Call Stack\nSo the JavaScript engine will let the sync calls to stay in the call stack, and puts async calls aside for a while.\n\nFor those async calls, once they are ready to be executed, they will be pushed into a callback queue, waiting to be back to the call stack.\nRight, they are not pushed into the call stack immediately. Instead, they will be back until the call stack has finished its existing sync calls.\n\nI think this makes sense, because we do not want to messed up async calls and sync calls.\n\nWhen an async callback is ready, it is possible that there are still some sync tasks waiting to be execuated in the call stack. At this moment, if we allow a ready async task to jump the queue, you may get confused why a async call is execuated before your sync calls.\n![image](https://pbs.twimg.com/media/FoeFEsiXgAE7PxT?format=png&name=900x900)\n\n### Microtask and Macrotask\n\nMicrotask\n","slug":"single-threaded-javascript","published":1,"updated":"2023-02-09T17:19:53.747Z","_id":"cldwmqq0k000a2epnee4qhy8f","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Single-threaded-JavaScript\"><a href=\"#Single-threaded-JavaScript\" class=\"headerlink\" title=\"Single-threaded JavaScript\"></a>Single-threaded JavaScript</h3><p>The JavaScript engine is single threaded.</p>\n<p>This means it only does one thing at a time in the call stack, like the only phone booth in town that only allows one person to make phone calls.</p>\n<p>Also, function calls that are waiting to be executed are like people who are waiting outside a booth for phone calls.</p>\n<p><img src=\"https://pbs.twimg.com/media/FoeFDZfX0AA1Fqn?format=jpg&name=medium\" alt=\"image\"></p>\n<h3 id=\"Sync-and-Aysnc-Events\"><a href=\"#Sync-and-Aysnc-Events\" class=\"headerlink\" title=\"Sync and Aysnc Events\"></a>Sync and Aysnc Events</h3><p>In JavaScript, we have sync and async calls.</p>\n<p>When it comes to our phone booth story, we also have two kinds of people:</p>\n<ul>\n<li>People who can start their phone call immediately (sync)</li>\n<li>People who just stay in the booth , and wait for others to be ready and start a call (async)</li>\n</ul>\n<p>No one would like to be kept waiting outside of a phone booth, but only to see someone stay in the booth doing nothing.</p>\n<p>An efficient JavaScript engine also does not allow async functions to occupy the call stack and have sync ones to wait.</p>\n<h3 id=\"Callback-Queue-and-Call-Stack\"><a href=\"#Callback-Queue-and-Call-Stack\" class=\"headerlink\" title=\"Callback Queue and Call Stack\"></a>Callback Queue and Call Stack</h3><p>So the JavaScript engine will let the sync calls to stay in the call stack, and puts async calls aside for a while.</p>\n<p>For those async calls, once they are ready to be executed, they will be pushed into a callback queue, waiting to be back to the call stack.<br>Right, they are not pushed into the call stack immediately. Instead, they will be back until the call stack has finished its existing sync calls.</p>\n<p>I think this makes sense, because we do not want to messed up async calls and sync calls.</p>\n<p>When an async callback is ready, it is possible that there are still some sync tasks waiting to be execuated in the call stack. At this moment, if we allow a ready async task to jump the queue, you may get confused why a async call is execuated before your sync calls.<br><img src=\"https://pbs.twimg.com/media/FoeFEsiXgAE7PxT?format=png&name=900x900\" alt=\"image\"></p>\n<h3 id=\"Microtask-and-Macrotask\"><a href=\"#Microtask-and-Macrotask\" class=\"headerlink\" title=\"Microtask and Macrotask\"></a>Microtask and Macrotask</h3><p>Microtask</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Single-threaded-JavaScript\"><a href=\"#Single-threaded-JavaScript\" class=\"headerlink\" title=\"Single-threaded JavaScript\"></a>Single-threaded JavaScript</h3><p>The JavaScript engine is single threaded.</p>\n<p>This means it only does one thing at a time in the call stack, like the only phone booth in town that only allows one person to make phone calls.</p>\n<p>Also, function calls that are waiting to be executed are like people who are waiting outside a booth for phone calls.</p>\n<p><img src=\"https://pbs.twimg.com/media/FoeFDZfX0AA1Fqn?format=jpg&name=medium\" alt=\"image\"></p>\n<h3 id=\"Sync-and-Aysnc-Events\"><a href=\"#Sync-and-Aysnc-Events\" class=\"headerlink\" title=\"Sync and Aysnc Events\"></a>Sync and Aysnc Events</h3><p>In JavaScript, we have sync and async calls.</p>\n<p>When it comes to our phone booth story, we also have two kinds of people:</p>\n<ul>\n<li>People who can start their phone call immediately (sync)</li>\n<li>People who just stay in the booth , and wait for others to be ready and start a call (async)</li>\n</ul>\n<p>No one would like to be kept waiting outside of a phone booth, but only to see someone stay in the booth doing nothing.</p>\n<p>An efficient JavaScript engine also does not allow async functions to occupy the call stack and have sync ones to wait.</p>\n<h3 id=\"Callback-Queue-and-Call-Stack\"><a href=\"#Callback-Queue-and-Call-Stack\" class=\"headerlink\" title=\"Callback Queue and Call Stack\"></a>Callback Queue and Call Stack</h3><p>So the JavaScript engine will let the sync calls to stay in the call stack, and puts async calls aside for a while.</p>\n<p>For those async calls, once they are ready to be executed, they will be pushed into a callback queue, waiting to be back to the call stack.<br>Right, they are not pushed into the call stack immediately. Instead, they will be back until the call stack has finished its existing sync calls.</p>\n<p>I think this makes sense, because we do not want to messed up async calls and sync calls.</p>\n<p>When an async callback is ready, it is possible that there are still some sync tasks waiting to be execuated in the call stack. At this moment, if we allow a ready async task to jump the queue, you may get confused why a async call is execuated before your sync calls.<br><img src=\"https://pbs.twimg.com/media/FoeFEsiXgAE7PxT?format=png&name=900x900\" alt=\"image\"></p>\n<h3 id=\"Microtask-and-Macrotask\"><a href=\"#Microtask-and-Macrotask\" class=\"headerlink\" title=\"Microtask and Macrotask\"></a>Microtask and Macrotask</h3><p>Microtask</p>\n"},{"title":"React little by little 1 -  Time Slicing","date":"2022-09-28T22:49:47.000Z","_content":"\nYou may have heard people saying \"React is fast\" as it uses virtual DOM.\nBut is virtual DOM the only thing you can think of when talking about React performance?\nIn fact React has done many things to handle performance issues.\n\nToday I will talk about Time Slicing.\nA technique React uses to solve performance bottleneck.\n\n## Event Loop and CPU bottlenecks\n### Event Loop\nModern browsers run a continuous event loop at a certain frequency - e.g. 60Hz (refresh 60 times a second). For smooth and responsive experience, browsers try to complete tasks within each event loop execution, aka a frame.\n\n![event-loop-frame](https://user-images.githubusercontent.com/51183663/209892101-70af523b-4bf5-45ba-9aef-b01ac11f9b70.png)\n\nFor 60Hz refresh rate devices, each execution frame has a budget of 16.66ms (1 second / 60).\n\n### CPU bottlenecks\nWithin such a shoestring budget, browsers have to handle a pipeline of work like this:\n\n![frame_pipeline](https://user-images.githubusercontent.com/51183663/209890234-985a0618-b856-414d-999e-f41823756b9b.png)\n\nIf any step in this pipeline needs more than 16.66ms, no time will be left for the upcoming work in this frame.\nThis means we will not have time for style calculations, layout, paint and compositing, when we spend too much time on JavaScript jobs.\nWhen this lasts for 2 or 3 seconds, users will feel your website is slow.\n\n### How does React avoid this scenario?\nReact sets up an interval for running JavaScript tasks in each frame. \nWhen running out of this interval, React will pause its current tasks and give back control to the main thread, letting it perform high priority tasks (painting or user events).\nAfter the main thread has finished prioritized jobs, React goes back to where it stopped and continues working.\n\nAs you may have noticed, the key here is to make React interruptible.\n\n## Time Slicing and Interruptible React \nAssume we have a large application with 500+ components to render.\n### While rendering these components, how does React ensure responsiveness for keyboard or mouse events?\n\nBefore React 16, the render phase was synchronize and uninterruptible.\nThe browser therefore would be easily occupied by CPU-hungry tasks,\nand unable to give prompt responses to user events.\nTake a look at [this video](https://www.youtube.com/watch?v=nLF0n9SACd4) to see what CPU-heavy tasks could be like.\n\n### So, how did React overcome this?\n\nAnswer: Time Slicing.\n\nHere is a [picture](https://twitter.com/acdlite/status/977291318324948992) of time slicing in React (idea of Andrew Clark from the React core team).\n\n![time_slicing](https://user-images.githubusercontent.com/51183663/211950568-f4b85e7a-91d6-4a5a-9b97-c949a14e4282.png)\n\n### Interruptible render phase\nAfter version 16, React started using Fiber reconciler to ensure the render phase is interruptible. It breaks down the render phase into time slices so that it can pause current work to run more urgent tasks, like user inputs.\nAs shown in the above picture, time slicing enables browser events to cut in line during the render phase. This helps React to avoid \"hiccup\" moments.\n\n### Uninterruptible commit phase\nUnlike the render phase, the commit phase can not be interrupted.\nYou can think of these two like a movie screenplay and a movie on show.\nWhen a movie is on (the commit phase), theatres will not suddenly stop playing or change its order of scenes. Just like React will not draw some semi-calculated UI or suddenly stop the commit phase.\n\n## Interruptible Work Loop\nBefore version 16, React reconciler is implemented by call stack recursion. However, stack Reconciliation will not allow pauses on a running task during the render phase.\nAs mentioned earlier, a high performance render phase is time sliced and interruptible. To implement this, we can change the call stack recursion to conditional while loop recursion:\n```js\nfunction workLoop(deadline) {\n    let shouldYield = false\n    while (workInProgress !== null && !shouldYield) {\n        // next workInprogress is set within performUnitOfWork\n        performUnitOfWork(\n            workInProgress \n        )\n        shouldYield = deadline.timeRemaining() < 1\n    }\n    requestIdleCallback(workLoop)\n}\n```\n- while (workInProgress !== null && !shouldYield)\n> This enables us to stop the workLoop, especially when there is no time left in each frame (shouldYield).  \n- requestIdleCallback\n> Check whether the main thread is idle for running sliced tasks.\n\n## Fiber Reconciler\nThis interruptable reconciler is called Fiber reconciler in React.\nTo know more about React Fiber, take a look at this post first: [React Fiber Tree](https://flaming-cl.github.io/bits-refinery/2022/11/22/react-fiber-tree/).\n\n## References\n[1] [Sneak Peek: Beyond React 16, Dan Abramov](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html)\n[1] [Build your own React, Rodrigo Pombo](https://pomb.us/build-your-own-react/)\n[2] [Event loop: microtasks and macrotasks, javascript.info](https://javascript.info/event-loop)\n[3] [Visualization of async rendering and synchronous rendering in React, Andrew Clark](https://twitter.com/acdlite/status/977291318324948992)\n[4] [Reconciliation, React official documents](https://reactjs.org/docs/reconciliation.html)\n[5] [Rendering Performance, Paul Lewis](https://web.dev/rendering-performance/)\n[6] [Frame timing, W3C](https://www.w3.org/TR/frame-timing/)\n","source":"_posts/time-slicing-react.md","raw":"---\ntitle:  React little by little 1 -  Time Slicing\ndate: 2022-09-28 18:49:47\ntags: React\n---\n\nYou may have heard people saying \"React is fast\" as it uses virtual DOM.\nBut is virtual DOM the only thing you can think of when talking about React performance?\nIn fact React has done many things to handle performance issues.\n\nToday I will talk about Time Slicing.\nA technique React uses to solve performance bottleneck.\n\n## Event Loop and CPU bottlenecks\n### Event Loop\nModern browsers run a continuous event loop at a certain frequency - e.g. 60Hz (refresh 60 times a second). For smooth and responsive experience, browsers try to complete tasks within each event loop execution, aka a frame.\n\n![event-loop-frame](https://user-images.githubusercontent.com/51183663/209892101-70af523b-4bf5-45ba-9aef-b01ac11f9b70.png)\n\nFor 60Hz refresh rate devices, each execution frame has a budget of 16.66ms (1 second / 60).\n\n### CPU bottlenecks\nWithin such a shoestring budget, browsers have to handle a pipeline of work like this:\n\n![frame_pipeline](https://user-images.githubusercontent.com/51183663/209890234-985a0618-b856-414d-999e-f41823756b9b.png)\n\nIf any step in this pipeline needs more than 16.66ms, no time will be left for the upcoming work in this frame.\nThis means we will not have time for style calculations, layout, paint and compositing, when we spend too much time on JavaScript jobs.\nWhen this lasts for 2 or 3 seconds, users will feel your website is slow.\n\n### How does React avoid this scenario?\nReact sets up an interval for running JavaScript tasks in each frame. \nWhen running out of this interval, React will pause its current tasks and give back control to the main thread, letting it perform high priority tasks (painting or user events).\nAfter the main thread has finished prioritized jobs, React goes back to where it stopped and continues working.\n\nAs you may have noticed, the key here is to make React interruptible.\n\n## Time Slicing and Interruptible React \nAssume we have a large application with 500+ components to render.\n### While rendering these components, how does React ensure responsiveness for keyboard or mouse events?\n\nBefore React 16, the render phase was synchronize and uninterruptible.\nThe browser therefore would be easily occupied by CPU-hungry tasks,\nand unable to give prompt responses to user events.\nTake a look at [this video](https://www.youtube.com/watch?v=nLF0n9SACd4) to see what CPU-heavy tasks could be like.\n\n### So, how did React overcome this?\n\nAnswer: Time Slicing.\n\nHere is a [picture](https://twitter.com/acdlite/status/977291318324948992) of time slicing in React (idea of Andrew Clark from the React core team).\n\n![time_slicing](https://user-images.githubusercontent.com/51183663/211950568-f4b85e7a-91d6-4a5a-9b97-c949a14e4282.png)\n\n### Interruptible render phase\nAfter version 16, React started using Fiber reconciler to ensure the render phase is interruptible. It breaks down the render phase into time slices so that it can pause current work to run more urgent tasks, like user inputs.\nAs shown in the above picture, time slicing enables browser events to cut in line during the render phase. This helps React to avoid \"hiccup\" moments.\n\n### Uninterruptible commit phase\nUnlike the render phase, the commit phase can not be interrupted.\nYou can think of these two like a movie screenplay and a movie on show.\nWhen a movie is on (the commit phase), theatres will not suddenly stop playing or change its order of scenes. Just like React will not draw some semi-calculated UI or suddenly stop the commit phase.\n\n## Interruptible Work Loop\nBefore version 16, React reconciler is implemented by call stack recursion. However, stack Reconciliation will not allow pauses on a running task during the render phase.\nAs mentioned earlier, a high performance render phase is time sliced and interruptible. To implement this, we can change the call stack recursion to conditional while loop recursion:\n```js\nfunction workLoop(deadline) {\n    let shouldYield = false\n    while (workInProgress !== null && !shouldYield) {\n        // next workInprogress is set within performUnitOfWork\n        performUnitOfWork(\n            workInProgress \n        )\n        shouldYield = deadline.timeRemaining() < 1\n    }\n    requestIdleCallback(workLoop)\n}\n```\n- while (workInProgress !== null && !shouldYield)\n> This enables us to stop the workLoop, especially when there is no time left in each frame (shouldYield).  \n- requestIdleCallback\n> Check whether the main thread is idle for running sliced tasks.\n\n## Fiber Reconciler\nThis interruptable reconciler is called Fiber reconciler in React.\nTo know more about React Fiber, take a look at this post first: [React Fiber Tree](https://flaming-cl.github.io/bits-refinery/2022/11/22/react-fiber-tree/).\n\n## References\n[1] [Sneak Peek: Beyond React 16, Dan Abramov](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html)\n[1] [Build your own React, Rodrigo Pombo](https://pomb.us/build-your-own-react/)\n[2] [Event loop: microtasks and macrotasks, javascript.info](https://javascript.info/event-loop)\n[3] [Visualization of async rendering and synchronous rendering in React, Andrew Clark](https://twitter.com/acdlite/status/977291318324948992)\n[4] [Reconciliation, React official documents](https://reactjs.org/docs/reconciliation.html)\n[5] [Rendering Performance, Paul Lewis](https://web.dev/rendering-performance/)\n[6] [Frame timing, W3C](https://www.w3.org/TR/frame-timing/)\n","slug":"time-slicing-react","published":1,"updated":"2023-02-09T03:15:05.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldwmqq0l000d2epnawmodznq","content":"<p>You may have heard people saying “React is fast” as it uses virtual DOM.<br>But is virtual DOM the only thing you can think of when talking about React performance?<br>In fact React has done many things to handle performance issues.</p>\n<p>Today I will talk about Time Slicing.<br>A technique React uses to solve performance bottleneck.</p>\n<h2 id=\"Event-Loop-and-CPU-bottlenecks\"><a href=\"#Event-Loop-and-CPU-bottlenecks\" class=\"headerlink\" title=\"Event Loop and CPU bottlenecks\"></a>Event Loop and CPU bottlenecks</h2><h3 id=\"Event-Loop\"><a href=\"#Event-Loop\" class=\"headerlink\" title=\"Event Loop\"></a>Event Loop</h3><p>Modern browsers run a continuous event loop at a certain frequency - e.g. 60Hz (refresh 60 times a second). For smooth and responsive experience, browsers try to complete tasks within each event loop execution, aka a frame.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/209892101-70af523b-4bf5-45ba-9aef-b01ac11f9b70.png\" alt=\"event-loop-frame\"></p>\n<p>For 60Hz refresh rate devices, each execution frame has a budget of 16.66ms (1 second &#x2F; 60).</p>\n<h3 id=\"CPU-bottlenecks\"><a href=\"#CPU-bottlenecks\" class=\"headerlink\" title=\"CPU bottlenecks\"></a>CPU bottlenecks</h3><p>Within such a shoestring budget, browsers have to handle a pipeline of work like this:</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/209890234-985a0618-b856-414d-999e-f41823756b9b.png\" alt=\"frame_pipeline\"></p>\n<p>If any step in this pipeline needs more than 16.66ms, no time will be left for the upcoming work in this frame.<br>This means we will not have time for style calculations, layout, paint and compositing, when we spend too much time on JavaScript jobs.<br>When this lasts for 2 or 3 seconds, users will feel your website is slow.</p>\n<h3 id=\"How-does-React-avoid-this-scenario\"><a href=\"#How-does-React-avoid-this-scenario\" class=\"headerlink\" title=\"How does React avoid this scenario?\"></a>How does React avoid this scenario?</h3><p>React sets up an interval for running JavaScript tasks in each frame.<br>When running out of this interval, React will pause its current tasks and give back control to the main thread, letting it perform high priority tasks (painting or user events).<br>After the main thread has finished prioritized jobs, React goes back to where it stopped and continues working.</p>\n<p>As you may have noticed, the key here is to make React interruptible.</p>\n<h2 id=\"Time-Slicing-and-Interruptible-React\"><a href=\"#Time-Slicing-and-Interruptible-React\" class=\"headerlink\" title=\"Time Slicing and Interruptible React\"></a>Time Slicing and Interruptible React</h2><p>Assume we have a large application with 500+ components to render.</p>\n<h3 id=\"While-rendering-these-components-how-does-React-ensure-responsiveness-for-keyboard-or-mouse-events\"><a href=\"#While-rendering-these-components-how-does-React-ensure-responsiveness-for-keyboard-or-mouse-events\" class=\"headerlink\" title=\"While rendering these components, how does React ensure responsiveness for keyboard or mouse events?\"></a>While rendering these components, how does React ensure responsiveness for keyboard or mouse events?</h3><p>Before React 16, the render phase was synchronize and uninterruptible.<br>The browser therefore would be easily occupied by CPU-hungry tasks,<br>and unable to give prompt responses to user events.<br>Take a look at <a href=\"https://www.youtube.com/watch?v=nLF0n9SACd4\">this video</a> to see what CPU-heavy tasks could be like.</p>\n<h3 id=\"So-how-did-React-overcome-this\"><a href=\"#So-how-did-React-overcome-this\" class=\"headerlink\" title=\"So, how did React overcome this?\"></a>So, how did React overcome this?</h3><p>Answer: Time Slicing.</p>\n<p>Here is a <a href=\"https://twitter.com/acdlite/status/977291318324948992\">picture</a> of time slicing in React (idea of Andrew Clark from the React core team).</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/211950568-f4b85e7a-91d6-4a5a-9b97-c949a14e4282.png\" alt=\"time_slicing\"></p>\n<h3 id=\"Interruptible-render-phase\"><a href=\"#Interruptible-render-phase\" class=\"headerlink\" title=\"Interruptible render phase\"></a>Interruptible render phase</h3><p>After version 16, React started using Fiber reconciler to ensure the render phase is interruptible. It breaks down the render phase into time slices so that it can pause current work to run more urgent tasks, like user inputs.<br>As shown in the above picture, time slicing enables browser events to cut in line during the render phase. This helps React to avoid “hiccup” moments.</p>\n<h3 id=\"Uninterruptible-commit-phase\"><a href=\"#Uninterruptible-commit-phase\" class=\"headerlink\" title=\"Uninterruptible commit phase\"></a>Uninterruptible commit phase</h3><p>Unlike the render phase, the commit phase can not be interrupted.<br>You can think of these two like a movie screenplay and a movie on show.<br>When a movie is on (the commit phase), theatres will not suddenly stop playing or change its order of scenes. Just like React will not draw some semi-calculated UI or suddenly stop the commit phase.</p>\n<h2 id=\"Interruptible-Work-Loop\"><a href=\"#Interruptible-Work-Loop\" class=\"headerlink\" title=\"Interruptible Work Loop\"></a>Interruptible Work Loop</h2><p>Before version 16, React reconciler is implemented by call stack recursion. However, stack Reconciliation will not allow pauses on a running task during the render phase.<br>As mentioned earlier, a high performance render phase is time sliced and interruptible. To implement this, we can change the call stack recursion to conditional while loop recursion:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deadline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> shouldYield <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>shouldYield<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// next workInprogress is set within performUnitOfWork</span>\n        <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>\n            workInProgress \n        <span class=\"token punctuation\">)</span>\n        shouldYield <span class=\"token operator\">=</span> deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>workLoop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>while (workInProgress !&#x3D;&#x3D; null &amp;&amp; !shouldYield)<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>This enables us to stop the workLoop, especially when there is no time left in each frame (shouldYield).  </p></blockquote>\n</li>\n<li>requestIdleCallback<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Check whether the main thread is idle for running sliced tasks.</p></blockquote>\n</li>\n</ul>\n<h2 id=\"Fiber-Reconciler\"><a href=\"#Fiber-Reconciler\" class=\"headerlink\" title=\"Fiber Reconciler\"></a>Fiber Reconciler</h2><p>This interruptable reconciler is called Fiber reconciler in React.<br>To know more about React Fiber, take a look at this post first: <a href=\"https://flaming-cl.github.io/bits-refinery/2022/11/22/react-fiber-tree/\">React Fiber Tree</a>.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[1] <a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\">Sneak Peek: Beyond React 16, Dan Abramov</a><br>[1] <a href=\"https://pomb.us/build-your-own-react/\">Build your own React, Rodrigo Pombo</a><br>[2] <a href=\"https://javascript.info/event-loop\">Event loop: microtasks and macrotasks, javascript.info</a><br>[3] <a href=\"https://twitter.com/acdlite/status/977291318324948992\">Visualization of async rendering and synchronous rendering in React, Andrew Clark</a><br>[4] <a href=\"https://reactjs.org/docs/reconciliation.html\">Reconciliation, React official documents</a><br>[5] <a href=\"https://web.dev/rendering-performance/\">Rendering Performance, Paul Lewis</a><br>[6] <a href=\"https://www.w3.org/TR/frame-timing/\">Frame timing, W3C</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>You may have heard people saying “React is fast” as it uses virtual DOM.<br>But is virtual DOM the only thing you can think of when talking about React performance?<br>In fact React has done many things to handle performance issues.</p>\n<p>Today I will talk about Time Slicing.<br>A technique React uses to solve performance bottleneck.</p>\n<h2 id=\"Event-Loop-and-CPU-bottlenecks\"><a href=\"#Event-Loop-and-CPU-bottlenecks\" class=\"headerlink\" title=\"Event Loop and CPU bottlenecks\"></a>Event Loop and CPU bottlenecks</h2><h3 id=\"Event-Loop\"><a href=\"#Event-Loop\" class=\"headerlink\" title=\"Event Loop\"></a>Event Loop</h3><p>Modern browsers run a continuous event loop at a certain frequency - e.g. 60Hz (refresh 60 times a second). For smooth and responsive experience, browsers try to complete tasks within each event loop execution, aka a frame.</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/209892101-70af523b-4bf5-45ba-9aef-b01ac11f9b70.png\" alt=\"event-loop-frame\"></p>\n<p>For 60Hz refresh rate devices, each execution frame has a budget of 16.66ms (1 second &#x2F; 60).</p>\n<h3 id=\"CPU-bottlenecks\"><a href=\"#CPU-bottlenecks\" class=\"headerlink\" title=\"CPU bottlenecks\"></a>CPU bottlenecks</h3><p>Within such a shoestring budget, browsers have to handle a pipeline of work like this:</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/209890234-985a0618-b856-414d-999e-f41823756b9b.png\" alt=\"frame_pipeline\"></p>\n<p>If any step in this pipeline needs more than 16.66ms, no time will be left for the upcoming work in this frame.<br>This means we will not have time for style calculations, layout, paint and compositing, when we spend too much time on JavaScript jobs.<br>When this lasts for 2 or 3 seconds, users will feel your website is slow.</p>\n<h3 id=\"How-does-React-avoid-this-scenario\"><a href=\"#How-does-React-avoid-this-scenario\" class=\"headerlink\" title=\"How does React avoid this scenario?\"></a>How does React avoid this scenario?</h3><p>React sets up an interval for running JavaScript tasks in each frame.<br>When running out of this interval, React will pause its current tasks and give back control to the main thread, letting it perform high priority tasks (painting or user events).<br>After the main thread has finished prioritized jobs, React goes back to where it stopped and continues working.</p>\n<p>As you may have noticed, the key here is to make React interruptible.</p>\n<h2 id=\"Time-Slicing-and-Interruptible-React\"><a href=\"#Time-Slicing-and-Interruptible-React\" class=\"headerlink\" title=\"Time Slicing and Interruptible React\"></a>Time Slicing and Interruptible React</h2><p>Assume we have a large application with 500+ components to render.</p>\n<h3 id=\"While-rendering-these-components-how-does-React-ensure-responsiveness-for-keyboard-or-mouse-events\"><a href=\"#While-rendering-these-components-how-does-React-ensure-responsiveness-for-keyboard-or-mouse-events\" class=\"headerlink\" title=\"While rendering these components, how does React ensure responsiveness for keyboard or mouse events?\"></a>While rendering these components, how does React ensure responsiveness for keyboard or mouse events?</h3><p>Before React 16, the render phase was synchronize and uninterruptible.<br>The browser therefore would be easily occupied by CPU-hungry tasks,<br>and unable to give prompt responses to user events.<br>Take a look at <a href=\"https://www.youtube.com/watch?v=nLF0n9SACd4\">this video</a> to see what CPU-heavy tasks could be like.</p>\n<h3 id=\"So-how-did-React-overcome-this\"><a href=\"#So-how-did-React-overcome-this\" class=\"headerlink\" title=\"So, how did React overcome this?\"></a>So, how did React overcome this?</h3><p>Answer: Time Slicing.</p>\n<p>Here is a <a href=\"https://twitter.com/acdlite/status/977291318324948992\">picture</a> of time slicing in React (idea of Andrew Clark from the React core team).</p>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/211950568-f4b85e7a-91d6-4a5a-9b97-c949a14e4282.png\" alt=\"time_slicing\"></p>\n<h3 id=\"Interruptible-render-phase\"><a href=\"#Interruptible-render-phase\" class=\"headerlink\" title=\"Interruptible render phase\"></a>Interruptible render phase</h3><p>After version 16, React started using Fiber reconciler to ensure the render phase is interruptible. It breaks down the render phase into time slices so that it can pause current work to run more urgent tasks, like user inputs.<br>As shown in the above picture, time slicing enables browser events to cut in line during the render phase. This helps React to avoid “hiccup” moments.</p>\n<h3 id=\"Uninterruptible-commit-phase\"><a href=\"#Uninterruptible-commit-phase\" class=\"headerlink\" title=\"Uninterruptible commit phase\"></a>Uninterruptible commit phase</h3><p>Unlike the render phase, the commit phase can not be interrupted.<br>You can think of these two like a movie screenplay and a movie on show.<br>When a movie is on (the commit phase), theatres will not suddenly stop playing or change its order of scenes. Just like React will not draw some semi-calculated UI or suddenly stop the commit phase.</p>\n<h2 id=\"Interruptible-Work-Loop\"><a href=\"#Interruptible-Work-Loop\" class=\"headerlink\" title=\"Interruptible Work Loop\"></a>Interruptible Work Loop</h2><p>Before version 16, React reconciler is implemented by call stack recursion. However, stack Reconciliation will not allow pauses on a running task during the render phase.<br>As mentioned earlier, a high performance render phase is time sliced and interruptible. To implement this, we can change the call stack recursion to conditional while loop recursion:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">workLoop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deadline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> shouldYield <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>workInProgress <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>shouldYield<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// next workInprogress is set within performUnitOfWork</span>\n        <span class=\"token function\">performUnitOfWork</span><span class=\"token punctuation\">(</span>\n            workInProgress \n        <span class=\"token punctuation\">)</span>\n        shouldYield <span class=\"token operator\">=</span> deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>workLoop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>while (workInProgress !&#x3D;&#x3D; null &amp;&amp; !shouldYield)<blockquote>\n<p>This enables us to stop the workLoop, especially when there is no time left in each frame (shouldYield).  </p>\n</blockquote>\n</li>\n<li>requestIdleCallback<blockquote>\n<p>Check whether the main thread is idle for running sliced tasks.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Fiber-Reconciler\"><a href=\"#Fiber-Reconciler\" class=\"headerlink\" title=\"Fiber Reconciler\"></a>Fiber Reconciler</h2><p>This interruptable reconciler is called Fiber reconciler in React.<br>To know more about React Fiber, take a look at this post first: <a href=\"https://flaming-cl.github.io/bits-refinery/2022/11/22/react-fiber-tree/\">React Fiber Tree</a>.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[1] <a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\">Sneak Peek: Beyond React 16, Dan Abramov</a><br>[1] <a href=\"https://pomb.us/build-your-own-react/\">Build your own React, Rodrigo Pombo</a><br>[2] <a href=\"https://javascript.info/event-loop\">Event loop: microtasks and macrotasks, javascript.info</a><br>[3] <a href=\"https://twitter.com/acdlite/status/977291318324948992\">Visualization of async rendering and synchronous rendering in React, Andrew Clark</a><br>[4] <a href=\"https://reactjs.org/docs/reconciliation.html\">Reconciliation, React official documents</a><br>[5] <a href=\"https://web.dev/rendering-performance/\">Rendering Performance, Paul Lewis</a><br>[6] <a href=\"https://www.w3.org/TR/frame-timing/\">Frame timing, W3C</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cldwmqq0800002epn1bvn2n15","tag_id":"cldwmqq0e00022epn5k5a8n4e","_id":"cldwmqq0j00072epngjpxawlu"},{"post_id":"cldwmqq0h00052epn293t0lp2","tag_id":"cldwmqq0e00022epn5k5a8n4e","_id":"cldwmqq0k00092epn0i7iegwb"},{"post_id":"cldwmqq0j00082epn59tn69b1","tag_id":"cldwmqq0e00022epn5k5a8n4e","_id":"cldwmqq0l000c2epne6f2b5wp"},{"post_id":"cldwmqq0f00032epne7a5e0ys","tag_id":"cldwmqq0e00022epn5k5a8n4e","_id":"cldwmqq0m000e2epn1q66ca7r"},{"post_id":"cldwmqq0l000d2epnawmodznq","tag_id":"cldwmqq0e00022epn5k5a8n4e","_id":"cldwmqq0m000g2epn1ecm2zu2"},{"post_id":"cldwmqq0g00042epn87mo9kch","tag_id":"cldwmqq0l000b2epn55xe9hka","_id":"cldwmqq0m000h2epnexl5dfvs"},{"post_id":"cldwmqq0k000a2epnee4qhy8f","tag_id":"cldwmqq0m000f2epndx7222dl","_id":"cldwmqq0m000i2epn2jnvaz6x"}],"Tag":[{"name":"React","_id":"cldwmqq0e00022epn5k5a8n4e"},{"name":"DSA for web dev","_id":"cldwmqq0l000b2epn55xe9hka"},{"name":"JavaScript","_id":"cldwmqq0m000f2epndx7222dl"}]}}