{"title":"Advanced Vue Techniques - A Practical Guide","uid":"9ca18bcd9178700a07f55d597003f180","slug":"vue-advance-skills","date":"2025-02-17T04:56:39.000Z","updated":"2025-02-19T03:11:15.967Z","comments":true,"path":"api/articles/vue-advance-skills.json","keywords":null,"cover":null,"content":"<p>Modern Vue development provides a rich set of APIs and patterns that help you build modular, flexible, and maintainable applications. In this guide, we explore several advanced topics with practical examples:</p>\n<ol>\n<li>Directives in Render Functions</li>\n<li>Custom Directives (Reusable Locally)</li>\n<li>Destructuring an Object in a v-for</li>\n<li>Special CSS Pseudo-Selectors in Vue</li>\n<li>Improving Reusability by Converting Template Props into Slots</li>\n<li>Using <code>triggerRef</code></li>\n<li>Simplified Scoped Slot Syntax</li>\n<li>Dynamic Directives</li>\n<li>UI States to Get Right</li>\n</ol>\n<h2 id=\"1-Directives-in-Render-Functions\"><a href=\"#1-Directives-in-Render-Functions\" class=\"headerlink\" title=\"1. Directives in Render Functions\"></a>1. Directives in Render Functions</h2><p>When writing render functions instead of templates, you cannot use the typical <code>v-</code> directive syntax. Instead, use <code>resolveDirective</code> and <code>withDirectives</code> to bind directives programmatically.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script setup&gt;\nimport &#123; h, resolveDirective, withDirectives &#125; from &#39;vue&#39;;\n\n&#x2F;&#x2F; Assume a global &#39;focus&#39; directive is registered.\nconst focusDirective &#x3D; resolveDirective(&#39;focus&#39;);\n\nconst render &#x3D; () &#x3D;&gt;\n  withDirectives(\n    h(&#39;button&#39;, &#123; onClick: () &#x3D;&gt; console.log(&#39;Clicked!&#39;) &#125;, &#39;Click Me&#39;),\n    [[focusDirective]]\n  );\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>This dynamic approach lets you conditionally apply directives based on runtime logic.</p>\n<h2 id=\"2-Custom-Directives-Reusable-Locally\"><a href=\"#2-Custom-Directives-Reusable-Locally\" class=\"headerlink\" title=\"2. Custom Directives (Reusable Locally)\"></a>2. Custom Directives (Reusable Locally)</h2><p>You can define and register custom directives locally instead of globally. This avoids polluting the global namespace while still promoting reuse.</p>\n<p><strong>Local Custom Directive with <code>&lt;script setup&gt;</code>:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script setup&gt;\n&#x2F;&#x2F; Define a local custom directive that sets the element&#39;s background to red.\nconst redBackground &#x3D; &#123;\n  mounted(el) &#123;\n    el.style.background &#x3D; &#39;red&#39;;\n  &#125;\n&#125;;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<template>\n  <!-- Use the directive locally; note the \"v-\" prefix in the template -->\n  <input v-red-background />\n</template>\n\n<p><strong>Local Registration in Options API:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">export default &#123;\n  name: &#39;MyComponent&#39;,\n  directives: &#123;\n    redBackground: &#123;\n      mounted(el) &#123;\n        el.style.background &#x3D; &#39;red&#39;;\n      &#125;\n    &#125;\n  &#125;,\n  template: &#96;\n    &lt;div&gt;\n      &lt;input v-red-background &#x2F;&gt;\n    &lt;&#x2F;div&gt;\n  &#96;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>This technique allows you to encapsulate directive logic per component or module without forcing global registration.</p>\n<h2 id=\"3-Destructuring-an-Object-in-a-v-for\"><a href=\"#3-Destructuring-an-Object-in-a-v-for\" class=\"headerlink\" title=\"3. Destructuring an Object in a v-for\"></a>3. Destructuring an Object in a v-for</h2><p>ES6 destructuring lets you iterate over an object’s properties directly in a <code>v-for</code> loop, making your templates cleaner.</p>\n<p><strong>Iterate Over Object Properties:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n  &lt;!-- Assume userInfo is an object like &#123; id: 1, name: &#39;Alice&#39;, age: 30 &#125; --&gt;\n  &lt;ul&gt;\n    &lt;li v-for&#x3D;&quot;(value, key) in userInfo&quot; :key&#x3D;&quot;key&quot;&gt;\n      &lt;strong&gt;&#123;&#123; key &#125;&#125;:&lt;&#x2F;strong&gt; &#123;&#123; value &#125;&#125;\n    &lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Destructuring in an Array of Objects:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n  &lt;!-- &#39;users&#39; is an array of objects: [ &#123; id: 1, name: &#39;Alice&#39; &#125;, &#123; id: 2, name: &#39;Bob&#39; &#125; ] --&gt;\n  &lt;ul&gt;\n    &lt;li v-for&#x3D;&quot;&#123; id, name &#125; in users&quot; :key&#x3D;&quot;id&quot;&gt;\n      &#123;&#123; name &#125;&#125;\n    &lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>This syntax simplifies accessing object properties without extra boilerplate.</p>\n<h2 id=\"4-Special-CSS-Pseudo-Selectors-in-Vue\"><a href=\"#4-Special-CSS-Pseudo-Selectors-in-Vue\" class=\"headerlink\" title=\"4. Special CSS Pseudo-Selectors in Vue\"></a>4. Special CSS Pseudo-Selectors in Vue</h2><p>Vue’s scoped CSS supports pseudo-selectors like <code>:slotted</code> and <code>:global</code>, which let you target slot content and apply global styles even within a scoped block.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;style scoped&gt;\n  &#x2F;* Style only &lt;p&gt; elements provided via a slot *&#x2F;\n  :slotted(p) &#123;\n    margin: 15px 5px;\n  &#125;\n  &#x2F;* Apply styles globally even within a scoped block *&#x2F;\n  :global(body) &#123;\n    margin: 0;\n    padding: 0;\n    font-family: sans-serif;\n  &#125;\n&lt;&#x2F;style&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>These selectors help maintain modular styles while still allowing necessary global adjustments.</p>\n<h2 id=\"5-Improve-Reusability-by-Converting-Template-Props-into-Slots\"><a href=\"#5-Improve-Reusability-by-Converting-Template-Props-into-Slots\" class=\"headerlink\" title=\"5. Improve Reusability by Converting Template Props into Slots\"></a>5. Improve Reusability by Converting Template Props into Slots</h2><p>For many simple components, using props solely for displaying text limits flexibility. Converting such props to default slots allows parent components to pass richer content.</p>\n<p><strong>Using Props:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n  &lt;button @click&#x3D;&quot;$emit(&#39;click&#39;)&quot;&gt;\n    &#123;&#123; text &#125;&#125;\n  &lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;\n&lt;script setup&gt;\ndefineProps(&#123;\n  text: &#123;\n    type: String,\n    required: true,\n  &#125;,\n&#125;);\ndefineEmits([&#39;click&#39;]);\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Using Slots:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;template&gt;\n  &lt;button @click&#x3D;&quot;$emit(&#39;click&#39;)&quot;&gt;\n    &lt;slot&gt;Default Button Text&lt;&#x2F;slot&gt;\n  &lt;&#x2F;button&gt;\n&lt;&#x2F;template&gt;\n&lt;script setup&gt;\ndefineEmits([&#39;click&#39;]);\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Slots enable you to pass complex HTML or even other components, thereby enhancing flexibility and reusability.</p>\n<h2 id=\"6-Using-triggerRef\"><a href=\"#6-Using-triggerRef\" class=\"headerlink\" title=\"6. Using triggerRef\"></a>6. Using <code>triggerRef</code></h2><p>When you use <code>shallowRef</code> to create a reactive reference, only the top-level object is reactive. Updates to nested properties won’t trigger reactivity unless you manually call <code>triggerRef</code>.</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script setup&gt;\nimport &#123; shallowRef, triggerRef &#125; from &#39;vue&#39;;\n\n&#x2F;&#x2F; Create a shallow ref; its nested object is not made reactive.\nconst shallowData &#x3D; shallowRef(&#123; nested: &#123; count: 0 &#125; &#125;);\n\nfunction updateNested(newCount) &#123;\n  shallowData.value.nested.count &#x3D; newCount;\n  &#x2F;&#x2F; Manually trigger reactivity for shallowData.\n  triggerRef(shallowData);\n&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>This approach helps avoid performance overhead from deep reactivity while still giving you control over updates.</p>\n<h2 id=\"7-Simplified-Scoped-Slot-Syntax\"><a href=\"#7-Simplified-Scoped-Slot-Syntax\" class=\"headerlink\" title=\"7. Simplified Scoped Slot Syntax\"></a>7. Simplified Scoped Slot Syntax</h2><p>Scoped slots can be verbose when using extra <code>&lt;template&gt;</code> tags. Vue allows a shorthand syntax to eliminate these extra tags when you have a single scoped slot.</p>\n<p><strong>Traditional Scoped Slot:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;DataTable&gt;\n  &lt;template v-slot:header&#x3D;&quot;tableAttributes&quot;&gt;\n    &lt;TableHeader v-bind&#x3D;&quot;tableAttributes&quot; &#x2F;&gt;\n  &lt;&#x2F;template&gt;\n&lt;&#x2F;DataTable&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Shorthand Syntax:</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;DataTable #header&#x3D;&quot;tableAttributes&quot;&gt;\n  &lt;TableHeader v-bind&#x3D;&quot;tableAttributes&quot; &#x2F;&gt;\n&lt;&#x2F;DataTable&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>This shorthand reduces template clutter and improves readability.</p>\n<h2 id=\"8-Dynamic-Directives\"><a href=\"#8-Dynamic-Directives\" class=\"headerlink\" title=\"8. Dynamic Directives\"></a>8. Dynamic Directives</h2><p>Dynamic directive arguments allow you to determine at runtime which attribute or event to bind. This is especially useful for conditionally adding attributes without cluttering your template with conditionals.</p>\n<p><strong>Example: Conditionally Binding the <code>target</code> Attribute in a Link</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!-- LinkComponent.vue --&gt;\n&lt;template&gt;\n  &lt;a :href&#x3D;&quot;url&quot; v-bind:[targetAttr]&#x3D;&quot;&#39;_blank&#39;&quot;&gt;\n    &lt;slot &#x2F;&gt;\n  &lt;&#x2F;a&gt;\n&lt;&#x2F;template&gt;\n&lt;script setup&gt;\nimport &#123; computed &#125; from &#39;vue&#39;;\n\nconst props &#x3D; defineProps(&#123;\n  newTab: &#123;\n    type: Boolean,\n    default: false,\n  &#125;,\n  url: &#123;\n    type: String,\n    required: true,\n  &#125;,\n&#125;);\n\n&#x2F;&#x2F; If newTab is false, targetAttr becomes null and the attribute is removed.\nconst targetAttr &#x3D; computed(() &#x3D;&gt; (props.newTab ? &#39;target&#39; : null));\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>In this example, if <code>props.newTab</code> is <code>true</code>, <code>targetAttr</code> evaluates to <code>&quot;target&quot;</code>, so the link gets <code>target=&quot;_blank&quot;</code>. If <code>false</code>, it evaluates to <code>null</code>, and Vue removes the attribute. This pattern is used in projects like Michael Thiessen’s Vue Tips Collection and VueUse to simplify conditional attribute bindings.</p>\n<h2 id=\"9-UI-States-to-Get-Right\"><a href=\"#9-UI-States-to-Get-Right\" class=\"headerlink\" title=\"9. UI States to Get Right\"></a>9. UI States to Get Right</h2><p>When building a UI, there are many different states that you need to consider:</p>\n<ul>\n<li><strong>Normal</strong> — Sometimes called the “happy path,” this is when things are working as expected. For example, in an email client, you’d show some read emails, some unread emails, and maybe a few in the “spam” folder.</li>\n<li><strong>Loading</strong> — Your UI must do something while fetching data. Here are a couple of tricks:<ol>\n<li>Use a computed prop to combine multiple loading states—avoid having spinners scattered all over.</li>\n<li>Wait about 200ms before showing a spinner. If the data loads within that time, it feels faster than flashing a spinner on and off.</li>\n</ol>\n</li>\n<li><strong>Error</strong> — Things will go wrong, and you need to handle errors gracefully. Effectively communicating problems to users (e.g., clear password requirements) is challenging but essential.</li>\n<li><strong>Empty</strong> — What happens when there’s no data? For instance, if there are no emails to read or tasks to complete, your UI should indicate an empty state.</li>\n<li><strong>Partial Data</strong> — Similar to the empty state, but when you have only a few data points (e.g., one email in a list). Your UI should handle this gracefully.</li>\n<li><strong>Lots of Data</strong> — When data volumes are very high (e.g., 1294 unread emails), your UI might need infinite scrolling or pagination to remain responsive.</li>\n</ul>\n<p>*References: (Vue Tips Collection, Second Edition), <a href=\"https://vuejs.org/\">Vue.js Documentation</a></p>\n","feature":true,"text":"Modern Vue development provides a rich set of APIs and patterns that help you build modular, flexible, and maintainable applications. In thi...","link":"","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Directives-in-Render-Functions\"><span class=\"toc-text\">1. Directives in Render Functions</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Custom-Directives-Reusable-Locally\"><span class=\"toc-text\">2. Custom Directives (Reusable Locally)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-Destructuring-an-Object-in-a-v-for\"><span class=\"toc-text\">3. Destructuring an Object in a v-for</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-Special-CSS-Pseudo-Selectors-in-Vue\"><span class=\"toc-text\">4. Special CSS Pseudo-Selectors in Vue</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-Improve-Reusability-by-Converting-Template-Props-into-Slots\"><span class=\"toc-text\">5. Improve Reusability by Converting Template Props into Slots</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-Using-triggerRef\"><span class=\"toc-text\">6. Using triggerRef</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-Simplified-Scoped-Slot-Syntax\"><span class=\"toc-text\">7. Simplified Scoped Slot Syntax</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-Dynamic-Directives\"><span class=\"toc-text\">8. Dynamic Directives</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-UI-States-to-Get-Right\"><span class=\"toc-text\">9. UI States to Get Right</span></a></li></ol>","author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Reimagining Modals with URLs in Vue 3","uid":"61ca760241aeae2995f9ab1aabf344ab","slug":"url-modal","date":"2023-07-30T03:58:18.000Z","updated":"2023-07-30T04:25:52.909Z","comments":true,"path":"api/articles/url-modal.json","keywords":null,"cover":[],"text":"Today I stumbled upon a cool tweet by Cory House (@housecor). He suggested using a URL search parameter, instead of a state to track whether...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"}],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}