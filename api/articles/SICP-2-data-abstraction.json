{"title":"Data Abstraction or Adapters?","uid":"011291387b98480482def982d619d16d","slug":"SICP-2-data-abstraction","date":"2023-03-28T00:14:53.000Z","updated":"2023-03-28T03:07:29.452Z","comments":true,"path":"api/articles/SICP-2-data-abstraction.json","keywords":null,"cover":null,"content":"<p>世界是千变万化的，需求也可能会变化。我们的代码也应该能够适应这种变化。在这篇文章中，我将会讨论如何在不大量修改代码的情况下，让代码能够适应需求的变化。<br>我觉得 Data abstraction 和 Adapters 虽然都是应对需求变化的方法，但我们使用它们的时机是很不同的。<br>深思熟虑：我们在面对一个新的需求的时候，应该先考虑使用 Data abstraction，尽可能地把数据操作和业务逻辑分离开来。<br>亡羊补牢：而当我们的已有设计不能满足新的需求的时候，我们应该考虑使用 Adapters。</p>\n<h3 id=\"Data-Abstraction\"><a href=\"#Data-Abstraction\" class=\"headerlink\" title=\"Data Abstraction\"></a>Data Abstraction</h3><p> In functional programming, data abstraction means using functions to encapsulate data structures, and accessing the data through a well-defined interface provided by those functions. This way, the rest of the program does not have to deal with the details of the data structure, but only with the abstraction layer provided by the functions.</p>\n<p>This approach makes it easier to modify the data structure in the future, because changes to the data structure can be made by changing the implementation of the functions that encapsulate it, without affecting the rest of the program. This helps to minimize the impact of changes to the data structure on the overall codebase, and can make it easier to maintain and extend the code in the long term.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 构造函数 make_point，以 x 和 y 为参数，返回一个点对象</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">make_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> x<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> y\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 选择器 x_point，返回点对象的 x 坐标</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">x_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 选择器 y_point，返回点对象的 y 坐标</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">y_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 构造函数 make_segment，以 start 和 end 为参数，返回一个线段对象</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">make_segment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">start</span><span class=\"token operator\">:</span> start<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">end</span><span class=\"token operator\">:</span> end\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 选择器 start_segment，返回线段对象的起点</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">start_segment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">segment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> segment<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 选择器 end_segment，返回线段对象的终点</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">end_segment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">segment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> segment<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 函数 midpoint_segment，以线段对象为参数，返回其中点的坐标</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">midpoint_segment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">segment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token function\">start_segment</span><span class=\"token punctuation\">(</span>segment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> <span class=\"token function\">end_segment</span><span class=\"token punctuation\">(</span>segment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> mid_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">x_point</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">x_point</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> mid_y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">y_point</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">y_point</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">make_point</span><span class=\"token punctuation\">(</span>mid_x<span class=\"token punctuation\">,</span> mid_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 打印点的方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">print_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">x_point</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">y_point</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 测试 midpoint_segment 函数</span>\n<span class=\"token keyword\">const</span> segment <span class=\"token operator\">=</span> <span class=\"token function\">make_segment</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">make_point</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> midpoint <span class=\"token operator\">=</span> <span class=\"token function\">midpoint_segment</span><span class=\"token punctuation\">(</span>segment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_point</span><span class=\"token punctuation\">(</span>midpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 (3, 4)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 构造函数 Point，以 x 和 y 为参数，返回一个表示点的对象</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 构造函数 Segment，以 start 和 end 为参数，返回一个表示线段的对象</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Segment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 函数 midpoint，以一个线段对象为参数，返回其中点的坐标</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">midpoint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">segment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> segment<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> segment<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> mid_x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> end<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> mid_y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> end<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>mid_x<span class=\"token punctuation\">,</span> mid_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 打印点的方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">print_point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>point<span class=\"token punctuation\">.</span>x<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>point<span class=\"token punctuation\">.</span>y<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 测试 Segment 和 midpoint 函数</span>\n<span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> segment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Segment</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mid <span class=\"token operator\">=</span> <span class=\"token function\">midpoint</span><span class=\"token punctuation\">(</span>segment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_point</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 (3, 4)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Adapters</th>\n<th>Data Abstraction</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Pros</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>1.</td>\n<td>Allows easier integration of</td>\n<td>Encapsulates implementation</td>\n</tr>\n<tr>\n<td></td>\n<td>existing code with new interfaces</td>\n<td>details, allowing for cleaner</td>\n</tr>\n<tr>\n<td></td>\n<td>or data structures.</td>\n<td>and more maintainable code.</td>\n</tr>\n<tr>\n<td>2.</td>\n<td>Enables reuse of existing code</td>\n<td>Simplifies code changes by</td>\n</tr>\n<tr>\n<td></td>\n<td>with minimal modifications.</td>\n<td>limiting the impact of</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>modifications to the constructor</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>and selector functions.</td>\n</tr>\n<tr>\n<td>3.</td>\n<td>Can provide a temporary</td>\n<td>Promotes better separation of</td>\n</tr>\n<tr>\n<td></td>\n<td>solution for integrating</td>\n<td>concerns and modularity in the</td>\n</tr>\n<tr>\n<td></td>\n<td>incompatible systems while</td>\n<td>application.</td>\n</tr>\n<tr>\n<td></td>\n<td>working on a more permanent</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>solution.</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Cons</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>1.</td>\n<td>Adds an extra layer of</td>\n<td>Requires initial investment in</td>\n</tr>\n<tr>\n<td></td>\n<td>complexity, making code harder</td>\n<td>creating constructors and</td>\n</tr>\n<tr>\n<td></td>\n<td>to understand and maintain.</td>\n<td>selectors.</td>\n</tr>\n<tr>\n<td>2.</td>\n<td>May not provide a long-term</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>solution, requiring more</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>refactoring in the future.</td>\n<td></td>\n</tr>\n<tr>\n<td>3.</td>\n<td>Potentially loses some benefits</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>of data abstraction by not</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>fully encapsulating the</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>implementation details.</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"Real-world-examples\"><a href=\"#Real-world-examples\" class=\"headerlink\" title=\"Real world examples\"></a>Real world examples</h3><h3 id=\"Data-Abstraction-1\"><a href=\"#Data-Abstraction-1\" class=\"headerlink\" title=\"Data Abstraction\"></a>Data Abstraction</h3><p>Express.js uses data abstraction in several ways, most notably in the way it represents and manipulates HTTP requests and responses. In Express.js, request and response objects are abstracted into req and res objects that can be passed to middleware and route handlers. This makes it easier for developers to work with HTTP requests and responses without worrying about their underlying implementation.<br>Request and Response objects: The req and res objects in Express.js are data abstractions that provide a simplified interface for working with HTTP requests and responses. They encapsulate the complexity of working with raw HTTP messages and provide methods and properties for easy manipulation.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/example'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> userAgent <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> queryParams <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, your user agent is: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>userAgent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, query params: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>queryParams<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>In this example, the req.get() method is used to get the User-Agent header, and req.query is used to access the query parameters of the request. These abstractions simplify working with HTTP requests.</p>\n<h3 id=\"Adapter\"><a href=\"#Adapter\" class=\"headerlink\" title=\"Adapter\"></a>Adapter</h3><p>Adapter Example: Ghost’s Storage Adapter<br>Ghost uses adapters for its storage system, allowing users to switch between different storage providers (e.g., local storage, Amazon S3, Google Cloud Storage).</p>\n<p>Here’s an example of a storage adapter for Ghost called ghost-storage-adapter-s3:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> BaseAdapter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ghost-storage-base'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">S3Adapter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseAdapter</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token constant\">AWS</span><span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>S3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fileName<span class=\"token punctuation\">,</span> targetDir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">image<span class=\"token punctuation\">,</span> targetDir</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">serve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> targetDir<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> S3Adapter<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">make_rat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> g <span class=\"token operator\">=</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">pair</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> g<span class=\"token punctuation\">,</span> d <span class=\"token operator\">/</span> g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">numer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">head</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">denom</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">tail</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add_rat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">make_rat</span><span class=\"token punctuation\">(</span><span class=\"token function\">numer</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">denom</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">numer</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">denom</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">denom</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">denom</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sub_rat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">make_rat</span><span class=\"token punctuation\">(</span><span class=\"token function\">numer</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">denom</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">numer</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">denom</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">denom</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">denom</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mul_rat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">make_rat</span><span class=\"token punctuation\">(</span><span class=\"token function\">numer</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">numer</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">denom</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">denom</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">div_rat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">make_rat</span><span class=\"token punctuation\">(</span><span class=\"token function\">numer</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">denom</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">denom</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">numer</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">equal_rat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">numer</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">denom</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">numer</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">denom</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">print_rat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token function\">numer</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token function\">denom</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","feature":true,"text":"世界是千变万化的，需求也可能会变化。我们的代码也应该能够适应这种变化。在这篇文章中，我将会讨论如何在不大量修改代码的情况下，让代码能够适应需求的变化。我觉得 Data abstraction 和 Adapters 虽然都是应对需求变化的方法，但我们使用它们的时机是很不同的。深思熟...","link":"","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"Functional-Programming","slug":"Functional-Programming","count":2,"path":"api/tags/Functional-Programming.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Data-Abstraction\"><span class=\"toc-text\">Data Abstraction</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Real-world-examples\"><span class=\"toc-text\">Real world examples</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Data-Abstraction-1\"><span class=\"toc-text\">Data Abstraction</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Adapter\"><span class=\"toc-text\">Adapter</span></a></li></ol>","author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Recursion, Iteration and Abstraction from SICP","uid":"db38fc973daee4dda97824ebfb5c0041","slug":"recursion-iteration-and-function-abstraction-md","date":"2023-03-26T23:45:35.000Z","updated":"2023-03-29T03:38:59.508Z","comments":true,"path":"api/articles/recursion-iteration-and-function-abstraction-md.json","keywords":null,"cover":[],"text":"I’ve recently been reading SICP, a book about programming philosophy. I just finished the 1st chapter yesterday and wanted to share some of ...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"Functional-Programming","slug":"Functional-Programming","count":2,"path":"api/tags/Functional-Programming.json"}],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}