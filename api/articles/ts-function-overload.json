{"title":"TypeScript Function Overloads","uid":"e8aa6c77cc743a25eb58a8f5670b685f","slug":"ts-function-overload","date":"2023-07-03T13:42:34.000Z","updated":"2023-07-30T04:07:12.370Z","comments":true,"path":"api/articles/ts-function-overload.json","keywords":null,"cover":[],"content":"<p>Today I’ve come across something that seems baffling in Vuetify’s <a href=\"https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/defineComponent.tsx#L252\">source code, genericComponent</a>: <strong>a function with the same name declared multiple times</strong>.</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; No argument - simple default slot\nexport function genericComponent (exposeDefaults?: boolean): DefineComponentWithSlots&lt;&#123; default: never &#125;&gt;\n\n&#x2F;&#x2F; Generic constructor argument - generic props and slots\nexport function genericComponent&lt;T extends (new (props: Record&lt;string, any&gt;, slots: any) &#x3D;&gt; &#123;\n  $props?: Record&lt;string, any&gt;\n&#125;)&gt; (exposeDefaults?: boolean): DefineComponentWithGenericProps&lt;T&gt;\n\n&#x2F;&#x2F; Slots argument - simple slots\nexport function genericComponent&lt;\n  Slots extends RawSlots\n&gt; (exposeDefaults?: boolean): DefineComponentWithSlots&lt;Slots&gt;\n\n&#x2F;&#x2F; Implementation\nexport function genericComponent (exposeDefaults &#x3D; true) &#123;\n  return (options: any) &#x3D;&gt; ((exposeDefaults ? defineComponent : _defineComponent) as any)(options)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>At first glance, it might be perplexing. Why would the same function be declared 4 times? Furthermore, the first 3 declarations don’t seem to be full function definitions at all, but rather TypeScript type declarations.</p>\n<p>With this question in mind, let’s look at an example from TypeScript official website.</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function makeDate(timestamp: number): Date;\nfunction makeDate(m: number, d: number, y: number): Date;\nfunction makeDate(mOrTimestamp: number, d?: number, y?: number): Date &#123;\n  if (d !&#x3D;&#x3D; undefined &amp;&amp; y !&#x3D;&#x3D; undefined) &#123;\n    return new Date(y, mOrTimestamp, d);\n  &#125; else &#123;\n    return new Date(mOrTimestamp);\n  &#125;\n&#125;\n\nconst d1 &#x3D; makeDate(12345678);\nconst d2 &#x3D; makeDate(5, 5, 5);\nconst d3 &#x3D; makeDate(1, 3);  &#x2F;&#x2F; Error: No overload expects 2 arguments<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>Looking at the above code, you’ll notice a function <code>makeDate</code> which can be invoked in 2 distinct ways. You might be tempted to ask, “Why not just use the 3rd function? It appears to handle all possible scenarios, right?” </p>\n<p>From a purely technical perspective, you wouldn’t be wrong. However, this is where we introduce an important concept in TypeScript: Function Overloading. With the first two function overloads, we’re enhancing the development experience when calling <code>makeDate</code> by leaps and bounds.</p>\n<p><img src=\"https://github.com/flaming-cl/flaming-cl.github.io/assets/51183663/c53243a2-d914-43c5-ab91-4c7dbeb81301\" alt=\"Screenshot 2023-07-29 at 19 30 35\"></p>\n<p><img src=\"https://github.com/flaming-cl/flaming-cl.github.io/assets/51183663/b9fc33cb-fd0d-45ac-9504-5121c24c62a8\" alt=\"Screenshot 2023-07-29 at 19 30 52\"></p>\n<p><img src=\"https://github.com/flaming-cl/flaming-cl.github.io/assets/51183663/a35e3d00-654f-4c7f-97fc-6d67c06770cb\" alt=\"Screenshot 2023-07-29 at 19 31 18\"></p>\n<p>With the above screenshots, you must have a much clearer idea about why we use function overloading. Yes, when a developer invokes <code>makeDate</code> with a single argument, TypeScript knows that this argument is a timestamp (defined in the first overload). And it won’t prompt the developer for the additional parameters <code>d</code> and <code>y</code>. </p>\n<p><strong>In essence, overloads provide enhanced type checking and better autocompletion support in editors.</strong> </p>\n<p>However, there’s a critical rule to remember: the function implementation (e.g., the third <code>makeDate</code> declaration) must be compatible with all the overloads. That is, the parameters and return type of the implementation should be a superset of those in each overload. If we fail to do this, TypeScript will helpfully point out a mismatch. For example:</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">function fn(x: boolean): void;\nfunction fn(x: string): void;  &#x2F;&#x2F; Error: This overload signature is not compatible with its implementation signature.\nfunction fn(x: boolean) &#123;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>So, circling back to the <code>genericComponent</code> code, it’s now clear that the initial 3 <code>genericComponent</code> functions are merely type definitions, outlining the possible outputs of <code>genericComponent</code> under different circumstances (i.e., <code>DefineComponentWithSlots&lt;&#123; default: never &#125;&gt;</code>, <code>DefineComponentWithSlots&lt;Slots&gt;</code>, and <code>DefineComponentWithGenericProps&lt;T&gt;</code>).</p>\n<p>In summary, while function overloading in TypeScript might initially appear perplexing, it is a useful feature that can greatly improve the developer experience by providing enhanced type safety and clearer code autocompletion suggestions. </p>\n","feature":true,"text":"Today I’ve come across something that seems baffling in Vuetify’s source code, genericComponent: a function with the same name declared mult...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","count":1,"path":"api/tags/TypeScript.json"}],"toc":"","author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Reimagining Modals with URLs in Vue 3","uid":"61ca760241aeae2995f9ab1aabf344ab","slug":"url-modal","date":"2023-07-30T03:58:18.000Z","updated":"2023-07-30T04:25:52.909Z","comments":true,"path":"api/articles/url-modal.json","keywords":null,"cover":[],"text":"Today I stumbled upon a cool tweet by Cory House (@housecor). He suggested using a URL search parameter, instead of a state to track whether...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"}],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"CS143 Compiler - Basic concepts","uid":"209a99b3228c3d6a24c530e39b14fe15","slug":"compiler","date":"2023-05-27T20:12:38.000Z","updated":"2023-05-27T21:31:12.271Z","comments":true,"path":"api/articles/compiler.json","keywords":null,"cover":null,"text":"1. Lexical Analysis This term comes from “lexicon”. In linguistics, a lexicon refers to the vocabulary of a language, including words and ph...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"compiler","slug":"compiler","count":1,"path":"api/tags/compiler.json"}],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}