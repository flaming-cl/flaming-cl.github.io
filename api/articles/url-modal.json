{"title":"Reimagining Modals with URLs in Vue 3","uid":"61ca760241aeae2995f9ab1aabf344ab","slug":"url-modal","date":"2023-07-30T03:58:18.000Z","updated":"2023-07-30T04:25:52.909Z","comments":true,"path":"api/articles/url-modal.json","keywords":null,"cover":[],"content":"<p>Today I stumbled upon a cool tweet by Cory House (@housecor). He suggested using a URL search parameter, instead of a state to track whether a modal is open or closed.</p>\n<p><img src=\"https://github.com/flaming-cl/flaming-cl.github.io/assets/51183663/fd10978e-a7a8-49d0-bffd-0c84bfc52a4b\" alt=\"Screenshot 2023-07-30 at 00 15 30\"></p>\n<p>As outlined by Cory House, these are the advantages of URL modals:</p>\n<ul>\n<li>Users can bookmark or share a link to the open dialog. </li>\n<li>If a dialog represents a unique location, it probably warrants a unique URL.</li>\n<li>You can use a plain anchor to open the dialog. Semantically, an <code>&lt;a&gt;</code> is the proper semantic tag for navigation. No button or onClick is required.</li>\n</ul>\n<p>Inspired by this idea, I implemented a simple url modal component using Vue 3.</p>\n<h3 id=\"Overall-idea\"><a href=\"#Overall-idea\" class=\"headerlink\" title=\"Overall idea\"></a>Overall idea</h3><p>The idea is simple: use the URL hash to control the modal. Also, to keep track of the hash, we will rely on Vue 3’s reactive data.</p>\n<h4 id=\"URL-hash\"><a href=\"#URL-hash\" class=\"headerlink\" title=\"URL hash\"></a>URL hash</h4><p>The URL hash, the part of the URL after the ‘#’ symbol, serves as a unique identifier for our modal. By altering the URL hash, we can decide when our modal should appear or disappear:</p>\n<ol>\n<li>If the URL hash matches a certain value, we show the modal.</li>\n<li>If it is changed or removed, we hide the modal.</li>\n</ol>\n<h4 id=\"Reactive-hash-value\"><a href=\"#Reactive-hash-value\" class=\"headerlink\" title=\"Reactive hash value\"></a>Reactive hash value</h4><p>To reactively track changes to the URL hash, we leverage Vue 3’s reactivity system. We create a reactive reference to the window location hash, and update it whenever the URL hash changes. This allows our modal to respond dynamically to changes in the URL hash.</p>\n<h3 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h3><h4 id=\"Listening-url-hash-changes\"><a href=\"#Listening-url-hash-changes\" class=\"headerlink\" title=\"Listening url hash changes\"></a>Listening url hash changes</h4><p>To start, we need to listen for changes in the URL. For this, we create a reactive reference hash to the window location hash, and update it whenever the URL hash changes:</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">const hash &#x3D; ref(window.location.hash)\n\nconst updateHash &#x3D; () &#x3D;&gt; &#123;\n  hash.value &#x3D; window.location.hash;\n&#125;\n\nonMounted(() &#x3D;&gt; &#123;\n  window.addEventListener(&#39;hashchange&#39;, updateHash)\n&#125;)\n\nonUnmounted(() &#x3D;&gt; &#123;\n  window.removeEventListener(&#39;hashchange&#39;, updateHash)\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"Modal-control-events\"><a href=\"#Modal-control-events\" class=\"headerlink\" title=\"Modal control events\"></a>Modal control events</h4><h5 id=\"showModal\"><a href=\"#showModal\" class=\"headerlink\" title=\"showModal\"></a>showModal</h5><p>With the hash reactive reference in place, we can control the visibility of our modal. It is displayed when the hash matches the modalId prop of our modal:</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">const showModal &#x3D; computed(() &#x3D;&gt; &#123;\n  return hash.value &#x3D;&#x3D;&#x3D; &#96;#$&#123;props.modalId&#125;&#96;\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"closeModal\"><a href=\"#closeModal\" class=\"headerlink\" title=\"closeModal\"></a>closeModal</h5><p>To close the modal, we remove the modal ID from the URL and reset our reactive hash:</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">const closeModal &#x3D; () &#x3D;&gt; &#123;\n  resumeBrowserUrl();\n  resetReactiveHash();\n&#125;\n\nconst resumeBrowserUrl &#x3D; () &#x3D;&gt; &#123;\n  const urlWithoutModalId &#x3D; window.location.origin + &#39;&#x2F;&#39; + window.location.search;\n  window.history.pushState(&#123; path: urlWithoutModalId &#125;, &#39;&#39;, urlWithoutModalId);\n&#125;\n\nfunction resetReactiveHash() &#123;\n  hash.value &#x3D; &quot;&quot;;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Adding-Template\"><a href=\"#Adding-Template\" class=\"headerlink\" title=\"Adding Template\"></a>Adding Template</h4><h5 id=\"1-Modal-trigger-a-link\"><a href=\"#1-Modal-trigger-a-link\" class=\"headerlink\" title=\"1. Modal trigger, a link.\"></a>1. Modal trigger, a link.</h5><p>Clicking on it will change the URL hash to the modal ID, which opens the modal. <code>textLink</code> is a prop given by users of the component.</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;a :href&#x3D;&quot;formatHref(props.modalId)&quot;&gt;&#123;&#123; textLink &#125;&#125;&lt;&#x2F;a&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"2-Dimmed-background-behind-the-modal\"><a href=\"#2-Dimmed-background-behind-the-modal\" class=\"headerlink\" title=\"2. Dimmed background behind the modal.\"></a>2. Dimmed background behind the modal.</h5><p>It’s only visible when showModal is true. Clicking on the backdrop will close the modal.</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;div class&#x3D;&quot;modal-backdrop&quot; @click&#x3D;&quot;closeModal&quot; v-if&#x3D;&quot;showModal&quot;&gt;...&lt;&#x2F;div&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"3-The-modal-itself\"><a href=\"#3-The-modal-itself\" class=\"headerlink\" title=\"3. The modal itself.\"></a>3. The modal itself.</h5><p><code>.stop</code> prevents clicks inside the modal from reaching the backdrop and closing the modal.</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;div class&#x3D;&quot;modal-content&quot; @click.stop&gt;...&lt;&#x2F;div&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"4-Content-Slot\"><a href=\"#4-Content-Slot\" class=\"headerlink\" title=\"4. Content Slot\"></a>4. Content Slot</h5><p>This slot allows users of the component to insert their own content into the modal.</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;slot name&#x3D;&quot;content&quot; :closeModal&#x3D;&quot;closeModal&quot; &#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"Full-Code\"><a href=\"#Full-Code\" class=\"headerlink\" title=\"Full Code\"></a>Full Code</h4><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;template&gt;\n  &lt;a :href&#x3D;&quot;formatHref(props.modalId)&quot;&gt;&#123;&#123; linkText &#125;&#125;&lt;&#x2F;a&gt;\n\n  &lt;transition name&#x3D;&quot;modal-fade&quot;&gt;\n    &lt;div class&#x3D;&quot;modal-backdrop&quot; @click&#x3D;&quot;closeModal&quot; v-if&#x3D;&quot;showModal&quot; &gt;\n      &lt;div class&#x3D;&quot;modal-content&quot; @click.stop&gt;\n        &lt;slot name&#x3D;&quot;content&quot; :closeModal&#x3D;&quot;closeModal&quot; &#x2F;&gt;\n      &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;transition&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; computed, onMounted, onUnmounted, ref &#125; from &#39;vue&#39;;\n\nconst props &#x3D; defineProps(&#123;\n  modalId: &#123;\n    type: String,\n    required: true\n  &#125;,\n  linkText: &#123;\n    type: String,\n    required: true\n  &#125;\n&#125;)\n\nconst hash &#x3D; ref(window.location.hash)\n\nconst formatHref &#x3D; (modalId) &#x3D;&gt; &#96;#$&#123;modalId&#125;&#96;\n\nconst updateHash &#x3D; () &#x3D;&gt; &#123;\n  hash.value &#x3D; window.location.hash;\n&#125;\n\nonMounted(() &#x3D;&gt; &#123;\n  window.addEventListener(&#39;hashchange&#39;, updateHash)\n&#125;)\n\nonUnmounted(() &#x3D;&gt; &#123;\n  window.removeEventListener(&#39;hashchange&#39;, updateHash)\n&#125;)\n\nconst showModal &#x3D; computed(() &#x3D;&gt; &#123;\n  return hash.value &#x3D;&#x3D;&#x3D; formatHref(props.modalId)\n&#125;)\n\nconst closeModal &#x3D; () &#x3D;&gt; &#123;\n  resumeBrowserUrl();\n  resetReactiveHash();\n&#125;\n\nconst resumeBrowserUrl &#x3D; () &#x3D;&gt; &#123;\n  const urlWithoutModalId &#x3D; window.location.origin + &#39;&#x2F;&#39; + window.location.search;\n  window.history.pushState(&#123; path: urlWithoutModalId &#125;, &#39;&#39;, urlWithoutModalId);\n&#125;\n\nfunction resetReactiveHash() &#123;\n  hash.value &#x3D; &quot;&quot;;\n&#125;\n\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;\n@import &#39;.&#x2F;urlModal.css&#39;;\n&lt;&#x2F;style&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Usage-Example\"><a href=\"#Usage-Example\" class=\"headerlink\" title=\"Usage Example\"></a>Usage Example</h4><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">&lt;script setup&gt;\nimport UrlModal from &quot;@&#x2F;components&#x2F;UrlModal&quot;;\nconst URL_MODAL_BENEFITS &#x3D; [\n  &quot;✅ Users can bookmark or share a link to the open dialog.&quot;,\n  &quot;✅ If a dialog represents a unique location, it probably warrants a unique URL.&quot;,\n  &quot;✅ You can use a plain anchor to open the dialog. Semantically, an &lt;a&gt; is the proper semantic tag for navigation. No button or onClick is required.&quot;\n]\n&lt;&#x2F;script&gt;\n\n&lt;template&gt;\n  &lt;UrlModal modal-id&#x3D;&quot;my-modal&quot; linkText&#x3D;&quot;Why we use url modal?&quot; &gt;\n    &lt;template #content&#x3D;&quot;&#123; closeModal &#125;&quot;&gt;\n      &lt;h2&gt;Modal Benefits (@housecor)&lt;&#x2F;h2&gt;\n      &lt;p v-for&#x3D;&quot;text in URL_MODAL_BENEFITS&quot;&gt;&#123;&#123; text &#125;&#125;&lt;&#x2F;p&gt;\n      &lt;button @click&#x3D;&quot;closeModal&quot;&gt;Close Modal&lt;&#x2F;button&gt;\n    &lt;&#x2F;template&gt;\n  &lt;&#x2F;UrlModal&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<img src=\"https://github.com/flaming-cl/flaming-cl.github.io/assets/51183663/d9d60b1c-11d2-49e2-941e-7f1bac73e3c2\" width=\"600\" height=\"600\">\n\n<p>And there you have it! A neat, little URL modal made with Vue 3, inspired by a tweet from Cory House. It’s an interesting twist on the usual way of doing things, and hopefully it may give you some ideas for your next project. 🚀</p>\n","feature":true,"text":"Today I stumbled upon a cool tweet by Cory House (@housecor). He suggested using a URL search parameter, instead of a state to track whether...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Overall-idea\"><span class=\"toc-text\">Overall idea</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#URL-hash\"><span class=\"toc-text\">URL hash</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Reactive-hash-value\"><span class=\"toc-text\">Reactive hash value</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Implementation\"><span class=\"toc-text\">Implementation</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Listening-url-hash-changes\"><span class=\"toc-text\">Listening url hash changes</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Modal-control-events\"><span class=\"toc-text\">Modal control events</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#showModal\"><span class=\"toc-text\">showModal</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#closeModal\"><span class=\"toc-text\">closeModal</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Adding-Template\"><span class=\"toc-text\">Adding Template</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-Modal-trigger-a-link\"><span class=\"toc-text\">1. Modal trigger, a link.</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-Dimmed-background-behind-the-modal\"><span class=\"toc-text\">2. Dimmed background behind the modal.</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-The-modal-itself\"><span class=\"toc-text\">3. The modal itself.</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-Content-Slot\"><span class=\"toc-text\">4. Content Slot</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Full-Code\"><span class=\"toc-text\">Full Code</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Usage-Example\"><span class=\"toc-text\">Usage Example</span></a></li></ol></li></ol>","author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Advanced Vue Techniques - A Practical Guide","uid":"9ca18bcd9178700a07f55d597003f180","slug":"vue-advance-skills","date":"2025-02-17T04:56:39.000Z","updated":"2025-02-19T03:11:15.967Z","comments":true,"path":"api/articles/vue-advance-skills.json","keywords":null,"cover":null,"text":"Modern Vue development provides a rich set of APIs and patterns that help you build modular, flexible, and maintainable applications. In thi...","link":"","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"}],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"TypeScript Function Overloads","uid":"e8aa6c77cc743a25eb58a8f5670b685f","slug":"ts-function-overload","date":"2023-07-03T13:42:34.000Z","updated":"2023-07-30T04:07:12.370Z","comments":true,"path":"api/articles/ts-function-overload.json","keywords":null,"cover":[],"text":"Today I’ve come across something that seems baffling in Vuetify’s source code, genericComponent: a function with the same name declared mult...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","count":1,"path":"api/tags/TypeScript.json"}],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}