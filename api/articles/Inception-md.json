{"title":"Grasping UseEffect Stale Closure with Movie Inception","uid":"07b02f74349d52d5bc0900b3a9e875c6","slug":"Inception-md","date":"2023-03-19T03:45:30.000Z","updated":"2023-03-19T12:39:11.925Z","comments":true,"path":"api/articles/Inception-md.json","keywords":null,"cover":[],"content":"<p>The first time I sought a deeper understanding of useEffect was due to——an unexpected bug in a React project at work. Later, I found this was because I did not grasp the essence of this hook.</p>\n<p>At its core, useEffect is a hook that allows you to perform data operations after each rendering of a component. If you don’t want it to be called every time, you can pass an array of dependencies to it:</p>\n<ul>\n<li>Passing an array with a specific state. This means that <strong>you want your operation to be performed only when a certain state is updated</strong>.<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>someState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>Passing an empty array. This means that <strong>you want certain operations to run after the initial render of the component</strong>.<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<p>But what I was not aware of was <strong><code>useEffect(() =&gt; &#123;&#125;, [])</code> can only access the data produced by the initial render</strong>. It cannot access the updated state from any subsequent renders. In this case, one may encounter what’s known as <strong>a stale closure in React useEffect hook</strong>.</p>\n<h3 id=\"Stale-Closure\"><a href=\"#Stale-Closure\" class=\"headerlink\" title=\"Stale Closure\"></a>Stale Closure</h3><p>Stale closure—don’t be intimidated by this buzzword. Let’s start with something light and fun: movie Inception.</p>\n<p><em>“Oops, just a heads-up! I’ll be sharing spoilers about the movie’s plot. If you’d prefer not to know, feel free to watch the movie first and then return to enjoy this blog post.”</em></p>\n<p>Inception is one of my favorite movie. Its protagonist can create and navigate multiple layers of dreams using dream manipulation skills, ultimately implanting a belief-like idea into someone’s mind.</p>\n<p>You can think of React as a dream scene architect, where each time you call <code>setState</code>, it’s like pressing a button to construct a new dream layer.</p>\n<p>So if you trigger <code>setState</code> after the App’s first render, you’re signaling React to initiate a new layer of rendering snapshot.<br>This means that <strong>even though a new rendering has been completed, there can still be functions referring to the data from the first rendering</strong>. Here comes in what we called the <code>useEffect</code> stale closure pitfall, as seen in this code snippet:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        click me\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>What will be logged after clicking the button 3 times?<br><code>always 0</code></p>\n<p>In this code snippet, the callback function in <code>useEffect</code> is trapped within the first rendering state snapshot, unable to access data from subsequent renders.</p>\n<h3 id=\"Explanation-with-Movie-Inception\"><a href=\"#Explanation-with-Movie-Inception\" class=\"headerlink\" title=\"Explanation with Movie Inception\"></a>Explanation with Movie Inception</h3><p><strong>How should we understand this?</strong></p>\n<p>Let’s go back to the movie for an explanation.<br>As the story progresses, the movie Inception features 3 scenes of dream simultaneously: </p>\n<ul>\n<li>In the newest dream layer (the 3rd layer), Cobb has arrived at the latest snowy mountain scene.</li>\n<li>2nd layer: Cobb’s companion Arthur stays in the second layer to complete his mission.</li>\n<li>1st layer: their companion Yusurf remains in the first layer racing against time.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/51183663/226151016-69e59a76-0f19-41a6-a5b3-45f42e4f8262.png\" alt=\"New Project (1)\"></p>\n<p><strong>Here are the similarities between Inception’s dreamscapes and React’s renders</strong> (disclaimer: there are actually many differences, but for now, let’s focus on the similarities that help you understand stale closures) are as follows:</p>\n<ul>\n<li><strong>React: States in different React renders are independent of one another.</strong></li>\n<li>Inception: Each dream has its own independent scene. We can think of each dream layer as a snapshot of the React state. Due to the independence between different dreamscapes, some characters with specific mission requirements can only stay within a specific scene.</li>\n<li><strong>React: After the first render in React, a timer triggered by useEffect(() &#x3D;&gt; {}, []) can only use the states related to the first render, and cannot access the latest state.</strong></li>\n<li>Inception: Yusurf in the first dream layer remains in that layer, and never access the subsequent dream layers, like the hotel or the snow mountain.</li>\n</ul>\n<p>By drawing this comparison, hopefully you can better understand the concept of stale closures in React hooks: <strong>Stale closure refers to a situation where a callback function inside a useEffect hook cannot capture updated state values.</strong> That callback is like a character trapped in an old dreamscape.</p>\n<h3 id=\"Reasons-behind-independent-rendering-states\"><a href=\"#Reasons-behind-independent-rendering-states\" class=\"headerlink\" title=\"Reasons behind independent rendering states\"></a>Reasons behind independent rendering states</h3><p>Inception creates 3 completely different scenes to make the dream experience more immersive and to make the dreamer firmly believe in the implanted idea. </p>\n<p><strong>But why does React make the state of each render independent?</strong></p>\n<p>This is due to React’s functional programming nature.<br>By doing this, React ensures that, at any given moment, a component’s state is immutable. This makes it easier for developers to predict the behavior of a React App.</p>\n<p>For example, by using <code>useEffect(() =&gt; &#123;&#125;, [])</code> to perform a certain operation, you’re kind of telling React: “Hey, this hook’s callback is just about the first render”. So React, being a good friend and following the data immutability rule, happily hands over data only from that initial render to you.</p>\n<h3 id=\"Fix-stale-closure-in-useEffect\"><a href=\"#Fix-stale-closure-in-useEffect\" class=\"headerlink\" title=\"Fix stale closure in useEffect\"></a>Fix stale closure in useEffect</h3><p>How to fix the issue in the timer code snippet, if we want the timer to log the latest count value?</p>\n<p><strong>To solve a problem, let’s first understand what the issue is:</strong><br>Stale closure occurs when a useEffect callback can never access the updated states.</p>\n<p>Therefore, our solution should be to focus on how to provide updated data to this callback.</p>\n<h4 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions\"></a>Solutions</h4><h5 id=\"Idea-1-allowing-the-callback-to-read-each-updated-state-snapshots\"><a href=\"#Idea-1-allowing-the-callback-to-read-each-updated-state-snapshots\" class=\"headerlink\" title=\"Idea 1: allowing the callback to read each updated state snapshots\"></a>Idea 1: allowing the callback to read each updated state snapshots</h5><ul>\n<li><strong>Action</strong>: include the count state as a dependency of this useEffect hook</li>\n<li><strong>Cons</strong>: you are creating and destroying a timer for each new count.<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        click me\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h5 id=\"Idea-2-keeping-the-callback-in-the-first-state-snapshot-but-providing-it-with-a-ref\"><a href=\"#Idea-2-keeping-the-callback-in-the-first-state-snapshot-but-providing-it-with-a-ref\" class=\"headerlink\" title=\"Idea 2: keeping the callback in the first state snapshot, but providing it with a ref .\"></a>Idea 2: keeping the callback in the first state snapshot, but providing it with a ref .</h5><ul>\n<li><strong>Action</strong>: use a ref to store the count value (Unlike states and effects, refs are objects that are passed into all rendering snapshots, they are mutable)</li>\n<li><strong>Pros</strong>: you are not creating and destroying a timer for each new count</li>\n<li><strong>Cons</strong>: updates on countRef.current can not be displayed in time to your App (any updates on ref.current will not trigger re-rendering in React).<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> countRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>countRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    countRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>\n        click me\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","feature":true,"text":"The first time I sought a deeper understanding of useEffect was due to——an unexpected bug in a React project at work. Later, I found this wa...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"React","slug":"React","count":7,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Stale-Closure\"><span class=\"toc-text\">Stale Closure</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Explanation-with-Movie-Inception\"><span class=\"toc-text\">Explanation with Movie Inception</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Reasons-behind-independent-rendering-states\"><span class=\"toc-text\">Reasons behind independent rendering states</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Fix-stale-closure-in-useEffect\"><span class=\"toc-text\">Fix stale closure in useEffect</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Solutions\"><span class=\"toc-text\">Solutions</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Idea-1-allowing-the-callback-to-read-each-updated-state-snapshots\"><span class=\"toc-text\">Idea 1: allowing the callback to read each updated state snapshots</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Idea-2-keeping-the-callback-in-the-first-state-snapshot-but-providing-it-with-a-ref\"><span class=\"toc-text\">Idea 2: keeping the callback in the first state snapshot, but providing it with a ref .</span></a></li></ol></li></ol></li></ol>","author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Recursion, Iteration, Function Abstraction from SICP Ch.1","uid":"89c5fe33e5813d847cfc2482295cbffc","slug":"recursion-iteration-and-function-abstraction-md","date":"2023-03-26T23:45:35.000Z","updated":"2023-03-27T03:29:33.175Z","comments":true,"path":"api/articles/recursion-iteration-and-function-abstraction-md.json","keywords":null,"cover":[],"text":"I’ve recently been reading SICP, and as many people have mentioned, this book truly teaches programming philosophy. I just finished the 1st ...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"Functional-Programming","slug":"Functional-Programming","count":1,"path":"api/tags/Functional-Programming.json"}],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Unraveling the Mystery Behind Closure with Stories","uid":"00e3725bba8ba6160a12eac273cbe88b","slug":"closure_stories","date":"2023-03-03T01:30:37.000Z","updated":"2023-03-24T22:27:23.540Z","comments":true,"path":"api/articles/closure_stories.json","keywords":null,"cover":[],"text":"Before I explain the concept of closure, let me share a story with you. The word “closure” evokes a tender memory of my visit to Manchester ...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/tags/JavaScript.json"}],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}