{"title":"Single-threaded JavaScript","uid":"e3fb0e6e7c44f4a9d38a4589b5569d51","slug":"single-threaded-javascript","date":"2023-02-08T19:33:14.000Z","updated":"2023-02-28T22:08:00.054Z","comments":true,"path":"api/articles/single-threaded-javascript.json","keywords":null,"cover":[],"content":"<p>This article will illustrate why we have synchronous and asynchronous tasks.</p>\n<h3 id=\"Synchronous-and-Asynchronous-Tasks\"><a href=\"#Synchronous-and-Asynchronous-Tasks\" class=\"headerlink\" title=\"Synchronous and Asynchronous Tasks\"></a>Synchronous and Asynchronous Tasks</h3><p>In JavaScript, we have synchronous and asynchronous tasks.</p>\n<p><strong>Synchronous Tasks</strong><br>Synchronous tasks are processed immediately, and they can block JavaScript execution until the running task is completed.</p>\n<p><strong>Asynchronous Tasks</strong><br>Asynchronous tasks, such as I&#x2F;O or network requests, often require interaction with threads other than the JS engine main thread to obtain data for incoming execution.</p>\n<p>As the main thread is not responsible for I&#x2F;O or network jobs, it really doesn’t need to wait for completion of long-running asynchronous tasks. To improve efficiency, JavaScript asks asynchronous tasks to yield the main thread for the next task, and will execute on ready asynchronous callbacks later.</p>\n<hr>\n<h4 id=\"Illustration-for-Asynchronous-Tasks\"><a href=\"#Illustration-for-Asynchronous-Tasks\" class=\"headerlink\" title=\"Illustration for Asynchronous Tasks\"></a>Illustration for Asynchronous Tasks</h4><p><img src=\"https://user-images.githubusercontent.com/51183663/219988659-2f282ff1-2788-49e5-adb1-dae052604aa5.png\" alt=\"queuing\"><br>To better understand asynchronous tasks, let’s look at an example of working as a counter staff at McDonald’s. Here is a typical scenario of a counter staff’s job:</p>\n<ol>\n<li>have customers <strong>waiting in line</strong> before serving them</li>\n<li><strong>serve</strong> customer A to order food at the counter</li>\n<li>tell customer A to <strong>wait for food to be cooked</strong>, and start serving customer B</li>\n<li>when customer A’s meal is ready, notify A to be back, pass meals to A and <strong>complete service</strong></li>\n</ol>\n<p>Let’s take a look at how working as a counter staff at McDonald’s is similar to task processing in JavaScript:</p>\n<ul>\n<li><strong>JavaScript is single-threaded, handling one task at a time.</strong><br>The counter staff only serves one customer at a time.</li>\n<li><strong>JavaScript passes asynchronous tasks to web APIs, let callbacks of async calls to be executed later, and begin processing the next task.</strong><br>Food ordered by customer A is not cooked yet. The counter staff asks the kitchen to prepare the meal, tells customer A to go back later, and start serving customer B.</li>\n<li><strong>JavaScript keeps on ready asynchronous tasks waiting in queue before execution.</strong><br>The way customers wait in queue is quite similar to how on ready asynchronous tasks wait in the task queue, as they all follow a first in first out manner.</li>\n</ul>\n<h4 id=\"Illustration-for-Synchronous-Tasks\"><a href=\"#Illustration-for-Synchronous-Tasks\" class=\"headerlink\" title=\"Illustration for Synchronous Tasks\"></a>Illustration for Synchronous Tasks</h4><p><strong>In JavaScript, synchronous tasks are executed immediately and before the execution of async tasks.</strong></p>\n<p>The counter staff’s analogy can also be used to explain synchronous tasks, as if food ordered by customer B is in the holding cabinet and ready for picking up.<br>In this case, the counter staff can directly pass the meal to and finish service for customer B, while customer A is still waiting for the meal to be ready.</p>\n<hr>\n<h3 id=\"Inside-asynchronous-tasks-Microtask-and-Macrotask\"><a href=\"#Inside-asynchronous-tasks-Microtask-and-Macrotask\" class=\"headerlink\" title=\"Inside asynchronous tasks: Microtask and Macrotask\"></a>Inside asynchronous tasks: Microtask and Macrotask</h3><p>To illustrate this, let’s modify our previous story a bit. Now the McDonald’s is inside a train station. It is common that some customers have their train leaving soon and ask other customers if they can cut in line to place their order soon.</p>\n<p><strong>This scenario emphasizes the need for having both microtasks and macrotasks:</strong> we want to make it possible for high priority tasks to cut in line and be executed ahead of less prioritized ones.</p>\n<p>As a result, microtasks are designed to be prioritized and executed earlier, while macrotasks are less urgent and can be deferred. In other words, microtasks will be executed before macrotasks in JavaScript.</p>\n<p>So far, we can infer the execution order of the three types of tasks is: </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>synchronous tasks -&gt; microtasks -&gt; macrotasks.</p></blockquote>\n","feature":true,"text":"This article will illustrate why we have synchronous and asynchronous tasks. Synchronous and Asynchronous TasksIn JavaScript, we have synchr...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Synchronous-and-Asynchronous-Tasks\"><span class=\"toc-text\">Synchronous and Asynchronous Tasks</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Illustration-for-Asynchronous-Tasks\"><span class=\"toc-text\">Illustration for Asynchronous Tasks</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Illustration-for-Synchronous-Tasks\"><span class=\"toc-text\">Illustration for Synchronous Tasks</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Inside-asynchronous-tasks-Microtask-and-Macrotask\"><span class=\"toc-text\">Inside asynchronous tasks: Microtask and Macrotask</span></a></li></ol>","author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Best Practice of using ref in React hooks and Why","uid":"475ab91d3f640698afc7f2e0661d00df","slug":"best-practice-of-useRef-and-why","date":"2023-02-28T20:54:29.000Z","updated":"2023-02-28T22:06:26.135Z","comments":true,"path":"api/articles/best-practice-of-useRef-and-why.json","keywords":null,"cover":null,"text":"The idea for this blog post was sparked by a React quiz on Big Front-End titled “useEffect.”In this article, we’ll be discussing a best prac...","link":"","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[],"tags":[],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Is setState asynchronous?","uid":"d7e769e271f05380381ff271e09b897f","slug":"async-setState","date":"2023-02-07T20:07:27.000Z","updated":"2023-02-28T19:48:53.252Z","comments":true,"path":"api/articles/async-setState.json","keywords":null,"cover":null,"text":"Whether setState is synchronous or asynchronous has become a cliché these days. However, as React is constantly evolving, a frontend program...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"React","slug":"React","count":5,"path":"api/tags/React.json"}],"author":{"name":"flaming-cl","slug":"flaming-cl","avatar":"https://avatars.githubusercontent.com/u/51183663?s=400&u=7addc16053694c5fa5d328409bb44dc2d4d18e4a&v=4","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}